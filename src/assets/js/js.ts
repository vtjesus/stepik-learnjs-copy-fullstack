import { BookPart, BookTypeWork } from '@/types/Book';

export const js: BookPart[] = [
	{
		book: 'JS',
		title: 'Основы JavaScript',

		content:
			'<header><h1>Основы JavaScript</h1></header><div class="section-content">\n<p>JavaScript – это язык программирования, который добавляет интерактивность на ваш веб-сайт (например: игры, отклик при нажатии кнопок или при вводе данных в формы, динамические стили, анимация). Эта статья поможет вам начать работать с этим захватывающим языком и даст вам представление о том, на что он способен.</p></div><section aria-labelledby="что_такое_javascript_на_самом_деле"><h2 id="что_такое_javascript_на_самом_деле"><a>Что такое JavaScript на самом деле?</a></h2><div class="section-content"><p><a>JavaScript</a> ("JS" для краткости) — это полноценный <a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!">динамический язык программирования</a>, который применяется к <a>HTML</a> документу, и может обеспечить динамическую интерактивность на веб-сайтах. Его разработал Brendan Eich, сооснователь проекта Mozilla, Mozilla Foundation и Mozilla Corporation.</p>\n<p>JavaScript невероятно универсален и дружелюбен к новичкам. Обладая большим опытом, вы сможете создавать игры, анимированную 2D и 3D графику, полномасштабные приложения с базами данных и многое другое!</p>\n<p>JavaScript сам по себе довольно компактный, но очень гибкий. Разработчиками написано большое количество инструментов поверх основного языка JavaScript, которые разблокируют огромное количество дополнительных функций с очень небольшим усилием. К ним относятся:</p>\n<ul>\n  <li>Программные интерфейсы приложения (<a>API</a>), встроенные в браузеры, обеспечивающие различные функциональные возможности, такие как динамическое создание HTML и установку CSS стилей, захват и манипуляция видеопотоком, работа с веб-камерой пользователя или генерация 3D графики и аудио сэмплов.</li>\n  <li>Сторонние API позволяют разработчикам внедрять функциональность в свои сайты от других разработчиков, таких как Twitter или Facebook.</li>\n  <li>Также вы можете применить к вашему HTML сторонние фреймворки и библиотеки, что позволит вам ускорить создание сайтов и приложений.</li>\n</ul>\n<p>Поскольку эта статья должна быть только лёгким введением в JavaScript, мы не собираемся путать вас на этом этапе, подробно рассказывая о том, какая разница между основным языком JavaScript и различными инструментами, перечисленными выше. Вы можете подробно изучить все это позже, в нашей <a>учебной области JavaScript</a> и в остальной части MDN.</p>\n<p>Ниже мы познакомим вас с некоторыми аспектами основного языка, и вы также будете играть с несколькими функциями API браузера. Веселитесь!</p></div></section><section aria-labelledby="пример_hello_world"><h2 id="пример_hello_world"><a>Пример "hello world"</a></h2><div class="section-content"><p>Предыдущий раздел звучит очень многообещающе, и это на самом деле так — JavaScript является одной из самых перспективных веб-технологий, и когда вы освоитесь и начнёте использовать его, ваши веб-сайты перейдут в новое измерение мощи и креативности.</p>\n<p>Тем не менее, с JavaScript немного более сложно освоиться, чем с HTML и CSS. Вам придётся начать с малого, продолжая изучение небольшими шагами. Для начала мы покажем вам, как добавить некоторые основы JavaScript на вашу страницу, чтобы создать "hello world!" пример (<a class="external" target="_blank">стандарт в начальных примерах программирования</a>).</p>\n<div class="notecard warning" id="sect1">\n  <p><strong>Предупреждение:</strong> <strong>Важно</strong>: Если вы не следили за остальным нашим курсом, <a class="external" target="_blank">скачайте этот пример кода</a> и используйте его в качестве стартовой точки.</p>\n</div>\n<ol>\n  <li>Для начала перейдите на ваш тестовый сайт и создайте папку с именем \'scripts\' (без кавычек). Затем, в новой папке скриптов, которую вы только что создали, создайте новый файл с именем <code>main.js</code>. Сохраните его в вашей папке <code>scripts</code>.</li>\n  <li>Далее перейдите в ваш <code>index.html</code> файл и введите следующий элемент на новой строке прямо перед закрывающим тегом <code>&lt;/body&gt;</code>:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><script src="scripts/main.js"></script>\n</pre></div>\n  </li>\n  <li>В основном этот код выполняет ту же работу, что и элемент <a><code>&lt;link&gt;</code></a> для CSS — добавляет JavaScript на страницу, позволяя ему взаимодействовать с HTML (и CSS, и чем-нибудь ещё на странице).</li>\n  <li>Теперь добавьте следующий код в файл <code>main.js</code>:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myHeading = document.querySelector("h1");\nmyHeading.textContent = "Hello world!";\n</pre></div>\n  </li>\n  <li>Теперь убедитесь, что HTML и JavaScript файлы сохранены, и загрузите <code>index.html</code> в браузере. Вы должны увидеть что-то вроде этого: \n    \n  </li>\n</ol>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Причиной, по которой мы поставили элемент <a><code>&lt;script&gt;</code></a> в нижней части HTML файла, является то, что HTML-элементы загружаются браузером в том порядке, в котором они расположены в файле. Поэтому, если JavaScript загружается первым и ему нужно взаимодействовать с HTML ниже его, он не сможет работать, так как JavaScript будет загружен раньше, чем HTML, с которым нужно работать. Поэтому, располагать JavaScript в нижней части HTML страницы считается лучшей стратегией.</p>\n</div></div></section><section aria-labelledby="что_произошло"><h3 id="что_произошло"><a>Что произошло?</a></h3><div class="section-content"><p>Итак, ваш заголовок текста был изменён на "Hello world!" с помощью JavaScript. Мы сделали это с помощью вызова функции <a title="querySelector()"><code>querySelector()</code></a>, захватив ссылку на наш заголовок и сохранив её в переменной, названной <code>myHeading</code>. Это очень похоже на то, что мы делали в CSS с помощью селекторов. Если вы хотите что-то сделать с элементом, то для начала вам нужно его выбрать.</p>\n<p>После этого, вы устанавливаете значение переменной <code>myHeading</code> в <a title="textContent"><code>textContent</code></a> свойство (которое представляет собой контент заголовка) "Hello world!".</p></div></section><section aria-labelledby="ускоренный_курс_по_основам_языка"><h2 id="ускоренный_курс_по_основам_языка"><a>Ускоренный курс по основам языка</a></h2><div class="section-content"><p>Давайте познакомимся с некоторыми основными возможностями языка JavaScript, чтобы дать вам больше понимания, как это всё работает. Более того, эти возможности являются общими для всех языков программирования. Если вы сможете понять эти основы, вы будете в состоянии начать программировать, как ни в чём не бывало!</p>\n<div class="notecard warning" id="sect3">\n  <p><strong>Предупреждение:</strong> <strong>Важно</strong>: В этой статье попробуйте вводить примеры строк кода в вашей JavaScript консоли, чтобы увидеть, что происходит. Для более подробной информации о JavaScript консоли смотрите статью <a>Откройте для себя браузерные инструменты разработчика</a>.</p>\n</div></div></section><section aria-labelledby="переменные"><h3 id="переменные"><a>Переменные</a></h3><div class="section-content"><p><a>Переменные</a> — это контейнеры, внутри которых вы можете хранить значения. Вы начинаете с того, что объявляете переменную с помощью ключевого слова <a><code>var</code></a> (не рекомендуется, продолжайте читать, чтобы получить объяснения) или <a><code>let</code></a>, за которым следует любое имя, которым вы захотите её назвать:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">let myVariable;\n</pre></div>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Точка с запятой в конце строки указывает, где заканчивается оператор. Точку с запятой нужно обязательно использовать для разеделения операторов, располагающихся на одной строке. Однако некоторые люди считают, что хорошая практика — указывать её в конце каждого оператора. Существуют и другие правила, когда нужно ставить точку с запятой, а когда нет. Смотрите более подробно в статье <a class="external" target="_blank">ваше руководство по точкам с запятой в JavaScript</a>.</p>\n</div>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> вы можете назвать переменную практически как угодно, но есть некоторые ограничения для её имени (смотрите <a class="external" target="_blank">в правилах именования переменных</a>). Если вы не уверены, вы можете <a class="external" target="_blank">проверить имя вашей переменной</a>, чтобы увидеть корректно ли оно.</p>\n</div>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> JavaScript чувствителен к регистру — <code>myVariable</code> отличается от переменной <code>myvariable</code>. Если у вас возникают проблемы в вашем коде, проверьте регистр!</p>\n</div>\n<blockquote>\n  <p>**Примечание:**Для получения более подробной информации о разнице между var и let, смотрите: <a>Разница между var и let</a>.</p>\n</blockquote>\n<p>После объявления переменной вы можете присвоить ей значение:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">myVariable = "Bob";\n</pre></div>\n<p>Вы можете сделать обе эти операции на одной и той же строке, если вы захотите:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myVariable = "Bob";\n</pre></div>\n<p>Вы можете получить значение, просто вызвав переменную по имени:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">myVariable;\n</pre></div>\n<p>После установки значения переменной вы можете изменить его позже:</p>\n<pre compile="false" disable="true" language="markup">var myVariable = \'Bob\';\nmyVariable = \'Steve\';\n</pre>\n<p>Обратите внимание, что переменные имеют разные <a>типы данных</a>:</p>\n\n<p>Так для чего нам нужны переменные? Что ж, переменные должны были сделать что-нибудь интересное в программировании. Если значения не могли бы изменяться, то вы не могли бы ничего сделать динамическим, например, персонализировать приветственное сообщение или сменить изображение, отображаемое в галерее изображений.</p></div></section><section aria-labelledby="комментарии"><h3 id="комментарии"><a>Комментарии</a></h3><div class="section-content"><p>Комментарии - это, по сути, короткие фрагменты текста, которые могут быть добавлены в код, и которые игнорируются браузером. Вы можете поместить комментарии в JavaScript-код, так же как вы делали это в CSS:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">/*\nВсё, что находится тут - комментарий.\n*/\n</pre></div>\n<p>Если ваш комментарий не содержит переноса строк, то зачастую легче поставить две косые черты, как тут:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">// Это комментарий\n</pre></div></div></section><section aria-labelledby="операторы"><h3 id="операторы"><a>Операторы</a></h3><div class="section-content"><p><a class="only-in-en-us" title="Currently only available in English (US)">operator <small>(en-US)</small></a> — это математический символ, который производит результат, основанный на двух значениях (или переменных). В приведённой ниже таблице вы можете увидеть некоторые из наиболее простых операторов, наряду с некоторыми примерами, которые опробуете в JavaScript консоли.</p>\n\n<p>Существует намного больше операторов для изучения, но этих пока хватит. Смотрите их полный список в разделе <a>выражения и операторы</a>.</p>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Смешивание типов данных может привести к некоторым неожиданным результатам при выполнении вычислений, поэтому будьте осторожны, правильно ссылайтесь на ваши переменные, чтобы получать ожидаемые результаты. Например, введите <code>"35" + "25"</code> в вашу консоль. Почему вы не получили результат, который вы ожидали? Потому, что кавычки превратили числа в строки, так что у вас в итоге получилась конкатенация строк, а не сложение чисел. Если вы введёте, <code>35 + 25</code>, то получите правильный результат.</p>\n</div></div></section><section aria-labelledby="условия"><h3 id="условия"><a>Условия</a></h3><div class="section-content"><p>Условия — это конструкции в коде, которые позволяют проверить истинность или ложность выражения и выполнить другой код в зависимости от полученного результата. Самая распространённая форма условия — инструкция <code>if ... else</code>. Например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var iceCream = "chocolate";\nif (iceCream === "chocolate") {\n  alert("Yay, I love chocolate ice cream!");\n} else {\n  alert("Awwww, but chocolate is my favorite...");\n}\n</pre></div>\n<p>Выражение внутри <code>if ( ... )</code> — это проверка, которая использует тождественный оператор (как описано выше), чтобы сравнить переменную <code>iceCream</code> со строкой <code>chocolate</code> и увидеть равны ли они. Если это сравнение возвращает <code>true</code>, выполнится первый блок кода. Если нет, этот код пропустится и выполнится второй блок кода, после инструкции <code>else</code>.</p></div></section><section aria-labelledby="функции"><h3 id="функции"><a>Функции</a></h3><div class="section-content"><p><a>Функции</a> - способ упаковки функциональности, которую вы хотите использовать повторно. Всякий раз, когда вам нужна определённая процедура, вы можете просто вызвать функцию по её имени, а не переписывать весь код каждый раз. Вы уже видели некоторые функции, описанные выше, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myVariable = document.querySelector("h1");\n</pre></div>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">alert("hello!");\n</pre></div>\n<p>Эти функции, <code>document.querySelector</code> и <code>alert</code>, встроены в браузер для того, чтобы вы использовали их всякий раз, когда вам это необходимо.</p>\n<p>Если вы видите что-то, что выглядит как имя переменной, но имеет после него скобки — <code>()</code>, скорее всего, это функция. Функции часто принимают <a>аргументы</a> — биты данных, которые им необходимы для выполнения своей работы. Они находятся в скобках, и разделяются запятыми, если присутствует более одного аргумента.</p>\n<p>Например, функция <code>alert()</code> вызывает всплывающий блок, появляющийся в окне браузера, но мы должны дать ему строку в качестве аргумента, чтобы сказать функции, что писать во всплывающем блоке.</p>\n<p>Хорошая новость заключается в том, что вы можете определить свои собственные функции — в следующем примере мы напишем простую функцию, которая принимает два числа в качестве аргументов и умножает их:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">function multiply(num1, num2) {\n  var result = num1 * num2;\n  return result;\n}\n</pre></div>\n<p>Попробуйте запустить вышеупомянутую функцию в консоли, затем попробуйте изменить аргументы, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">multiply(4, 7);\nmultiply(20, 20);\nmultiply(0.5, 3);\n</pre></div>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> Инструкция <a><code>return</code></a> сообщает браузеру, что нужно вернуть переменную <code>result</code> из функции, которую можно будет использовать. Это необходимо потому, что переменные, определённые внутри функций, доступны только внутри этих функций. Это называется <a class="only-in-en-us" title="Currently only available in English (US)">областью видимости <small>(en-US)</small></a> переменной. (Читайте <a>больше об области видимости переменных</a>.)</p>\n</div></div></section><section aria-labelledby="события"><h3 id="события"><a>События</a></h3><div class="section-content"><p>Для создания действительной интерактивности на веб-сайте вам необходимы события. События — это структура, которая следит за тем, что происходит в браузере, а затем позволяет вам запускать код в ответ на это. Наиболее очевидным является <a class="only-in-en-us" title="Currently only available in English (US)">событие клика <small>(en-US)<small></small></small></a>, которое вызывается браузером, когда мы щёлкаем по чему-то мышью. Для демонстрации этого события введите следующую команду в вашу консоль, а затем щёлкните по текущей веб-странице:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">document.querySelector("html").onclick = function () {\n  alert("Ouch! Stop poking me!");\n};\n</pre></div>\n<p>Существуют множество способов прикрепить событие к элементу. Здесь мы выбираем <a><code>&lt;html&gt;</code></a> элемент и устанавливаем ему обработчик свойства <a class="only-in-en-us" title="Currently only available in English (US)"><code>onclick</code> <small>(en-US)<small></small></small></a> анонимной функцией (т.е. безымянной) которая содержит код, который мы хотим запустить для события клика.</p>\n<p>Обратите внимание, что</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">document.querySelector("html").onclick = function () {};\n</pre></div>\n<p>эквивалентно</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myHTML = document.querySelector("html");\nmyHTML.onclick = function () {};\n</pre></div>\n<p>Просто так короче.</p></div></section><section aria-labelledby="прокачаем_пример_нашего_веб-сайта"><h2 id="прокачаем_пример_нашего_веб-сайта"><a>Прокачаем пример нашего веб-сайта</a></h2><div class="section-content"><p>Теперь, когда мы прошли некоторые основы JavaScript, давайте добавим несколько крутых несложных функций в пример нашего сайта, чтобы дать вам некоторое представление о принципах работы.</p></div></section><section aria-labelledby="добавление_смены_изображения"><h3 id="добавление_смены_изображения"><a>Добавление смены изображения</a></h3><div class="section-content"><p>В этом разделе мы добавим ещё одно изображение на наш сайт и добавим некоторый простой JavaScript для переключения между двумя изображениями, когда по ним щёлкнули.</p>\n<ol>\n  <li>В первую очередь найдите другое изображение, которые вы хотели бы показать на вашем сайте. Убедитесь что оно такого же размера, как ваше первое изображение или максимально близкое к нему.</li>\n  <li>Сохраните изображение в вашу папку <code>images</code>.</li>\n  <li>Переименуйте это изображение в \'firefox2.png\' (без кавычек).</li>\n  <li>Перейдите в ваш файл <code>main.js</code> и введите следующий JavaScript. (Если ваш "hello world" JavaScript по-прежнему существует, удалите его.)\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myImage = document.querySelector("img");\n\nmyImage.onclick = function () {\n  var mySrc = myImage.getAttribute("src");\n  if (mySrc === "images/firefox-icon.png") {\n    myImage.setAttribute("src", "images/firefox2.png");\n  } else {\n    myImage.setAttribute("src", "images/firefox-icon.png");\n  }\n};\n</pre></div>\n  </li>\n  <li>Сохраните все файлы и загрузите <code>index.html</code> в браузере. Теперь, когда вы щёлкните по изображению, оно должно измениться на другое!</li>\n</ol>\n<p>Итак, мы сохраняем ссылку на наш элемент <a><code>&lt;img&gt;</code></a> в переменной <code>myImage</code>. Далее, мы создаём этой переменной обработчик события <code>onclick</code> с анонимной функцией. Теперь, каждый раз, когда на этот элемент изображения щёлкнут:</p>\n<ol>\n  <li>Мы получаем значение из атрибута <code>src</code> изображения.</li>\n  <li>Мы используем условие для проверки значения <code>src,</code> равен ли путь к исходному изображению:\n    <ol>\n      <li>Если это так, мы меняем значение <code>src</code> на путь ко 2-му изображению, заставляя другое изображение загружаться внутри элемента <a><code>&lt;image&gt;</code></a>.</li>\n      <li>Если это не так (значит, оно должно было уже измениться), мы меняем значение <code>src</code>, возвращаясь к первоначальному пути изображения, каким он был изначально.</li>\n    </ol>\n  </li>\n</ol></div></section><section aria-labelledby="добавление_персонального_приветственного_сообщения"><h3 id="добавление_персонального_приветственного_сообщения"><a>Добавление персонального приветственного сообщения</a></h3><div class="section-content"><p>Далее мы добавим немного другого кода, чтобы изменить заголовок страницы на персонализированное приветственное сообщение, когда пользователь впервые зайдёт на сайт. Это приветственное сообщение будет сохраняться, когда пользователь покинет сайт, а позже вернётся - мы сохраним его с помощью <a>Web Storage API</a>. Мы также включим возможность изменить пользователя и, следовательно, приветственное сообщение, в любое время, когда это будет необходимо.</p>\n<ol>\n  <li>В <code>index.html</code>, добавьте следующую строку перед элементом <a><code>&lt;script&gt;</code></a>:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><button>Change user</button>\n</pre></div>\n  </li>\n  <li>В <code>main.js</code>, добавьте следующий код в конец файла, точно так, как написано - он захватит ссылки на новую кнопку и заголовок, и сохранит их в переменные:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">var myButton = document.querySelector("button");\nvar myHeading = document.querySelector("h1");\n</pre></div>\n  </li>\n  <li>Теперь добавьте следующую функцию для установки персонализированного приветствия - она ничего не будет делать, но мы будем использовать её позже:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">function setUserName() {\n  var myName = prompt("Please enter your name.");\n  localStorage.setItem("name", myName);\n  myHeading.textContent = "Mozilla is cool, " + myName;\n}\n</pre></div>Эта функция содержит функцию <a class="only-in-en-us" title="Currently only available in English (US)"><code>prompt()</code> <small>(en-US)<small></small></small></a>, которая вызывает диалоговое окно, немного похожее на <code>alert()</code> кроме того, что <code>prompt()</code> просит пользователя ввести некоторые данные, и сохраняет эти данные в переменной, после того как пользователь нажимает <strong>OK</strong>. В данном случае, мы просим пользователя ввести его имя. Далее, мы вызываем API под названием <code>localStorage</code>, который позволяет нам хранить данные в браузере и извлекать их позднее. Мы используем функцию <code>setItem()</code> из localStorage для создания и хранения данных в свойстве под названием <code>\'name\'</code>, и устанавливаем это значение в переменную <code>myName</code>, которая содержит имя введённое пользователем. В конце мы устанавливаем <code>textContent</code> заголовку в виде строки и имени пользователя.\n  </li>\n  <li>Затем добавьте блок <code>if ... else</code> - мы могли бы назвать это кодом инициализации, поскольку он структурирует приложение при его первой загрузке:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">if (!localStorage.getItem("name")) {\n  setUserName();\n} else {\n  var storedName = localStorage.getItem("name");\n  myHeading.textContent = "Mozilla is cool, " + storedName;\n}\n</pre></div>Этот блок сначала использует оператор отрицания (логическое НЕ, представленное в виде !) чтобы проверить, существуют ли данные в пункте <code>name</code>. Если нет, то функция <code>setUserName()</code> запускается для их создания. Если данные существуют (то есть, пользователь установил его во время предыдущего посещения), мы извлекаем сохранённое имя, с помощью <code>getItem()</code> и устанавливаем <code>textContent</code> заголовку в виде строки плюс имя пользователя, так же, как мы делали внутри <code>setUserName()</code>.\n  </li>\n  <li>Наконец, установите обработчик события <code>onclick</code> на кнопку. При нажатии кнопки запускается функция <code>setUserName()</code>. Это позволяет пользователю установить новое имя, всякий раз, когда он захочет, нажатием кнопки:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="js">myButton.onclick = function () {\n  setUserName();\n};\n</pre></div>\n  </li>\n</ol>\n<p>Теперь, когда вы впервые заходите на сайт, он попросит вас указать имя пользователя, а затем предоставит вам персональное сообщение. Вы можете изменить имя в любое время, нажав на кнопку. В качестве дополнительного бонуса, поскольку имя хранится внутри localStorage, оно сохраняется после закрытия сайта, сохраняя при этом персонализированное сообщение при следующем открытии сайта!</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Если вы следовали всем инструкциям в этой статье, в конечном итоге вы должны получить страницу, которая выглядит примерно так (вы также можете <a class="external" target="_blank">посмотреть нашу версию здесь</a>):</p>\n<p>\n  \n</p>\n<p>Если вы застряли, вы всегда можете сравнить свою работу с нашим <a class="external" target="_blank">готовым примером кода на Github</a>.</p>\n<p>Здесь мы узнали только самую поверхность JavaScript. Если вам понравился этот язык и вы хотите изучить его поглубже, перейдите к нашему разделу <a>изучение JavaScript</a>.</p></div></section>',
		works: [
			{
				answer: '5',
				code: 'console.log(5)',
				explain: 'fdsf',
				language: 'javascript',
				question: 'Что выведет?',
				type: BookTypeWork.CODE,
			},
		],
	},
	{
		book: 'JS',
		title: 'Первые шаги в JavaScript',

		content:
			'<header><h1>Первые шаги в JavaScript</h1></header><div class="section-content"><p>В нашем первом модуле, прежде чем перейти к практике написания кода на языке JavaScript, сначала мы дадим ответы на некоторые фундаментальные вопросы, а именно: "Что же такое JavaScript?", "Что он из себя представляет?" и "Что он может делать?". После этого мы внимательно рассмотрим некоторые из ключевых элементов, такие как переменные, строки, числа и массивы.</p></div><section aria-labelledby="предисловие"><h2 id="предисловие"><a>Предисловие</a></h2><div class="section-content"><p>Вам не нужно иметь никаких предварительных знаний JavaScript чтобы приступить к этому модулю, но у вас должно быть некоторое представление о HTML и CSS. Рекомендуем ознакомиться со следующими материалами, прежде чем начинать знакомство с JavaScript:</p>\n<ul>\n  <li><a>Начало работы с Web</a> (которое включает в себя общее <a>введение в Javascript</a>)</li>\n  <li><a>Введение в HTML</a></li>\n  <li><a>Введение в CSS</a></li>\n</ul>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете на компьютере, планшете или другом устройстве, где нет возможности полноценно работать с файлами, можете использовать такие онлайн сервисы как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>, для запуска примеров кода.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><dl>\n  <dt id="что_такое_javascript"><a>Что такое JavaScript?</a></dt>\n  <dd>\n    <p>Добро пожаловать на курс начинающего JavaScript разработчика от MDN! В первой статье мы рассмотрим JavaScript в общем приближении и постараемся ответить на вопросы "Что такое JavaScript?" и "Для чего он предназначен?", и закрепим верное понимание его назначения.</p>\n  </dd>\n  <dt id="первое_погружение_в_javascript"><a>Первое погружение в JavaScript</a></dt>\n  <dd>\n    <p>Теперь, когда вы знаете кое-что о JavaScript, и что он может делать, мы предлагаем вам пройти интенсивный практический урок по базовой функциональности JavaScript. Здесь вы, шаг за шагом, создадите простую игру "Угадай число".</p>\n  </dd>\n  <dt id="что_пошло_не_так_устранение_ошибок_javascript"><a>Что пошло не так? Устранение ошибок JavaScript</a></dt>\n  <dd>\n    <p>В процессе создания игры "Угадай число" из предыдущего урока, вы могли заметить что она не работала. Не стоит унывать - данная статья научит вас беречь собственные нервы, а так же, даст несколько советов о том как решать такие проблемы, искать и исправлять неполадки в JavaScript-коде.</p>\n  </dd>\n  <dt id="хранение_нужной_вам_информации_-_переменные"><a>Хранение нужной вам информации - Переменные</a></dt>\n  <dd>\n    <p>После прочтения предыдущих статей вы должны знать что из себя представляет JavaScript, что он может, как взаимодействует с другими web технологиями, и каковы его основные особенности в общем приближении. В этой статье спустимся к самым основам языка и поработаем с <strong>Переменными</strong>.</p>\n  </dd>\n  <dt id="базовая_математика_в_javascript_—_числа_и_операторы"><a>Базовая математика в JavaScript — числа и операторы</a></dt>\n  <dd>\n    <p>Здесь мы обсуждаем математику в JavaScript - каким образом мы можем манипулировать числами и операторами для работы с ними.</p>\n  </dd>\n  <dt id="работа_с_текстом_—_строки_в_javascript"><a>Работа с текстом — строки в JavaScript</a></dt>\n  <dd>\n    <p>Теперь мы обратим своё внимание на строки - так называются кусочки текста в программировании. В этой статье мы рассмотрим то что действительно необходимо знать про строки в JavaScript: как создать строку, делать escape (экранирование) символов с помощью кавычек, и объединять их.</p>\n  </dd>\n  <dt id="полезные_строковые_методы"><a>Полезные строковые методы</a></dt>\n  <dd>\n    <p>После того как мы рассмотрели основы работы со строками, давайте двинемся дальше и поговорим о том какие полезные операторы и методы существуют для строк, такие как вычисление длины, соединение и разделение строк, замена отдельных символов и многие другие.</p>\n  </dd>\n  <dt id="массивы"><a>Массивы</a></dt>\n  <dd>\n    <p>В последней статье этого модуля мы рассмотрим массивы - изящный способ хранения различных наборов информации в имени всего одной переменной. Здесь мы поговорим о том почему это может быть полезным, рассмотрим как создать массив, получить, добавить или удалить элемент массива, и прочее.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="проверка_полученных_знаний"><h2 id="проверка_полученных_знаний"><a>Проверка полученных знаний</a></h2><div class="section-content"><p>Предложенное тестовое задание проверит ваше понимание основ JavaScript, которые вы получили пройдя предложенные выше уроки.</p>\n<dl>\n  <dt id="генератор_глупых_историй"><a>Генератор глупых историй</a></dt>\n  <dd>\n    <p>Вашим заданием будет применить на практике полученные знания и создать развлекательное приложение которое будет генерировать случайные нелепые истории.</p>\n  </dd>\n</dl></div></section>',
		works: [
			{
				answer: '123',
				type: BookTypeWork.CODE,
				question: 'Что выведет этот код?',
				code: 'console.log(123)',
				explain:
					'У объекта console есть метод log, который вывод информацию в консоль браузера',
				language: 'javascript',
			},
		],
	},
	{
		book: 'JS',
		title: 'Структурные элементы JavaScript',

		content:
			'<header><h1>Структурные элементы JavaScript</h1></header><div class="section-content"><p>В данном разделе мы продолжим знакомство с ключевыми основами JavaScript, обратим внимание на часто используемые приёмы программирования, такие как условные выражения, циклы, функции и события. Все они уже встречались вам ранее в данном курсе, но только поверхностно, далее они будут рассмотрены подробнее.</p></div><section aria-labelledby="предварительное_условие"><h2 id="предварительное_условие"><a>Предварительное условие</a></h2><div class="section-content"><p>До начала изучения следующего раздела вам нужно тщательно ознакомиться с основами <a>HTML</a> и <a>CSS</a>, так же обязательно прочтите курс "<a>Первые шаги в JavaScript</a>".</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> если устройство на котором вы изучаете данный курс не позволяет создавать/сохранять файлы, в большинстве случаев примеры кода могут быть запущены в таких онлайн приложениях как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><dl>\n  <dt id="принятие_решений_в_вашем_коде_—_условные_конструкции"><a>Принятие решений в вашем коде — условные конструкции</a></dt>\n  <dd>\n    <p>В любом языке программирования необходимо принимать решения и совершать действия в зависимости от полученных в процессе исполнения программы или введённых пользователем данных. Например, игра должна завершиться, когда число жизней персонажа игрока достигает нуля. В приложении для прогноза погоды отображается картинка с восходящим солнцем, если смотреть утром, со звёздами и луной — ночью. В данной статье исследуется работа условных конструкций в JavaScript.</p>\n  </dd>\n  <dt id="зацикливание_кода"><a>Зацикливание кода</a></dt>\n  <dd>\n    <p>Иногда требуется, чтобы действие исполнялось несколько раз подряд. Например, при просмотре списка имён. В программировании для данной цели успешно применяются циклы. Здесь мы познакомимся с использованием циклов в JavaScript.</p>\n  </dd>\n  <dt id="функции_—_блоки_кода_используемые_многократно"><a>Функции — блоки кода используемые многократно</a></dt>\n  <dd>\n    <p>Другая необходимая концепция в программировании это <strong>функции</strong>. <strong>Функции</strong> позволяют сохранить часть кода для решения определённой задачи в определённом блоке, и затем вызывать этот код, тогда, когда это тебе необходимо при помощи короткой команды — это намного лучше, чем писать один и тот же код несколько раз. В статье будут рассмотрена фундаментальная концепция функции: основной синтаксис, как вызывать и как определять функции, области видимости и параметры.</p>\n  </dd>\n  <dt id="создай_свою_функцию"><a>Создай свою функцию</a></dt>\n  <dd>\n    <p>В отличие от большинства предыдущих статей, рассматривающих только теорию, эта статья даёт практический опыт. Здесь вы получите практику создания собственных функций. На ряду с возможностями, мы также объясним дополнительные полезные подробности, связанные с функциями.</p>\n  </dd>\n  <dt id="функции_возвращают_значения"><a>Функции возвращают значения</a></dt>\n  <dd>\n    <p>Есть одно из существенных понятий для нас, представленное в этом курсе, которое достойно пристального внимания — возврат значений функции. Некоторые функции не возвращают значений после завершения, но другие делают это. Главное понять, что это за значения, как использовать их в вашем коде, и как заставить Вашу собственную функцию возвратить необходимые значения.</p>\n  </dd>\n  <dt id="введение_в_события"><a>Введение в события</a></dt>\n  <dd>\n    <p>События — это действия или явления, которые происходят в системе во время программирования, о которых система сообщает, и, при желании, на которые можно ответить. Например, когда пользователь кликает на кнопку на странице, возможно вы захотите вывести на экран блок с информацией, как ответ на это событие. В последней статье мы обсудим важные концепции, связанные с событиями, и увидим, как они работают в браузерах.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="проверка_знаний"><h2 id="проверка_знаний"><a>Проверка знаний</a></h2><div class="section-content"><p>Следующая оценка проверит ваше понимание основ JavaScript, описанных в данном руководстве.</p>\n<dl>\n  <dt id="фотогалерея"><a>Фотогалерея</a></dt>\n  <dd>\n    <p>Теперь, когда мы рассмотрели основные блоки JavaScript, мы проверим твои знания о циклах, функциях, регулярных выражениях и событиях, создав довольно общий элемент, который вы увидите на многих сайтах - галерея изображений, работающей с помощью JavaScript.</p>\n  </dd>\n</dl></div></section>',
		works: [],
	},
	{
		book: 'JS',
		title: 'Введение в объекты JavaScript',

		content:
			'<header><h1>Введение в объекты JavaScript</h1></header><div class="section-content"><p>В JavaScript большинство сущностей являются объектами, начиная с самой основной функциональности JavaScript, такой как строки (strings) и массивы (array), и заканчивая встроенными в браузер API. Вы можете даже создавать свои собственные объекты, чтобы инкапсулировать связанные между собой функции и переменные в эффективные пакеты и действовать как удобные хранилища данных. Понимание объектно-ориентированной природы JavaScript очень важно, если вы хотите продолжить дальнейшее более углублённое изучение языка. Поэтому мы предоставляем вам данный модуль, чтобы помочь вам разобраться в этом. Здесь мы детально обучим вас теории и синтаксису объектов, а затем рассмотрим, как создавать свои собственные объекты.</p></div><section aria-labelledby="необходимые_знания"><h2 id="необходимые_знания"><a>Необходимые знания</a></h2><div class="section-content"><p>Перед тем, как начать изучение данного модуля, Вы должны иметь некоторое представление о HTML и CSS. Мы советуем вам поработать над разделами <a>Введение в HTML</a> и <a>Введение в CSS</a> перед изучением этого модуля JavaScript.</p>\n<p>Также вам необходимо знать основы JavaScript перед подробным изучением объектов JavaScript. Предварительно поработайте с разделами <a>Первые шаги в JavaScript</a> и <a>Структурные элементы в JavaScript</a> перед началом изучения данного модуля.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете за компьютером/планшетом/другим устройством, на котором у вас нет возможности создавать собственные файлы, постарайтесь поработать с примерами кода на платформах онлайн-программирования, таких, как <a class="external" target="_blank">JSBin</a> or <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><dl>\n  <dt id="основы_объектов"><a>Основы объектов</a></dt>\n  <dd>\n    <p>В первой статье мы рассмотрим объекты в JavaScript. Мы будем разбирать основы синтаксиса объектов JavaScript и заново изучим некоторые возможности JavaScript, которые мы уже исследовали ранее на курсе, подтвердив тот факт, что большая часть функциональности, с которой мы уже столкнулись, в действительности является объектами.</p>\n  </dd>\n  <dt id="объектно-ориентированный_javascript_для_начинающих"><a class="only-in-en-us" title="Currently only available in English (US)">Объектно-ориентированный JavaScript для начинающих <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Закончив с основами, мы сфокусируемся на объектно-ориентированном JavaScript (OOJS) — эта статья представляет основы теории объектно-ориентированного программирования (ООП). Затем мы изучим, как JavaScript эмулирует классы объектов через конструктор функций, и как создавать экземпляры объектов.</p>\n  </dd>\n  <dt id="прототипы_объектов"><a>Прототипы объектов</a></dt>\n  <dd>\n    <p>Прототипы - это механизм, благодаря которому объекты в JavaScript наследуют функциональность друг друга, но при этом они работают иначе по сравнению с механизмами наследования в классических объектно-ориентированных языках. В этой статье мы изучим эти отличия, объясним, как работает цепочка прототипов, и рассмотрим, как свойство прототипа может быть использовано для добавления методов к существующим конструкторам.</p>\n  </dd>\n  <dt id="наследование_в_javascript"><a>Наследование в JavaScript</a></dt>\n  <dd>\n    <p>После знакомства с самыми жуткими подробностями OOJS, эта статья покажет, как создавать "дочерние" классы объектов (конструкторы), которые наследуют функциональность от своих "родительских" классов. В дополнении, мы дадим вам пару советов о том, где и когда можно использовать OOJS.</p>\n  </dd>\n  <dt id="работа_с_json-данными"><a>Работа с JSON-данными</a></dt>\n  <dd>\n    <p>Представление объектов в JavaScript (JavaScript Object Notation) (JSON) - это стандартный формат для представления структурированных данных в виде объектов JavaScript, который обычно используется для представления и передачи данных на веб-сайтах (т.е. передача некоторых данных от сервера к клиенту - таким образом они могут быть отображены на веб-странице). Вы довольно часто будете с этим сталкиваться, поэтому в данной статье мы предоставим вам все, что необходимо для работы с JSON с помощью JavaScript, в том числе доступ к элементам данных в объекте JSON и написания собственного JSON-кода.</p>\n  </dd>\n  <dt id="практика_построения_объектов"><a>Практика построения объектов</a></dt>\n  <dd>\n    <p>В предыдущих статьях мы рассматривали самые основные моменты в теории и синтаксисе объектов в JavaScript, дав вам твёрдую основу для начала. В этой статье мы погрузимся в практические занятия, получим больше практической работы в построении собственных объектов в JavaScript, чтобы сделать кое-что весёлое и красочное - несколько цветных прыгающих шариков.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="задания"><h2 id="задания"><a>Задания</a></h2><div class="section-content"><dl>\n  <dt id="добавление_функциональности_к_демо_с_прыгающими_шариками"><a>Добавление функциональности к демо с прыгающими шариками</a></dt>\n  <dd>\n    <p>В этом задании, мы ожидаем, что вы, используя демо с прыгающими шариками из предыдущей статьи как отправную точку, добавите немного новой и интересной функциональности в него.</p>\n  </dd>\n</dl></div></section>',
		works: [],
	},
	{
		book: 'JS',
		title: 'Понимание JavaScript-фреймворков для фронтенда',

		content:
			'<header><h1>Понимание JavaScript-фреймворков для фронтенда</h1></header><div class="section-content"><p>\n  </p>\n  JavaScript-фреймворки являются неотъемлемой частью современной веб-разработки,предоставляя разработчикам проверенные и протестированные инструменты для создания масштабируемых и интерактивных веб-приложений. Многие современные компании используют фреймворки для своих решений, поэтому многие задачи связанные с разработкой клиентской части веб-приложений теперь требуют опыта работы с ними.\n<p></p>\n<p>Начинающему разработчику веб-интерфейсов может быть трудно понять с чего начать изучение фреймворков — их выбор разнообразен, а новые появляются постоянно. В основном же они работают аналогичным образом, но делают некоторые вещи по-разному, также есть некоторые специфичные вещи, которые следует соблюдать при использовании фреймворков.</p>\n<p>Этим набором статей мы постараемся дать вам удобную отправную точку, чтобы помочь вам начать изучать основы. Мы не стремимся научить вас всему, что вам нужно знать о React/ReactDOM, Vue или каком-то другом конкретном фреймворке. Документация этих фреймворков отлично выполняют эту работу. Вместо этого мы хотим сделать шаг назад и сначала ответить на более фундаментальные вопросы, такие как:</p>\n<ul>\n  <li>Почему я должен использовать фреймворк? Какие проблемы он решит?</li>\n  <li>\n    Какие вопросы я должен задать себе при выборе определённого фреймворка?\n    Нужен ли мне какой-либо из них вовсе?\n  </li>\n  <li>Какими возможностями обладают фреймворки? Как они работают в целом и в чём отличия их имплементаций этих возможностей?</li>\n  <li>Как они связаны с "ванильным" JavaScript, или HTML?</li>\n</ul>\n<p>После этого мы предоставим некоторые учебные пособия, охватывающие основы некоторых фреймворков, чтобы предоставить вам достаточно контекста, чтобы вы могли начать углубляться в этой теме. Мы хотим, чтобы вы изучали фреймворки прагматично, не забывая о фундаментальных практиках веб-разработки, таких как, например, доступность.</p>\n<p><strong><a class="only-in-en-us" title="Currently only available in English (US)">Начните прямо сейчас с "Введение в фронтенд фреймворки" <small>(en-US)<small></small></small></a></strong></p></div><section aria-labelledby="prerequisites"><h2 id="prerequisites"><a>Prerequisites</a></h2><div class="section-content"><p>You should really learn the basics of the core web languages first before attempting to move on to learning client-side frameworks — <a>HTML</a>, <a>CSS</a>, and especially <a>JavaScript</a>.</p>\n<p>Your code will be richer and more professional as a result, and you\'ll be able to troubleshoot problems with more confidence if you understand the fundamental web platform features that the frameworks are building on top of.</p></div></section><section aria-labelledby="introductory_guides"><h2 id="introductory_guides"><a>Introductory guides</a></h2><div class="section-content"><dl>\n  <dt id="1._introduction_to_client-side_frameworks"><a class="only-in-en-us" title="Currently only available in English (US)">1. Introduction to client-side frameworks <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>We begin our look at frameworks with a general overview of the area, looking at a brief history of JavaScript and frameworks, why frameworks exist and what they give us, how to start thinking about choosing a framework to learn, and what alternatives there are to client-side frameworks.</p>\n  </dd>\n  <dt id="2._framework_main_features"><a class="only-in-en-us" title="Currently only available in English (US)">2. Framework main features <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Each major JavaScript framework has a different approach to updating the DOM, handling browser events, and providing an enjoyable developer experience. This article will explore the main features of "the big 4" frameworks, looking at how frameworks tend to work from a high level, and the differences between them.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="react_tutorials"><h2 id="react_tutorials"><a>React tutorials</a></h2><div class="section-content"><div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> React tutorials last tested in May 2020, with React/ReactDOM 16.13.1 and create-react-app 3.4.1.</p>\n  <p>If you need to check your code against our version, you can find a finished version of the sample React app code in our <a class="external" target="_blank">todo-react repository</a>. For a running live version, see <a class="external" target="_blank">https://mdn.github.io/todo-react-build/</a>.</p>\n</div>\n<dl>\n  <dt id="1._getting_started_with_react"><a>1. Getting started with React</a></dt>\n  <dd>\n    <p>In this article we will say hello to React. We\'ll discover a little bit of detail about its background and use cases, set up a basic React toolchain on our local computer, and create and play with a simple starter app, learning a bit about how React works in the process.</p>\n  </dd>\n  <dt id="2._beginning_our_react_todo_list"><a class="only-in-en-us" title="Currently only available in English (US)">2. Beginning our React todo list <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Let\'s say that we\'ve been tasked with creating a proof-of-concept in React – an app that allows users to add, edit, and delete tasks they want to work on, and also mark tasks as complete without deleting them. This article will walk you through putting the basic <code>App</code> component structure and styling in place, ready for individual component definition and interactivity, which we\'ll add later.</p>\n  </dd>\n  <dt id="3._componentizing_our_react_app"><a class="only-in-en-us" title="Currently only available in English (US)">3. Componentizing our React app <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>At this point, our app is a monolith. Before we can make it do things, we need to break it apart into manageable, descriptive components. React doesn\'t have any hard rules for what is and isn\'t a component – that\'s up to you! In this article we will show you a sensible way to break our app up into components.</p>\n  </dd>\n  <dt id="4._react_interactivity_events_and_state"><a class="only-in-en-us" title="Currently only available in English (US)">4. React interactivity: Events and state <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>With our component plan worked out, it\'s now time to start updating our app from a completely static UI to one that actually allows us to interact and change things. In this article we\'ll do this, digging into events and state along the way.</p>\n  </dd>\n  <dt id="5._react_interactivity_editing_filtering_conditional_rendering"><a class="only-in-en-us" title="Currently only available in English (US)">5. React interactivity: Editing, filtering, conditional rendering <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>As we near the end of our React journey (for now at least), we\'ll add the finishing touches to the main areas of functionality in our Todo list app. This includes allowing you to edit existing tasks, and filtering the list of tasks between all, completed, and incomplete tasks. We\'ll look at conditional UI rendering along the way.</p>\n  </dd>\n  <dt id="6._accessibility_in_react"><a class="only-in-en-us" title="Currently only available in English (US)">6. Accessibility in React <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>In our final tutorial article, we\'ll focus on (pun intended) accessibility, including focus management in React, which can improve usability and reduce confusion for both keyboard-only and screenreader users.</p>\n  </dd>\n  <dt id="7._react_resources"><a class="only-in-en-us" title="Currently only available in English (US)">7. React resources <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Our final article provides you with a list of React resources that you can use to go further in your learning.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="ember_tutorials"><h2 id="ember_tutorials"><a>Ember tutorials</a></h2><div class="section-content"><div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Ember tutorials last tested in May 2020, with Ember/Ember CLI version 3.18.0.</p>\n  <p>If you need to check your code against our version, you can find a finished version of the sample Ember app code in the <a class="external" target="_blank">ember-todomvc-tutorial repository</a>. For a running live version, see <a class="external" target="_blank">https://nullvoxpopuli.github.io/ember-todomvc-tutorial/</a> (this also includes a few additional features not covered in the tutorial).</p>\n</div>\n<dl>\n  <dt id="1._getting_started_with_ember"><a class="only-in-en-us" title="Currently only available in English (US)">1. Getting started with Ember <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>In our first Ember article we will look at how Ember works and what it\'s useful for, install the Ember toolchain locally, create a sample app, and then do some initial setup to get it ready for development.</p>\n  </dd>\n  <dt id="2._ember_app_structure_and_componentization"><a class="only-in-en-us" title="Currently only available in English (US)">2. Ember app structure and componentization <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>In this article we\'ll get right on with planning out the structure of our TodoMVC Ember app, adding in the HTML for it, and then breaking that HTML structure into components.</p>\n  </dd>\n  <dt id="3._ember_interactivity_events_classes_and_state"><a class="only-in-en-us" title="Currently only available in English (US)">3. Ember interactivity: Events, classes and state <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>At this point we\'ll start adding some interactivity to our app, providing the ability to add and display new todo items. Along the way, we\'ll look at using events in Ember, creating component classes to contain JavaScript code to control interactive features, and setting up a service to keep track of the data state of our app.</p>\n  </dd>\n  <dt id="4._ember_interactivity_footer_functionality_conditional_rendering"><a class="only-in-en-us" title="Currently only available in English (US)">4. Ember Interactivity: Footer functionality, conditional rendering <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Now it\'s time to start tackling the footer functionality in our app. Here we\'ll get the todo counter to update to show the correct number of todos still to complete, and correctly apply styling to completed todos (i.e. where the checkbox has been checked). We\'ll also wire up our "Clear completed" button. Along the way, we\'ll learn about using conditional rendering in our templates.</p>\n  </dd>\n  <dt id="5._routing_in_ember"><a class="only-in-en-us" title="Currently only available in English (US)">5. Routing in Ember <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>In this article we learn about routing, or URL-based filtering as it is sometimes referred to. We\'ll use it to provide a unique URL for each of the three todo views — "All", "Active", and "Completed".</p>\n  </dd>\n  <dt id="6._ember_resources_and_troubleshooting"><a class="only-in-en-us" title="Currently only available in English (US)">6. Ember resources and troubleshooting <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Our final Ember article provides you with a list of resources that you can use to go further in your learning, plus some useful troubleshooting and other information.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="vue_tutorials"><h2 id="vue_tutorials"><a>Vue tutorials</a></h2><div class="section-content"><div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Vue tutorials last tested in May 2020, with Vue 2.6.11.</p>\n  <p>If you need to check your code against our version, you can find a finished version of the sample Vue app code in our <a class="external" target="_blank">todo-vue repository</a>. For a running live version, see <a class="external" target="_blank">https://mdn.github.io/todo-vue/dist/</a>.</p>\n</div>\n<dl>\n  <dt id="1._getting_started_with_vue"><a class="only-in-en-us" title="Currently only available in English (US)">1. Getting started with Vue <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Now let\'s introduce Vue, the third of our frameworks. In this article we\'ll look at a little bit of Vue background, learn how to install it and create a new project, study the high-level structure of the whole project and an individual component, see how to run the project locally, and get it prepared to start building our example.</p>\n  </dd>\n  <dt id="2._creating_our_first_vue_component"><a class="only-in-en-us" title="Currently only available in English (US)">2. Creating our first Vue component <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Now it\'s time to dive deeper into Vue, and create our own custom component — we\'ll start by creating a component to represent each item in the todo list. Along the way, we\'ll learn about a few important concepts such as calling components inside other components, passing data to them via props, and saving data state.</p>\n  </dd>\n  <dt id="3._rendering_a_list_of_vue_components"><a class="only-in-en-us" title="Currently only available in English (US)">3. Rendering a list of Vue components <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>At this point we\'ve got a fully working component; we\'re now ready to add multiple <code>ToDoItem</code> components to our App. In this artcle we\'ll look at adding a set of todo item data to our <code>App.vue</code> component, which we\'ll then loop through and display inside <code>ToDoItem</code> components using the <code>v-for</code> directive.</p>\n  </dd>\n  <dt id="4._adding_a_new_todo_form_vue_events_methods_and_models"><a class="only-in-en-us" title="Currently only available in English (US)">4. Adding a new todo form: Vue events, methods, and models <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>We now have sample data in place, and a loop that takes each bit of data and renders it inside a <code>ToDoItem</code> in our app. What we really need next is the ability to allow our users to enter their own todo items into the app, and for that we\'ll need a text <code>&lt;input&gt;</code>, an event to fire when the data is submitted, a method to fire upon submission to add the data and rerender the list, and a model to control the data. This is what we\'ll cover in this article.</p>\n  </dd>\n  <dt id="5._styling_vue_components_with_css"><a class="only-in-en-us" title="Currently only available in English (US)">5. Styling Vue components with CSS <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>The time has finally come to make our app look a bit nicer. In this article we\'ll explore the different ways of styling Vue components with CSS.</p>\n  </dd>\n  <dt id="6._using_vue_computed_properties"><a class="only-in-en-us" title="Currently only available in English (US)">6. Using Vue computed properties <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>In this article we\'ll add a counter that displays the number of completed todo items, using a feature of Vue called computed properties. These work similarly to methods, but only re-run when one of their dependencies changes.</p>\n  </dd>\n  <dt id="7._vue_conditional_rendering_editing_existing_todos"><a class="only-in-en-us" title="Currently only available in English (US)">7. Vue conditional rendering: editing existing todos <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Now it is time to add one of the major parts of functionality that we\'re still missing — the ability to edit existing todo items. To do this, we will take advantage of Vue\'s conditional rendering capabilities — namely <code>v-if</code> and <code>v-else</code> — to allow us to toggle between the existing todo item view, and an edit view where you can update todo item labels. We\'ll also look at adding functionality to delete todo items.</p>\n  </dd>\n  <dt id="8._focus_management_with_vue_refs"><a class="only-in-en-us" title="Currently only available in English (US)">8. Focus management with Vue refs <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>We are nearly done with Vue. The last bit of functionality to look at is focus management, or put another way, how we can improve our app\'s keyboard accessibility. We\'ll look at using Vue refs to handle this — an advanced feature that allows you to have direct access to the underlying DOM nodes below the virtual DOM, or direct access from one component to the internal DOM structure of a child component.</p>\n  </dd>\n  <dt id="9._vue_resources"><a class="only-in-en-us" title="Currently only available in English (US)">9. Vue resources <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Now we\'ll round off our study of Vue by giving you a list of resources that you can use to go further in your learning, plus some other useful tips.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="which_frameworks_did_we_choose"><h2 id="which_frameworks_did_we_choose"><a>Which frameworks did we choose?</a></h2><div class="section-content"><p>We are publishing our initial set of articles with guides focusing on three of the major frameworks out there — React/ReactDOM, Ember, and Vue. There is a variety of reasons for this:</p>\n<ul>\n  <li>They are popular choices that will be around for a while — like with any software tool, it is good to stick with actively-developed choices that are likely to not be discontinued next week, and which will be desirable additions to your skillset when looking for a job.</li>\n  <li>They have strong communities and good documentation. It is very important to be able to get help with learning a complex subject, especially when you are just starting out.</li>\n  <li>We don\'t have the resources to cover <em>all</em> modern frameworks. That list would be very difficult to keep up-to-date anyway, as new ones appear all the time.</li>\n  <li>As a beginner, trying to choose what to focus on out of the huge number of choices available is a very real problem. Keeping the list short is therefore helpful.</li>\n</ul>\n<p>We want to say this up front — we\'ve <strong>not</strong> chosen the frameworks we are focusing on because we think they are the best, or because we endorse them in any way. We just think they score highly on the above criteria.</p>\n<p>Note that we were hoping to have more frameworks included upon intial publication, but we decided to release the content and then add more framework guides later, rather than delay it longer. If your favourite framework is not represented in this content and you\'d like to help change that, feel free to discuss it with us! Get in touch with us via <a class="external" target="_blank">Matrix</a>, or <a class="external" target="_blank">Discourse</a>, or drop us a mail on the <a>mdn-admins list</a>.</p></div></section>',
		works: [],
	},
	{
		book: 'JS',
		title: 'Клиентский веб API',

		content:
			'<header><h1>Клиентский веб API</h1></header><div class="section-content"><p>При написании клиентского JavaScript для приложений или веб-сайтов вам не приходится слишком сильно углубляться, пока вы не начнёте использовать API — интерфейсы управления различными аспектами браузера или операционной системы на которой этот сайт работает, или же с данными с других веб-сайтов или сервисов. В этом модуле мы рассмотрим что API из себя представляет и как использовать самые распространённые из них, с которыми вы можете столкнуться в разработке.</p></div><section aria-labelledby="прежде_чем_начать"><h2 id="прежде_чем_начать"><a>Прежде чем начать</a></h2><div class="section-content"><p>Убедитесь, что вы прочли и хорошо разбираетесь в следующих модулях (<a>Первые шаги</a>, <a>Структурные элементы</a>, и <a>Введение в объекты</a>). Эти модули включали в себя простое использование API, так как зачастую без них сложно писать примеры клиентского кода JavaScript. В данном модуле мы предполагаем, что вы хорошо знакомы с основами JavaScript, и немного подробнее рассмотрим общие веб-API.</p>\n<p>Естественно знание <a>HTML</a> и <a>CSS</a> здесь также необходимо.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете на устройстве, где у вас нет возможности создавать свои собственные файлы, вы можете проверить большинство примеров кода в онлайн-программах вроде <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><dl>\n  <dt id="введение_в_различные_web_api"><a>Введение в различные web API</a></dt>\n  <dd>\n    <p>Прежде всего, мы начнём изучение API с основ - что это такое, как это работает, как вы используете их в своём коде и как они структурированы? Мы также рассмотрим, что представляют собой различные основные классы API, и как их можно использовать.</p>\n  </dd>\n  <dt id="управление_документами"><a>Управление документами</a></dt>\n  <dd>\n    <p>При написании веб-страниц и приложений вы чаще всего будете управлять каким-либо образом веб-документами. Обычно это делается с помощью Document Object Model (DOM), набора API-интерфейсов для управления HTML-разметкой и стилями, которые используют объект <a><code>Document</code></a>. В этой статье мы рассмотрим, как использовать DOM, а также некоторые интересные API, которые могут изменить рабочую среду интересными способами.</p>\n  </dd>\n  <dt id="получение_данных_с_сервера"><a>Получение данных с сервера</a></dt>\n  <dd>\n    <p>Другой очень распространённой задачей в современных веб-сайтах и приложениях является получение отдельных элементов данных с сервера для обновления разделов веб-страницы без необходимости загрузки абсолютно новой страницы. Эта, казалось бы, небольшая деталь оказала огромное влияние на производительность и поведение сайтов, поэтому в этой статье мы объясним концепцию и рассмотрим технологии, которые позволяют это, например <a><code>XMLHttpRequest</code></a> и <a>Fetch API</a>.</p>\n  </dd>\n  <dt id="сторонние_api"><a>Сторонние API</a></dt>\n  <dd>\n    <p>API, которые мы рассматривали до сих пор, встроены в браузер, но не все API встроены в браузер. Многие крупные веб-сайты и сервисы, такие как Google Maps, Twitter, Facebook, PayPal и т.д. предоставляют API-интерфейсы, позволяющие разработчикам использовать свои данные (например, показывать ваш Twitter-поток в вашем блоге) или сервисы (например, отображение пользовательских карт Google на вашем сайте, или с помощью входа в систему Facebook для входа в систему пользователей). В этой статье рассматривается различие между API браузера и сторонними API и показано типичное использование последнего.</p>\n  </dd>\n  <dt id="рисование_графики"><a class="only-in-en-us" title="Currently only available in English (US)">Рисование графики <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>В браузере содержатся очень мощные инструменты графического программирования, начиная с языка Scalable Vector Graphics (<a>SVG</a>) и заканчивая API для рисования элементов HTML <a><code>&lt;canvas&gt;</code></a> (см. <a>The Canvas API</a> и <a>WebGL</a>). В статье содержится введение в Canvas API и дополнительные ресурсы, чтобы вы могли узнать больше.</p>\n  </dd>\n  <dt id="видео_и_аудио_api"><a class="only-in-en-us" title="Currently only available in English (US)">Видео и аудио API <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>HTML5 поставляется с элементами для размещения мультимедийных материалов в документах - <a><code>&lt;video&gt;</code></a> и <a><code>&lt;audio&gt;</code></a> - которые, в свою очередь, имеют свои собственные API для управления воспроизведением, поиском и т. д. В статье показано, как выполнять общие задачи, такие как создание пользовательских элементов управления воспроизведением.</p>\n  </dd>\n  <dt id="клиентское_хранилище"><a>Клиентское хранилище</a></dt>\n  <dd>\n    <p>Современные веб-браузеры имеют ряд различных технологий, которые позволяют хранить данные, связанные с веб-сайтами, и извлекать их, когда это необходимо, что позволяет вам сохранять данные в долгосрочной перспективе, сохранять сайты в автономном режиме и многое другое. В этой статье объясняются самые основы того, как они работают.</p>\n  </dd>\n</dl></div></section>',
		works: [],
	},
];
