import { BookPart, BookTypeWork } from '@/types/Book';

export const html: BookPart[] = [
	{
		book: 'HTML',
		title: 'Изучение HTML- руководства и уроки',

		content:
			'<header><h1>Изучение HTML: руководства и уроки</h1></header><div class="section-content"><p>Чтобы создавать веб-сайты, вы должны знать о <a>HTML</a> — фундаментальной технологии, которая используется для определения структуры веб-страницы. HTML применяется для того, чтобы определить как должен отображаться ваш контент: в виде абзаца, списка, заголовка, ссылки, изображения, мультимедийного проигрывателя, формы или же в виде одного из множества других доступных элементов, а также возможного нового элемента, который вы сами создадите.</p></div><section aria-labelledby="путь_обучения_образовательная_траектория"><h2 id="путь_обучения_образовательная_траектория"><a>Путь обучения (образовательная траектория)</a></h2><div class="section-content"><p>В идеале вы должны начать своё учебное путешествие с изучения HTML. Начните с прочтения раздела <a>"Введение в HTML"</a>. Затем вы можете перейти к изучению более продвинутых тем, таких как:</p>\n<ul>\n  <li><a>"CSS (Каскадные таблицы стилей)"</a>, и как их использовать для оформления (стилизации) HTML-документа (например, изменение шрифта и его размера, добавление границы и теней для элементов, разбиение страницы на несколько столбцов, добавление анимации и других визуальных эффектов).</li>\n  <li><a>"JavaScript"</a>, и как его использовать для придания динамической функциональности веб-страницам (например, определение вашего местоположения и отображение его на карте, создание элементов, которые будут появляться/исчезать при нажатии на кнопку, сохранение данных пользователей локально на их компьютерах и многое другое).</li>\n</ul>\n<p>Прежде чем приступить к этой теме, вы должны иметь хотя бы базовое представление об использовании компьютеров вообще и уметь "пассивно" использовать Интернет (т.е. уметь просматривать веб-страницы, быть потребителем контента). У вас должна быть базовая рабочая среда, описанная в <a>разделе "Установка базового программного обеспечения"</a>, а также вы должны понимать, как создавать файлы и управлять ими, что подробно описано в <a>разделе "Работа с файлами"</a> — обе статьи являются частью нашего модуля для новичков - <a>"Начало работы с вебом"</a>.</p>\n<p>Перед тем, как начать эту тему, рекомендуется пройтись по разделу <a>"Начало работы с вебом"</a>, однако это необязательно; многое из того, что описано в статье <a>"Основы HTML"</a>, также рассматривается и во <a>"Введении в HTML"</a>, причём даже более подробно.</p></div></section><section aria-labelledby="модули"><h3 id="модули"><a>Модули</a></h3><div class="section-content"><p>Данный раздел содержит модули, которые расположены в порядке, наиболее оптимальном для их изучения. Вам определённо следует начать с первого модуля.</p>\n<dl>\n  <dt id="введение_в_html"><a>Введение в HTML</a></dt>\n  <dd>\n    <p>Этот модуль даёт основу, которая позволит вам использовать важные понятия и синтаксис, вы рассмотрите применение HTML к тексту, узнаете как создать гиперссылки и как использовать HTML для структурирования веб-страницы.</p>\n  </dd>\n  <dt id="мультимедиа_и_встраивание"><a>Мультимедиа и встраивание</a></dt>\n  <dd>\n    <p>В этом модуле рассматривается использование HTML для подключения мультимедиа-контента к вашим веб-страницам, включая различные способы встраивания изображений, видео и аудио и даже других веб-страниц.</p>\n  </dd>\n  <dt id="html_таблицы"><a>HTML Таблицы</a></dt>\n  <dd>\n    <p>Представление табличных данных на веб-странице в понятном, <a>доступном</a> образе, может стать проблемой. Этот модуль описывает основы табличной разметки, а также более сложные функции, такие как реализация подписок и резюме.</p>\n  </dd>\n  <dt id="html_формы"><a>HTML Формы</a></dt>\n  <dd>\n    <p>Формы - очень важная часть интернета, они обеспечивают большую часть функциональных возможностей, необходимых для взаимодействия с веб-сайтом, например, регистрация и вход в систему, отправка отзывов, покупка продуктов и многое другое. В этом модуле вы начнёте с создания частей форм на стороне клиента.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="решение_общих_html_задач"><h2 id="решение_общих_html_задач"><a>Решение общих HTML задач</a></h2><div class="section-content"><p><a>Использование HTML для решения общих задач</a> содержит ссылки на разделы контента, объясняющего, как использовать HTML для решения очень распространённых проблем при создании веб-страницы: работа с заголовками, добавление изображений или видео, выделение содержимого, создание базовой формы и т.д.</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Основы HTML',
		content:
			'<header><h1>Основы HTML</h1></header><div class="section-content">\n<p>HTML (Hypertext Markup Language) - это код, который используется для структурирования и отображения веб-страницы и её контента. Например, контент может быть структурирован внутри множества параграфов, маркированных списков или с использованием изображений и таблиц данных. Как видно из названия, эта статья даст вам базовое понимание HTML и его функций.</p></div><section aria-labelledby="что_такое_html_на_самом_деле"><h2 id="что_такое_html_на_самом_деле"><a>Что такое HTML на самом деле?</a></h2><div class="section-content"><p>HTML не является языком программирования; это <em>язык разметки</em>, и используется, чтобы сообщать вашему браузеру, как отображать веб-страницы, которые вы посещаете. Он может быть сложным или простым, в зависимости от того, как хочет веб-дизайнер. HTML состоит из ряда <strong><a>элементов</a></strong>, которые вы используете, чтобы вкладывать или оборачивать различные части контента, чтобы заставить контент отображаться или действовать определённым образом. Ограждающие <a>теги</a> могут сделать слово или изображение ссылкой на что-то ещё, могут сделать слова курсивом, сделать шрифт больше или меньше и так далее. Например, возьмём следующую строку контента:</p>\n<pre compile="false" disable="true" language="markup">Моя кошка очень раздражена\n</pre>\n<p>Если бы мы хотели, чтобы строка стояла сама по себе, мы могли бы указать, что это абзац, заключая его в теги абзаца:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Моя кошка очень раздражена</p>\n</pre></div></div></section><section aria-labelledby="анатомия_html_элемента"><h3 id="анатомия_html_элемента"><a>Анатомия HTML элемента</a></h3><div class="section-content"><p>Давайте рассмотрим элемент абзаца более подробно.</p>\n<p>\n  \n</p>\n<p>Главными частями нашего элемента являются:</p>\n<ol>\n  <li><strong>Открывающий тег (Opening tag)</strong>: Состоит из имени элемента (в данном случае, "p"), заключённого в открывающие и закрывающие <strong>угловые скобки</strong>. Открывающий тег указывает, где элемент начинается или начинает действовать, в данном случае — где начинается абзац.</li>\n  <li><strong>Закрывающий тег (Closing tag):</strong> Это то же самое, что и открывающий тег, за исключением того, что он включает в себя косую черту перед именем элемента. Закрывающий элемент указывает, где элемент заканчивается, в данном случае — где заканчивается абзац. Отсутствие закрывающего тега является одной из наиболее распространённых ошибок начинающих и может приводить к странным результатам.</li>\n  <li><strong>Контент (Content)</strong>: Это контент элемента, который в данном случае является просто текстом.</li>\n  <li><strong>Элемент(Element)</strong>: Открывающий тег, закрывающий тег и контент вместе составляют элемент.</li>\n</ol>\n<p>Элементы также могут иметь атрибуты, которые выглядят так:</p>\n<p>\n  \n</p>\n<p>Атрибуты содержат дополнительную информацию об элементе, которую вы не хотите показывать в фактическом контенте. В данном случае, class это <em>имя</em> <em>атрибута,</em> а <code>editor-note</code> это <em>значение атрибута</em>. Класс позволяет дать элементу идентификационное имя, которое может позже использоваться, чтобы обращаться к элементу с информацией о стиле и прочих вещах.</p>\n<p>Атрибут всегда должен иметь:</p>\n<ol>\n  <li>Пробел между ним и именем элемента (или предыдущим атрибутом, если элемент уже имеет один или несколько атрибутов).</li>\n  <li>Имя атрибута, за которым следует знак равенства.</li>\n  <li>Значение атрибута, заключённое с двух сторон в кавычки.</li>\n</ol></div></section><section aria-labelledby="вложенные_элементы"><h3 id="вложенные_элементы"><a>Вложенные элементы</a></h3><div class="section-content"><p>Вы также можете располагать элементы внутри других элементов — это называется <strong>вложением</strong>. Если мы хотим заявить, что наша кошка <strong>очень</strong> раздражена, мы можем заключить слово "очень" в элемент <a><code>&lt;strong&gt;</code></a> , который указывает, что слово должно быть сильно акцентированно:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Моя кошка <strong>очень</strong> раздражена.</p>\n</pre></div>\n<p>Вы, однако, должны убедиться, что ваши элементы правильно вложены: в примере выше мы открыли первым элемент <a><code>&lt;p&gt;</code></a>, затем элемент <a><code>&lt;strong&gt;</code></a>, потом мы должны закрыть сначала элемент <a><code>&lt;strong&gt;</code></a>, затем <a><code>&lt;p&gt;</code></a>. Приведённое ниже неверно:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Моя кошка <strong>очень раздражена.</strong></p>\n</pre></div>\n<p>Элементы должны открываться и закрываться правильно, поэтому они явно располагаются внутри или снаружи друг друга. Если они перекрываются, как в примере выше, ваш веб-браузер будет пытаться сделать наилучшее предположение на основе того, что вы пытались сказать, что может привести к неожиданным результатам. Так что не стоит этого делать!</p></div></section><section aria-labelledby="пустые_элементы"><h3 id="пустые_элементы"><a>Пустые элементы</a></h3><div class="section-content"><p>Некоторые элементы не имеют контента, и называются <strong>пустыми элементами</strong>. Возьмём элемент <a><code>&lt;img&gt;</code></a>, который уже имеется в нашем HTML:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="https://img.goodfon.ru/original/2048x1281/9/2e/severoamerikanskiy-mohnonogiy-5265.jpg" alt="Моё тестовое изображение">\n</pre></div>\n<p>Он содержит два атрибута, но не имеет закрывающего тега <code>&lt;/img&gt;</code>, и никакого внутреннего контента. Это потому, что элемент изображения не оборачивает контент для влияния на него. Его целью является вставка изображения в HTML страницу в нужном месте.</p></div></section><section aria-labelledby="анатомия_html_документа"><h3 id="анатомия_html_документа"><a>Анатомия HTML документа</a></h3><div class="section-content"><p>Мы завершили изучение основ отдельных HTML элементов, но они не очень полезны сами по себе. Теперь мы посмотрим, как отдельные элементы объединяются в целую HTML страницу. Давайте вернёмся к коду, который мы записывали в наш <code>index.html</code> (с которым мы впервые встретились в статье <a>Работа с файлами</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>Моя тестовая страница</title>\n  \n  \n    <img src="https://img.goodfon.ru/original/2048x1281/9/2e/severoamerikanskiy-mohnonogiy-5265.jpg" alt="Моё тестовое изображение">\n  \n\n</pre></div>\n<p>Здесь мы имеем:</p>\n<ul>\n  <li><code>&lt;!DOCTYPE html&gt;</code> — доктайп. В прошлом, когда HTML был молод (около 1991/1992), доктайпы должны были выступать в качестве ссылки на набор правил, которым HTML страница должна была следовать, чтобы считаться хорошим HTML, что могло означать автоматическую проверку ошибок и другие полезные вещи. Однако в наши дни, никто не заботится об этом, и они на самом деле просто исторический артефакт, который должен быть включён для того, что бы все работало правильно. На данный момент это все, что вам нужно знать.</li>\n  <li><code>&lt;html&gt;&lt;/html&gt;</code> — элемент <a><code>&lt;html&gt;</code></a>. Этот элемент оборачивает весь контент на всей странице, и иногда известен как корневой элемент.</li>\n  <li><code>&lt;head&gt;&lt;/head&gt;</code> — элемент <a><code>&lt;head&gt;</code></a>. Этот элемент выступает в качестве контейнера для всего, что вы пожелаете включить на HTML страницу, но <em>не являющегося</em> контентом, который вы показываете пользователям вашей страницы. К ним относятся такие вещи, как ключевые слова и описание страницы, которые будут появляться в результатах поиска, CSS стили нашего контента, кодировка и многое другое.</li>\n  <li><code>&lt;body&gt;&lt;/body&gt;</code> — элемент <a><code>&lt;body&gt;</code></a>. В нем содержится <em>весь</em> контент, который вы хотите показывать пользователям, когда они посещают вашу страницу, будь то текст, изображения, видео, игры, проигрываемые аудиодорожки или что-то ещё.</li>\n  <li><code>&lt;meta charset="utf-8"&gt;</code> — этот элемент устанавливает UTF-8 кодировку вашего документа, которая включает в себя большинство символов из всех известных человечеству языков. По сути, теперь документ может обрабатывать любой текстовый контент, который вы в него вложите. Нет причин не устанавливать её, так как это может помочь избежать некоторых проблем в дальнейшем.</li>\n  <li><code>&lt;title&gt;&lt;/title&gt;</code> — элемент <a><code>&lt;title&gt;</code></a>. Этот элемент устанавливает заголовок для вашей страницы, который является названием, появляющимся на вкладке браузера загружаемой страницы, и используется для описания страницы, когда вы добавляете её в закладки/избранное.</li>\n</ul></div></section><section aria-labelledby="изображения"><h2 id="изображения"><a>Изображения</a></h2><div class="section-content"><p>Давайте снова обратим наше внимание на элемент <a>изображения</a>:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="https://img.goodfon.ru/original/2048x1281/9/2e/severoamerikanskiy-mohnonogiy-5265.jpg" alt="Mоё тестовое изображение">\n</pre></div>\n<p>Как было сказано раньше, код встраивает изображение на нашу страницу в нужном месте. Это делается с помощью атрибута <code>src</code> (source, источник), который содержит путь к нашему файлу изображения.</p>\n<p>Мы также включили атрибут <code>alt</code> (alternative, альтернатива). В этом атрибуте, вы указываете поясняющий текст для пользователей, которые не могут увидеть изображение, возможно, по следующим причинам:</p>\n<ol>\n  <li>У них присутствуют нарушения зрения. Пользователи со значительным нарушением зрения часто используют инструменты, называемые Screen Readers (экранные дикторы), которые читают для них альтернативный текст.</li>\n  <li>Что-то пошло не так, в результате чего изображение не отобразилось. Например, попробуйте намеренно изменить путь в вашем атрибуте <code>src</code>, сделав его неверным. Если вы сохраните и перезагрузите страницу, то вы должны увидеть что-то подобное вместо изображения:</li>\n</ol>\n<p>\n  \n</p>\n<p>Альтернативный текст - это "пояснительный текст". Он должен предоставить читателю достаточно информации, чтобы иметь представление о том, что передаёт изображение. В этом примере наш текст "My test image" ("Моё тестовое изображение") не годится. Намного лучшей альтернативой для нашего логотипа Firefox будет "The Firefox logo: a flaming fox surrounding the Earth" ("Логотип Firefox: огненный Лис вокруг Земли").</p>\n<p>Сейчас попробуйте придумать более подходящий альтернативный текст для вашего изображения.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Узнайте больше о <a>специальных возможностях</a>.</p>\n</div></div></section><section aria-labelledby="разметка_текста"><h2 id="разметка_текста"><a>Разметка текста</a></h2><div class="section-content"><p>В этом разделе рассмотрим некоторые из основных HTML элементов, которые вы будете использовать для разметки текста.</p></div></section><section aria-labelledby="заголовки"><h3 id="заголовки"><a>Заголовки</a></h3><div class="section-content"><p>Элементы заголовка позволяют вам указывать определённые части вашего контента в качестве заголовков или подзаголовков. Точно так же, как книга имеет название, названия глав и подзаголовков, HTML документ может содержать то же самое. HTML включает шесть уровней заголовков <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a>–<a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h6&gt;</code> <small>(en-US)</small></a>, хотя обычно вы будете использовать не более 3-4 :</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>Мой главный заголовок</h1>\n<h2>Мой заголовок верхнего уровня</h2>\n<h3>Мой подзаголовок</h3>\n<h4>Мой под-подзаголовок</h4>\n</pre></div>\n<p>Теперь попробуйте добавить подходящее название для вашей HTML страницы, чуть выше элемента <a><code>&lt;img&gt;</code></a>.</p></div></section><section aria-labelledby="абзацы"><h3 id="абзацы"><a>Абзацы</a></h3><div class="section-content"><p>Как было сказано раньше, элемент <a><code>&lt;p&gt;</code></a> предназначен для абзацев текста; вы будете использовать их регулярно при разметке текстового контента:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Это одиночный абзац</p>\n</pre></div>\n<p>Добавьте свой образец текста (вы создавали его в статье <a><em>Каким должен быть ваш веб-сайт?</em></a>) в один или несколько абзацев, расположенных прямо под элементом <a><code>&lt;img&gt;</code></a>.</p></div></section><section aria-labelledby="списки"><h3 id="списки"><a>Списки</a></h3><div class="section-content"><p>Большая часть веб-контента является списками и HTML имеет специальные элементы для них. Разметка списка всегда состоит по меньшей мере из двух элементов. Наиболее распространёнными типами списков являются нумерованные и ненумерованные списки:</p>\n<ol>\n  <li><strong>Ненумерованные списки</strong> - это списки, где порядок пунктов не имеет значения, как в списке покупок. Они оборачиваются в элемент <a><code>&lt;ul&gt;</code></a>.</li>\n  <li><strong>Нумерованные списки -</strong> это списки, где порядок пунктов имеет значение, как в рецепте. Они оборачиваются в элемент <a><code>&lt;ol&gt;</code></a>.</li>\n</ol>\n<p>Каждый пункт внутри списков располагается внутри элемента <a><code>&lt;li&gt;</code></a> (list item, элемент списка).</p>\n<p>Например, если мы хотим включить часть следующего фрагмента абзаца в список:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>\n  Mozilla, мы являемся мировым сообществом технологов, мыслителей и строителей,\n  работающих вместе ...\n</p>\n</pre></div>\n<p>Мы могли бы изменить разметку на эту:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><p>Mozilla, мы являемся мировым сообществом</p>\n\n<ul>\n  <li>технологов</li>\n  <li>мыслителей</li>\n  <li>строителей</li>\n</ul>\n\n<p>работающих вместе ...</p>\n</pre></div>\n<p>Попробуйте добавить упорядоченный или неупорядоченный список на свою страницу.</p></div></section><section aria-labelledby="ссылки"><h2 id="ссылки"><a>Ссылки</a></h2><div class="section-content"><p>Ссылки очень важны — это то, что делает Интернет Интернетом. Чтобы добавить ссылку, нам нужно использовать простой элемент — <a><code>&lt;a&gt;</code></a> — <em>a</em> это сокращение от "anchor" ("якорь"). Чтобы текст в вашем абзаце стал ссылкой, выполните следующие действия:</p>\n<ol>\n  <li>Выберите некоторый текст. Мы выбрали текст "Манифест Mozilla".</li>\n  <li>Оберните текст в элемент <a><code>&lt;a&gt;</code></a>, например так:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a>Манифест Mozilla</a>\n</pre></div>\n  </li>\n  <li>Задайте элементу <a><code>&lt;a&gt;</code></a> атрибут href, например так:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="">Манифест Mozilla</a>\n</pre></div>\n  </li>\n  <li>Заполните значение этого атрибута веб-адресом, на который вы хотите указать ссылку:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><a href="https://www.mozilla.org/ru/about/manifesto/details/">Манифест Mozilla</a>\n</pre></div>\n  </li>\n</ol>\n<p>Вы можете получить неожиданные результаты, если в самом начале веб-адреса вы опустите <code>https://</code> или <code>http://</code> часть, называемую <em>протоколом</em>. После создания ссылки, кликните по ней, чтобы убедиться, что она направляет вас туда, куда вы хотели.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> <code>href</code> сначала может выглядеть довольно непонятым выбором для имени атрибута. Если у вас возникли проблемы с тем, чтобы запомнить его, можете запомнить, что атрибут href образуется как <em><strong>h</strong>ypertext <strong>ref</strong>erence</em> ("гипертекстовая ссылка").</p>\n</div>\n<p>Теперь добавьте ссылку на вашу страницу, если вы ещё не сделали этого.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Если вы следовали всем инструкциям в этой статье, то вы должны увидеть в конечном итоге страницу, аналогичную рисунку ниже (вы также можете <a class="external" target="_blank">посмотреть её здесь</a>):</p>\n<p>\n  \n</p>\n<p>Если вы застряли, вы всегда можете сравнить свою работу с нашим <a class="external" target="_blank">готовым примером кода</a> на GitHub.</p>\n<p>Здесь вы узнали только самую поверхность HTML. Чтобы узнать больше, перейдите на страницу <a>Обучение HTML: руководства и уроки</a>.</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Введение в HTML',

		content:
			'<header><h1>Введение в HTML</h1></header><div class="section-content"><p>По сути, <a>HTML</a> довольно простой язык, состоящий из элементов, которые могут быть применены к частям текста, чтобы придавать им различные значения (Это абзац? Это маркированный список? Это часть таблицы?), разделять документ на логические секции (есть ли у документа шапка? три столбца с контентом? меню навигации?) и добавлять контент на Вашу страницу, такой как фото и видео. Этот модуль расскажет вам о первых двух возможностях HTML и научит фундаментальным концепциям и синтаксису, которые вам нужно знать, чтобы понять HTML.</p></div><section aria-labelledby="необходимые_условия"><h2 id="необходимые_условия"><a>Необходимые условия</a></h2><div class="section-content"><p>Чтобы начать изучение этого модуля, вам не нужны никакие знания HTML, но вы должны иметь хотя бы базовые навыки обращения с компьютером и навыки пассивного использования Веба (т.е просто смотря на него, потребляя контент). У вас должна быть базовая рабочая среда, описанная в разделе <a>Установка базового программного обеспечения</a>), а также понимание, как создавать и управлять файлами, что подробно описано в статье <a>Работа с файлами</a> — обе статьи являются частью нашего модуля <a>Начало работы с сетью</a>.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> если вы работаете на компьютере/планшете/другом устройстве, с отсутствием возможности создания собственных файлов, вы можете испробовать примеры кода (большинство) в онлайн-редакторах кода, таких как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble.</a></p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><p>Этот модуль содержит следующие статьи, которые помогут изучить всю основную теорию HTML и предоставят широкие возможности для проверки некоторых навыков.</p>\n<dl>\n  <dt id="начало_работы_с_html"><a>Начало работы с HTML</a></dt>\n  <dd>\n    <p>Охватывает базовые основы HTML, чтобы вы начали изучение - мы опишем элементы, атрибуты и все другие важные термины, о которых вы, возможно, уже слышали, а также где и как они располагаются в языке. Мы также покажем, структуру HTML-элемента, как устроена типичная страница HTML, и объясним другие важные языковые особенности. По ходу мы будем играть с HTML так, чтобы вам было интересно!</p>\n  </dd>\n  <dt id="что_такое_заголовок_метаданные_в_html"><a>Что такое заголовок? Метаданные в HTML</a></dt>\n  <dd>\n    <p>Заголовок HTML — это часть документа, которая <strong>не отображается</strong> в браузере при загрузке страницы. Он содержит информацию, такую как: страница <a><code>&lt;title&gt;</code></a>, ссылки на <a>CSS</a> (если вы хотите стилизовать свой HTML при помощи CSS), ссылки на пользовательские значки и метаданные (которые представляют собой данные о HTML, например, кто его написал или важные ключевые слова, которые описывают документ).</p>\n  </dd>\n  <dt id="основы_редактирования_текста_в_html"><a>Основы редактирования текста в HTML</a></dt>\n  <dd>\n    <p>Основной задачей HTML является придание тексту значения **(**также известно, как <strong>семантика</strong>), чтобы браузер знал, как его правильно отображать. В этой статье рассматривается то, как использовать HTML, чтобы разбить блок текста на структуру из заголовков и абзацев, добавить акцент/значение слов, создать списки и многое другое.</p>\n  </dd>\n  <dt id="создание_гиперссылок"><a>Создание гиперссылок</a></dt>\n  <dd>\n    <p>Гиперссылки очень важны — ведь именно они делают интернет интернетом. В этой статье описан синтаксис, необходимый для создания ссылок, а также описано их наилучшее применение на практике.</p>\n  </dd>\n  <dt id="углублённое_форматирование_текста"><a>Углублённое форматирование текста</a></dt>\n  <dd>\n    <p>Существует множество других элементов HTML для редактирования текста, про которые мы вам не рассказали в статье <a>Основы редактирования текста в HTML</a>. Описанные здесь элементы менее известны, но о них также полезно знать. Здесь вы узнаете о разметке цитат, списках описания, компьютерном коде и другом сопутствующем тексте, нижнем и верхнем индексах, контактной информации и многом другом.</p>\n  </dd>\n  <dt id="структура_документа_и_веб-сайта"><a>Структура документа и веб-сайта</a></dt>\n  <dd>\n    <p>Помимо определения отдельных частей страницы (таких как "абзац" или "изображение"), HTML также используется для определения отдельных зон веб-сайта (таких как "шапка", "меню навигации", "столбец с основным содержимым".) В этой статье рассматривается, как планировать базовую структуру веб-сайта и писать HTML для представления этой структуры.</p>\n  </dd>\n <dt id="отладка_html"><a>Отладка HTML</a></dt>\n  <dd>\n    <p>Писать на HTML хорошо, но что, если что-то идёт не так, и вы не можете найти место ошибки в коде? В этой статье вы познакомитесь с некоторыми инструментами, которые могут вам помочь.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="оценка"><h2 id="оценка"><a>Оценка</a></h2><div class="section-content"><p>Следующие задания проверят ваше понимание основ HTML, описанных в приведённых выше руководствах.</p>\n<dl>\n  <dt id="разметка_письма"><a>Разметка письма</a></dt>\n  <dd>\n    <p>Все мы рано или поздно учимся писать письма; также это полезный тест, для проверки ваших навыков форматирования текста! Поэтому, в этом задании вам будет предоставлено письмо для разметки.</p>\n  </dd>\n  <dt id="структурируем_страницу"><a>Структурируем страницу</a></dt>\n  <dd>\n    <p>Этот тест проверит вашу способность использовать HTML для структурирования простой страницы, которая содержит шапку ("хедер") , нижний колонтитул ("футер"), меню навигации, основное содержимое и боковую панель.</p>\n  </dd>\n</dl></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Начало работы с HTML',

		content: `<header>
   <h1>Начало работы с HTML</h1>
</header>
<div class="section-content">
   \n
   <p>В этой статье мы охватим азы HTML, необходимые для начала работы. Дадим определение «элементам», «атрибутам», «тегам» и прочим важным понятиям, о которых вы, возможно, слышали, а также об их роли в языке. Мы также покажем, как устроены HTML-элементы, типичная HTML-страница, и объясним другие важные аспекты языка. По ходу дела, чтобы вы не заскучали, мы поиграем с настоящей HTML-страницей!</p>
   \n
</div>
<section aria-labelledby="что_такое_html">
   <h2 id="что_такое_html"><a>Что такое HTML?</a></h2>
   <div class="section-content">
      <p><a>HTML</a> (HyperText Markup Language - язык гипертекстовой разметки) не является языком программирования; это <em>язык разметки</em>, используемый для определения структуры веб-страниц, посещаемых пользователями. Они могут иметь сложную или простую структуру, всё зависит от замысла и желания веб-разработчика. HTML состоит из ряда <a>элементов</a>, которые вы используете для того, чтобы охватить, обернуть или <em>разметить</em> различные части содержимого, чтобы оно имело определённый вид или срабатывало определённым способом. Встроенные <a>тэги</a> могут преобразовать часть содержимого в гиперссылку, по которой можно перейти на другую веб-страницу, выделить курсивом слова и так далее. Например, рассмотрим следующую строку:</p>
      \n
      <pre compile="false" disable="true" language="markup">Мой кот очень сердитый\n</pre>
      \n
      <p>Если мы хотим, чтобы строка отобразилась в таком же виде, мы можем определить её, как "параграф", заключив её в теги элемента "параграф" (<a><code>&lt;p&gt;</code></a>), например:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Мой кот очень сердитый</p>\n</pre>
      </div>
      \n
      <div class="notecard note" id="sect1">
         \n  
         <p><strong>Примечание:</strong> Метки в HTML нечувствительны к регистру, то есть они могут быть записаны в верхнем или нижнем регистре. Например, тег <a><code>&lt;title&gt;</code></a> может быть записан как <code>&lt;title&gt;</code>, <code>&lt;TITLE&gt;</code>, <code>&lt;Title&gt;</code>, <code>&lt;TiTlE&gt;</code>, и т.д., и он будет работать нормально. Лучшей практикой, однако, является запись всех тегов в нижнем регистре для обеспечения согласованности, удобочитаемости и других причин.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="структура_html-элементов">
   <h2 id="структура_html-элементов"><a>Структура HTML-элементов</a></h2>
   <div class="section-content">
      <p>Давайте рассмотрим элемент "параграф" чуть подробнее:</p>
      \n
      <p>\n  \n</p>
      \n
      <p>Основными частями элемента являются:</p>
      \n
      <ol>
         \n  
         <li><strong>Открывающий тег:</strong> Он состоит из названия (обозначения) элемента (в нашем случае, p), помещённого внутри <strong>угловых скобок</strong>. Данный тег служит признаком начала элемента, с этого момента тег начинает влиять на следующее после него содержимое.</li>
         \n  
         <li><strong>Закрывающий тег:</strong> выглядит как и открывающий, но содержит слеш перед названием тега. Он служит признаком конца элемента. Пропуски закрывающих тегов — типичная ошибка новичков, которая может приводить к неопределённым результатам — в лучшем случае всё сработает правильно, в других страница может вовсе не прорисоваться или прорисоваться не как ожидалось.</li>
         \n  
         <li><strong>Содержимое:</strong> Как видно, в нашем случае содержимым является простой текст.</li>
         \n  
         <li><strong>Элемент:</strong> открывающий тег + закрывающий тег + содержимое = элемент.</li>
         \n
      </ol>
   </div>
</section>
<section aria-labelledby="активное_изучение_создание_вашего_первого_html-элемента">
   <h3 id="активное_изучение_создание_вашего_первого_html-элемента"><a>Активное изучение: создание вашего первого HTML-элемента</a></h3>
   <div class="section-content">
      <p>Отредактируйте строку текста ниже в поле <em>Ввод</em>, обернув её тегами <code>&lt;em&gt;</code> и <code>&lt;/em&gt;</code> (вставьте <code>&lt;em&gt;</code> перед строкой, чтобы <em>указать начало элемента</em>, и <code>&lt;/em&gt;</code> после неё, чтобы <em>указать конец элемента</em>) — эти действия должны выделить строку текста курсивом! Вы можете видеть изменения в реальном времени в поле <em>Вывод</em>.</p>
      \n
      <p>Если вы ошиблись, то всегда можете начать снова, воспользовавшись кнопкой <em>Сбросить</em>. Если упражнение вызывает у вас затруднения, то нажмите кнопку <em>Показать решение</em>, чтобы увидеть правильный ответ.</p>
      \n
      <div class="code-example" id="sect2">
         <div class="example-header" id="sect3"></div>
      </div>
   </div>
</section>
<section aria-labelledby="вложенные_элементы">
   <h3 id="вложенные_элементы"><a>Вложенные элементы</a></h3>
   <div class="section-content">
      <p>Вы также можете вкладывать элементы внутрь других элементов — это называется <strong>вложенностью</strong>. Если мы хотим подчеркнуть, что наш кот <strong>очень</strong> сердитый, мы можем заключить слово "очень" в элемент <a><code>&lt;strong&gt;</code></a> , который означает, что это слово крайне важно в данном контексте:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Мой кот <strong>очень</strong> сердитый.</p>\n</pre>
      </div>
      \n
      <p>Вы должны удостовериться, что элементы вложены должным образом: в следующем примере мы открываем <code>p</code> элемент первым, затем элемент <code>strong</code>, затем мы закрываем элемент <code>strong</code> первым, затем <code>p</code>. Следующее писать неправильно:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Мой кот <strong>очень сердитый.</strong></p>\n</pre>
      </div>
      \n
      <p>Элементы должны открываться и закрываться правильно таким образом, чтобы явно находиться внутри или снаружи друг друга. Если они перекрываются так, как в примере выше, то ваш браузер попытается «додумать» за вас, что вы имели в виду, и вы получите непредсказуемый результат. Так что не делайте так!</p>
   </div>
</section>
<section aria-labelledby="блочные_и_строчные_элементы">
   <h3 id="блочные_и_строчные_элементы"><a>Блочные и строчные элементы</a></h3>
   <div class="section-content">
      <p>Существует две важных категории элементов в HTML, которые вам стоит знать — элементы блочного уровня и строчные элементы.</p>
      \n
      <ul>
         \n  
         <li>Элементы блочного уровня формируют видимый блок на странице — они окажутся на новой строке после любого контента, который шёл до них, и любой контент после них также окажется на новой строке. Чаще всего элементами блочного уровня бывают структурные элементы страницы, представляющие собой, например, параграфы (абзацы), списки, меню навигации, футеры, или подвалы, и т. п. Элементы блочного уровня не вкладываются в строчные элементы, но иногда могут вкладываться в другие элементы блочного уровня.</li>
         \n  
         <li>Строчные элементы — это те, которые содержатся в элементах блочного уровня и окружают только малые части содержимого документа, не целые абзацы и группировки контента. Строчные элементы не приводят к появлению новой строки в документе: они обычно встречаются внутри абзаца текста, например, элемент <a><code>&lt;a&gt;</code></a> (ссылка) или акцентирующие элементы вроде <a><code>&lt;em&gt;</code></a> или <a><code>&lt;strong&gt;</code></a>.</li>
         \n
      </ul>
      \n
      <p>Посмотрите на следующий пример:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><em>Первый</em>\n<em>второй</em>\n<em>третий</em>\n\n<p>четвёртый</p>\n<p>пятый</p>\n<p>шестой</p>\n</pre>
      </div>
      \n
      <p><a><code>&lt;em&gt;</code></a> — это строчный элемент, так что, как вы здесь видите, первые три элемента находятся на одной строке друг с другом без пробелов между ними. С другой стороны, <a><code>&lt;p&gt;</code></a> — это элемент блочного уровня, так что каждый элемент находится на новой строке, с пространством выше и ниже каждого (этот интервал определяется <a>CSS-оформлением</a> по умолчанию, которое браузеры применяют к абзацам).</p>
      <div class="code-example" id="sect4">
         <div class="example-header" id="sect5"></div>
      </div>
      \n
      <div class="notecard note" id="sect6">
         \n  
         <p><strong>Примечание:</strong> HTML5 переопределил категории элементов в HTML: смотрите <a class="external" target="_blank">Категории типов содержимого элементов</a>. Хотя эти определения точнее и однозначнее, чем те, которые были раньше, их гораздо сложнее понять, чем «блочный» и «строчный», поэтому мы будем придерживаться их в этом разделе.</p>
         \n
      </div>
      \n
      <div class="notecard note" id="sect7">
         \n  
         <p><strong>Примечание:</strong> Не путайте термины «блочный» и «строчный», используемые в этом разделе, с одноимёнными <a>типами отображения в CSS</a>. Хотя по умолчанию они коррелируют, смена типа отображения в CSS не меняет категорию элемента и не влияет на то, во что его можно вкладывать и что можно вкладывать в него. Эта довольно частая путаница — одна из причин, почему HTML5 отказался от этих терминов.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="пустые_элементы">
   <h3 id="пустые_элементы"><a>Пустые элементы</a></h3>
   <div class="section-content">
      <p>Не все элементы соответствуют вышеупомянутому шаблону: открывающий тег, контент, закрывающий тег. Некоторые элементы состоят из одного тега и обычно используются для вставки чего-либо в то место документа, где размещены. Например, элемент <a><code>&lt;img&gt;</code></a> вставляет картинку на страницу в том самом месте, где он расположен:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><img src="https://goo.su/bu5cvM">\n</pre>
      </div>
      \n
      <p>Это выведет на вашу страницу следующее:</p>
      <div class="code-example" id="sect8">
         <div class="example-header" id="sect9"></div>
      </div>
      \n
      <div class="notecard note" id="sect10">
         \n  
         <p><strong>Примечание:</strong> Пустые элементы иногда называют <em>void-элементами</em>.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="атрибуты">
   <h2 id="атрибуты"><a>Атрибуты</a></h2>
   <div class="section-content">
      <p>У элементов также могут быть атрибуты, которые выглядят так:</p>
      \n
      <p>\n  \n</p>
      \n
      <p>Атрибуты содержат дополнительную информацию об элементе, которая, по вашему мнению, не должна отображаться в содержимом элемента. В данном случае атрибут <code>class</code> позволяет вам дать элементу идентификационное имя, которое в дальнейшем может быть использовано для обращения к элементу с информацией о стиле и прочими вещами.</p>
      \n
      <p>Атрибут должен иметь:</p>
      \n
      <ol>
         \n  
         <li>Пробел между атрибутом и именем элемента (или предыдущим атрибутом, если у элемента уже есть один или несколько атрибутов).</li>
         \n  
         <li>Имя атрибута и следующий за ним знак равенства.</li>
         \n  
         <li>Значение атрибута, заключённое в кавычки.</li>
         \n
      </ol>
   </div>
</section>
<section aria-labelledby="активное_изучение_добавление_атрибутов_в_элемент">
   <h3 id="активное_изучение_добавление_атрибутов_в_элемент"><a>Активное изучение: Добавление атрибутов в элемент</a></h3>
   <div class="section-content">
   <p>Возьмём для примера элемент <a><code>&lt;a&gt;</code></a> — означает anchor (якорь) и делает текст внутри него гиперссылкой. Может иметь несколько атрибутов, вот несколько из них:</p>
   \n
   <dl>
      \n  
      <dt id="href"><a><code>href</code></a></dt>
      \n  
      <dd>
         \n    
         <p>В значении этого атрибута прописывается веб-адрес, на который, по вашей задумке, должна указывать ссылка, куда браузер переходит, когда вы по ней кликаете. Например, <code>href="https://www.mozilla.org/"</code>.</p>
         \n  
      </dd>
      \n  
      <dt id="title"><a><code>title</code></a></dt>
      \n  
      <dd>
         \n    
         <p>Атрибут <code>title</code> описывает дополнительную информацию о ссылке, такую как: на какую страницу она ведёт. Например, <code>title="The Mozilla homepage"</code>. Она появится в виде всплывающей подсказки, когда вы наведёте курсор на ссылку.</p>
         \n  
      </dd>
      \n  
      <dt id="target"><a><code>target</code></a></dt>
      \n  
      <dd>
         \n    
         <p>Атрибут <code>target</code> определяет контекст просмотра, который будет использоваться для отображения ссылки. Например, <code>target="_blank"</code> отобразит ссылку на новой вкладке. Если вы хотите отобразить ссылку на текущей вкладке, просто опустите этот атрибут.</p>
         \n  
      </dd>
      \n
   </dl>
   \n
   <p>Измените строку текста ниже в поле <em>Ввод</em> так, чтобы она вела на ваш любимый веб-сайт. Сначала добавьте элемент <code>&lt;a&gt;</code> затем атрибут <code>href</code> и атрибут <code>title</code>. Наконец, укажите атрибут <code>target</code> чтобы открыть ссылку на новой вкладке. Вы можете наблюдать сделанные изменения в реальном времени в поле <em>Вывод</em>. Вы должны увидеть гиперссылку, при наведении курсора на которую появляется содержимое атрибута <code>title</code>, а при щелчке переходит по адресу в атрибуте <code>href</code>. Помните, что между именем элемента и каждым из атрибутов должен быть пробел.</p>
   \n
   <p>Если вы ошиблись, то всегда можете начать снова, воспользовавшись кнопкой <em>Сбросить</em>. Если упражнение вызывает у вас затруднения, то нажмите кнопку <em>Показать решение</em>, чтобы увидеть правильный ответ.</p>
   \n
   <div class="code-example">
      <pre compile="false" disable="true" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из области кода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 100px;width: 95%">  &lt;p&gt;Ссылка на мой любимый веб-сайт.&lt;/p&gt;\n</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Сбросить">\n  <input id="solution" type="button" value="Показать решение">\n</div><style>h2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n \n}</style></pre>
   </div>
   \n
</section>
<section aria-labelledby="булевые_атрибуты">
   <h3 id="булевые_атрибуты"><a>Булевые атрибуты</a></h3>
   <div class="section-content">
      <p>Иногда вы будете видеть атрибуты, написанные без значения — это совершенно допустимо. Такие атрибуты называются булевые, и они могут иметь только одно значение, которое в основном совпадает с его именем. В качестве примера возьмём атрибут <a><code>disabled</code></a>, который можно назначить для формирования элементов ввода, если вы хотите, чтобы они были отключены (неактивны), так что пользователь не может вводить какие-либо данные в них.</p>
      \n
      <pre compile="false" disable="true" language="markup"><input type="text" disabled="disabled">\n</pre>
      \n
      <p>Для краткости совершенно допустимо записывать их следующим образом (мы также для справки разместили не деактивированный элемент input, чтобы дать вам большее понимание происходящего):</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><input type="text" disabled=""><input type="text"></pre>
      </div>
      \n
      <p>На выходе оба варианта будут выглядеть следующим образом:</p>
      <div class="code-example" id="sect13">
         <div class="example-header" id="sect14"></div>
      </div>
   </div>
</section>
<section aria-labelledby="опускание_кавычек_вокруг_значений_атрибутов">
   <h3 id="опускание_кавычек_вокруг_значений_атрибутов"><a>Опускание кавычек вокруг значений атрибутов</a></h3>
   <div class="section-content">
      <p>Осматриваясь во всемирной сети, вы будете встречать различные незнакомые способы написания разметки, включая написание значений атрибутов без кавычек. Это допустимо при определённых условиях, но разрушит вашу разметку при других. Например, возвращаясь к нашему упражнению с гиперссылкой, мы можем написать основной вариант только с атрибутом <code>href</code> так:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><a href="https://www.mozilla.org/">любимый веб-сайт</a>\n</pre>
      </div>
      \n
      <p>Однако, как только мы добавим атрибут <code>title</code> в таком же стиле, мы поступим неверно:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><a href="https://www.mozilla.org/" title="The" mozilla="" homepage="">favorite website</a>\n</pre>
      </div>
      \n
      <p>В этом месте браузер неверно истолкует вашу разметку, думая, что атрибут <code>title</code> — это на самом деле три разных атрибута — атрибут title со значением "The" и два булевых атрибута: <code>Mozilla</code> и <code>homepage</code>. Это, очевидно, не то, что имелось в виду, и приведёт к ошибке или неожиданному поведению кода, как это показано в живом примере ниже. Попробуйте навести курсор на ссылку, чтобы увидеть, на что похож текст title!</p>
      <div class="code-example" id="sect15">
         <div class="example-header" id="sect16"></div>
      </div>
      \n
      <p>Наш совет: всегда используйте кавычки в атрибутах — это позволит избежать подобных проблем, и, следовательно, код будет более читабельным.</p>
   </div>
</section>
<section aria-labelledby="одинарные_или_двойные_кавычки">
   <h3 id="одинарные_или_двойные_кавычки"><a>Одинарные или двойные кавычки?</a></h3>
   <div class="section-content">
      <p>В этой статье вы заметите, что все атрибуты заключены в двойные кавычки. Однако, вы можете видеть одинарные кавычки в HTML документах других людей. Это исключительно дело вкуса, и вы можете свободно выбирать, какие из них предпочитаете. Обе следующие строки эквивалентны:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><a href="http://www.example.com">Ссылка к моему примеру.</a>\n\n<a href="http://www.example.com">Ссылка к моему примеру.</a>\n</pre>
      </div>
      \n
      <p>Если вы используете один тип кавычек в своём HTML, то вы можете поместить внутрь их кавычки другого типа, не вызывая никаких проблем:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><a href="http://www.example.com" title="Isn\'t this fun?">A link to my example.</a>\n</pre>
      </div>
      \n
      <p>Если вы хотите вставить кавычки того же типа, то вы должны использовать <a aria-current="page">объекты HTML</a>. Например, это работать не будет:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><a href="http://www.example.com" title="Isn" t="" this="" fun?\'="">A link to my example.</a>\n</pre>
      </div>
      \n
      <p>Поэтому вам нужно сделать так:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><a href="http://www.example.com" title="Isn\'t this fun?">A link to my example.</a>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="структура_html_документа">
   <h3 id="структура_html_документа"><a>Структура HTML документа</a></h3>
   <div class="section-content">
      <p>Ниже дан пример оборачивания основных, самостоятельных HTML-элементов, которые сами по себе не очень полезны. Давайте посмотрим, как самостоятельные элементы объединяются для формирования всей HTML страницы:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup">\n    <meta charset="utf-8">\n    <title>Тестовая страница</title>\n<p>Это — моя страница</p>\n\n</pre>
      </div>
      \n
      <p>Вот что мы имеем:</p>
      \n
      <ol>
         \n  
         <li>
            <code>&lt;!DOCTYPE html&gt;</code>: Объявление типа документа. Очень давно, ещё когда HTML был молод (1991/2), типы документов использовались в качестве ссылок на набор правил, которым HTML-страница должна была следовать, чтобы она считалась хорошей, что может означать автоматическую проверку ошибок и другие полезные вещи
            Однако в наши дни никто особо не думает о них, и типы документа стали историческим артефактом, которые должны быть включены везде, чтобы всё работало правильно. <code>&lt;!DOCTYPE html&gt;</code> — это самый короткий вид типа документа, который считается действующим. На самом деле это всё, что нужно вам знать о типах документов .\n  
         </li>
         \n  
         <li><code>&lt;html&gt;&lt;/html&gt;</code>: Элемент <a><code>&lt;html&gt;</code></a> содержит в себе всё содержимое на всей странице, и иногда его называют "корневой элемент".</li>
         \n  
         <li><code>&lt;head&gt;&lt;/head&gt;</code>: Элемент <a><code>&lt;head&gt;</code></a>. Данный элемент выступает в качестве контейнера для всего содержимого, которое вы хотите включить в HTML документ, но не хотите показывать посетителям вашей страницы. Он включает такие вещи, как ключевые слова и описание страницы, которые вы хотели бы показывать в поисковых запросах, CSS для стилизирования вашего контента, объявление поддерживаемого набора символов и многое другое. Вы узнаете больше об этом из следующей статьи данного руководства.</li>
         \n  
         <li><code>&lt;meta charset="utf-8"&gt;</code>: Этот элемент устанавливает в качестве символьной кодировки для вашего документа utf-8 , который включает большинство символов из всех известных человечеству языков. По существу, теперь страница сможет отобразить любой текстовый контент, который вы сможете в неё вложить. Нет причин не устанавливать эту кодировку, это также позволит избежать некоторых проблем позднее.</li>
         \n  
         <li><code>&lt;title&gt;&lt;/title&gt;</code>: Элемент <a><code>&lt;title&gt;</code></a>. Этот элемент устанавливает заголовок вашей страницы, который появляется во вкладке браузера, загружающей эту страницу, также это заглавие используется при описании страницы, когда вы сохраняете её в закладках или избранном.</li>
         \n  
         <li><code>&lt;body&gt;&lt;/body&gt;</code>: Элемент <a><code>&lt;body&gt;</code></a>. Он содержит <em>весь</em> контент, который вы хотите показывать посетителям вашей страницы, — текст, изображения, видео, игры, проигрываемые аудио дорожки или что-то ещё.</li>
         \n
      </ol>
   </div>
</section>
<section aria-labelledby="активное_изучение_добавление_элементов_в_ваш_html-документ">
   <h3 id="активное_изучение_добавление_элементов_в_ваш_html-документ"><a>Активное изучение: Добавление элементов в ваш HTML-документ</a></h3>
   <div class="section-content">
      <p>Если вы хотите поэкспериментировать с написанием HTML на своём компьютере, то можете:</p>
      \n
      <ol>
         \n  
         <li>Скопировать пример HTML-страницы, расположенный выше.</li>
         \n  
         <li>Создать новый файл в текстовом редакторе.</li>
         \n  
         <li>Вставить код в ваш новый текстовый файл.</li>
         \n  
         <li>Сохранить файл как <code>index.html</code>.</li>
         \n
      </ol>
      \n
      <div class="notecard note" id="sect17">
         \n  
         <p><strong>Примечание:</strong> вы также можете найти этот базовый пример HTML на <a class="external" target="_blank">MDN Learning Area Github repo</a>.</p>
         \n
      </div>
      \n
      <p>Теперь можете открыть браузер и посмотреть, во что отрисовался код, а потом изменить его, обновить страницу и посмотреть, что получилось. Сначала страница выглядит так:</p>
      \n
      <p>\n  \n  Для этого упражнения вы можете редактировать код локально на своём компьютере, как предлагается выше, а можете работать в редакторе, расположенном ниже. В редакторе показано только содержимое элемента <a><code>&lt;body&gt;</code></a>. Попробуйте сделать следующее:\n</p>
      \n
      <ul>
         \n  
         <li>Добавьте заголовок страницы сразу за открывающим тегом <a><code>&lt;body&gt;</code></a>. Текст должен находиться между открывающим тегом <code>&lt;h1&gt;</code> и закрывающим <code>&lt;/h1&gt;</code> .</li>
         \n  
         <li>Напишите в параграфе о чём-нибудь, что кажется вам интересным.</li>
         \n  
         <li>Выделите важные слова, обернув их в открывающий тег <code>&lt;strong&gt;</code> и закрывающий <code>&lt;/strong&gt;</code></li>
         \n  
         <li>Добавьте ссылку на свой абзац так, как <a aria-current="page">объяснено ранее в статье</a>.</li>
         \n  
         <li>Добавьте изображение в свой документ под абзацем, как <a aria-current="page">объяснено ранее в статье</a>. Если сможете использовать другую картинку (со своего компьютера или из интернета). Вы большой молодец!</li>
         \n
      </ul>
      
   </div>
</section>
<section aria-labelledby="пробелы_в_html">
   <h3 id="пробелы_в_html"><a>Пробелы в HTML</a></h3>
   <div class="section-content">
      <p>Вы могли заметить, что в примерах кода из этой статьи много пробелов. Это вовсе не обязательно — следующие два примера эквивалентны:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Собаки глупы.</p>\n<p>Собаки глупы.</p>\n</pre>
      </div>
      \n
      <p>Не важно, сколько пустого места вы используете в разметке (что может включать пробелы и сдвиги строк): браузер при анализе кода сократит всё пустое место до одного пробела. Зачем использовать много пробелов? Ответ: это доступность для понимания — гораздо легче разобраться, что происходит в вашем коде, если он удобно отформатирован, а не просто собран вместе в одном большом беспорядке. В нашем коде каждый вложенный элемент сдвинут на два пробела относительно элемента, в котором он находится. Вы можете использовать любое форматирование (в частности, количество пробелов для отступа), но лучше придерживаться одного стиля.</p>
   </div>
</section>
<section aria-labelledby="ссылки_на_сущности_включение_специальных_символов_в_html">
   <h3 id="ссылки_на_сущности_включение_специальных_символов_в_html"><a>Ссылки на сущности: Включение специальных символов в HTML</a></h3>
   <div class="section-content">
      <p>В HTML символы <code>&lt;</code>, <code>&gt;</code>, <code>"</code>, <code>\'</code> и <code>&amp;</code> являются специальными. Они являются частью самого синтаксиса HTML. Так как же включить в текст один из этих специальных символов? Например, если вы хотите использовать амперсанд или знак «меньше» и не интерпретировать его как код.</p>
      \n
      <p>Мы должны использовать ссылки-мнемоники — специальные коды, которые отображают спецсимволы, и могут быть использованы в необходимых позициях. Каждая ссылка-мнемоник начинается с амперсанда (&amp;) и завершается точкой с запятой (;).</p>
      \n\n
      <p>В следующем примере вы видите два абзаца, которые рассказывают о веб-технологиях:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>В HTML вы определяете параграф элементом </p>\n<p>.</p>\n<p>В HTML вы определяете параграф элементом &lt;p&gt;.</p>\n</pre>
      </div>
      \n
      <p>В живом выводе ниже вы можете заметить, что первый абзац выводится неправильно, так как браузер считает, что второй элемент <code>&lt;p&gt;</code> является началом нового абзаца! Второй абзац нашего кода выводится правильно, потому что мы заменили угловые скобки на ссылки-мнемоники.</p>
      \n
      <div class="notecard note" id="sect22">
         \n  
         <p><strong>Примечание:</strong> Таблица всех доступных в HTML символов-мнемоников — в Википедии: <a class="external" target="_blank">List of XML and HTML character entity references</a>.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="html_комментарии">
   <h3 id="html_комментарии"><a>HTML комментарии</a></h3>
   <div class="section-content">
      <p>В HTML, как и в большинстве языков программирования, есть возможность писать комментарии в коде. Комментарии игнорируются обозревателем и не видны пользователю, их добавляют для того, чтобы пояснить, как работает написанный код, что делают отдельные его части и т. д. Такая практика полезна, если вы возвращаетесь к коду, который давно не видели или когда хотите передать его кому-то другому.</p>
      \n
      <p>Чтобы превратить часть содержимого HTML-файла в комментарий, нужно поместить её в специальные маркеры <code>&lt;!--</code> и <code>--&gt;</code>, например:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Меня нет в комментариях(</p>\n<!-- <p>А теперь есть!</p> -->\n</pre>
      </div>
      \n
   </div>
</section>
<section aria-labelledby="подведение_итогов">
   <h3 id="подведение_итогов"><a>Подведение итогов</a></h3>
   <div class="section-content">
      <p>Вы дошли до конца статьи — надеемся, вам понравилось путешествие по основам HTML. На этом этапе вы уже должны немного разобраться, как выглядит язык, как он работает на базовом уровне и уметь описать несколько элементов и атрибутов. Сейчас идеальное время и место, чтобы продолжить изучать HTML. В последующих статьях мы рассмотрим некоторые из вещей, которые вы уже рассмотрели, но намного подробнее, а также представим некоторые новые функции языка. Оставайтесь с нами!</p>
      \n
      <div class="notecard note" id="sect25">
         \n  
         <p><strong>Примечание:</strong> Сейчас, когда вы начинаете больше узнавать о HTML, вы также можете начать изучать основы каскадных таблиц стилей Cascading Style Sheets, или <a>CSS</a>. CSS — это язык, который используется для стилизации веб-страниц (например, изменение шрифта или цветов или изменение макета страницы). Как вы скоро поймёте, HTML и CSS созданы друг для друга.</p>
         \n
      </div>
   </div>
</section>
`,
		works: [],
	},
	{
		book: 'HTML',
		title: 'Что внутри "head" Метаданные в HTML',

		content: `<header>
   <h1>Что внутри "head"? Метаданные в HTML</h1>
</header>
<div class="section-content">
   \n
   <p>Элемент <a>head</a> HTML-документа не отображается на странице в веб-браузере. Он содержит такую информацию, как:</p>
   \n
   <ul>
      \n  
      <li><a>заголовок (title)</a> страницы</li>
      \n  
      <li>ссылки на файлы <a>CSS</a> (если вы хотите применить к вашему HTML стили CSS)</li>
      \n  
      <li>ссылки на иконки</li>
      \n  
      <li>другие метаданные (данные о HTML: автор и важные ключевые слова, описывающие документ.)</li>
      \n
   </ul>
   \n
   <p>В этой статье мы рассмотрим всё вышеперечисленное и многое другое, чтобы дать вам хорошую основу для работы с разметкой.</p>
   \n
</div>
<section aria-labelledby="что_такое_head">
   <h3 id="что_такое_head"><a>Что такое &lt;head&gt;?</a></h3>
   <div class="section-content">
      <p>Давайте снова посмотрим на <a>HTML-документ из прошлой статьи</a>:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><meta charset="utf-8">\n    <title>Моя тестовая страница</title>\n<p>Это — моя страница</p>\n  \n\n</pre>
      </div>
      \n
      <p>Содержимое <a><code>&lt;head&gt;</code></a>, в отличие от содержимого элемента <a><code>&lt;body&gt;</code></a>, не отображается на странице. Задача &lt;head&gt; — хранить <a>метаданные</a> документа. В приведённом выше примере &lt;head&gt; совсем небольшой:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup">\n  <meta charset="utf-8">\n  <title>Моя тестовая страница</title>\n\n</pre>
      </div>
      \n
      <p>Однако на больших страницах блок &lt;head&gt; может быть довольно объёмным. Попробуйте зайти на какие-нибудь из ваших любимых сайтов и посмотреть содержимое &lt;head&gt; с помощью <a>инструментов разработчика</a>. Наша цель сейчас — не в том, чтобы показать вам, как использовать всё, что только можно добавить в head, а дать представление и научить вас, как использовать основные элементы. Давайте начнём.</p>
   </div>
</section>
<section aria-labelledby="название_страницы_title">
   <h3 id="название_страницы_title"><a>Название страницы (title)</a></h3>
   <div class="section-content">
      <p>Мы уже видели, как работает элемент <a><code>&lt;title&gt;</code></a>: его используют для добавления заголовка (названия страницы) в документ. Элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> тоже иногда называют заголовком страницы. Но это разные вещи!</p>
      \n
      <ul>
         \n  
         <li>Элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> виден на странице, открытой в браузере, — его используют <strong>один раз на странице</strong>, чтобы выделить название содержимого. Это может быть название истории, заголовок новости или что-то в этом роде.</li>
         \n  
         <li>Элемент <a><code>&lt;title&gt;</code></a> — метаданные, название всего HTML-документа, а не заголовок внутри его содержимого.</li>
         \n
      </ul>
   </div>
</section>
<section aria-labelledby="активное_изучение_разбор_простого_примера">
   <h3 id="активное_изучение_разбор_простого_примера"><a>Активное изучение: разбор простого примера</a></h3>
   <div class="section-content">
      <ol>
         \n  
         <li>
            Чтобы приступить к активному изучению, скачайте страницу <a class="external" target="_blank">title-example.html</a> из нашего GitHub-репозитория. Это можно сделать двумя способами:\n    
            <ol>
               \n      
               <li>Скопируйте и вставьте код страницы в новый текстовый файл в своём редакторе кода, затем сохраните его в любом удобном месте.</li>
               \n      
               <li>Нажмите на странице кнопку "Raw", нажмите <em>Файл &gt; Сохранить Как...</em> в меню браузера и выберите папку для сохранения.</li>
               \n    
            </ol>
            \n  
         </li>
         \n  
         <li>\n    Откройте файл в браузере. Вы увидите что-то вроде этого:\n    \n    Теперь должно стать совершенно ясно, в чём разница между <code>&lt;h1&gt;</code> и <code>&lt;title&gt;</code>!\n  </li>
         \n  
         <li>Откройте код страницы в редакторе, измените содержимое элементов и обновите страницу в браузере. Развлекайтесь!</li>
         \n
      </ol>
      \n
      <p>Содержимое элемента <code>&lt;title&gt;</code> используется и в других местах. Например, при добавлении страницы в избранное (<em>Bookmarks &gt; Bookmark This Page</em> в Firefox), текст из <code>&lt;title&gt;</code> предлагается в качестве названия закладки.</p>
      \n
      <p>\n  \n</p>
      \n
      <p>Текст из <code>&lt;title&gt;</code> также появляется в результатах поиска, как мы скоро увидим.</p>
   </div>
</section>
<section aria-labelledby="метаданные_элемент_meta">
   <h3 id="метаданные_элемент_meta"><a>Метаданные: Элемент &lt;meta&gt;</a></h3>
   <div class="section-content">
      <p>Метаданные — данные, которые описывают данные. У HTML есть «официальное» место для метаданных документа — элемент <a><code>&lt;meta&gt;</code></a>. Конечно, другие вещи, о которых мы говорим в этой статье, тоже можно назвать метаданными. Существует множество разновидностей <code>&lt;meta&gt;</code>. Не станем пытаться охватить их все сразу — так недолго и запутаться, а рассмотрим несколько самых популярных, чтобы разобраться, что к чему.</p>
   </div>
</section>
<section aria-labelledby="указываем_кодировку_текста_документа">
   <h3 id="указываем_кодировку_текста_документа"><a>Указываем кодировку текста документа</a></h3>
   <div class="section-content">
      <p>В заголовке примера выше есть следующая строка:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><meta charset="utf-8">\n</pre>
      </div>
      \n
      <p>В этом элементе указана кодировка документа — набор символов, которые в нём можно использовать . <code>utf-8</code> — универсальный набор символов, который включает почти все символы со всех языков человечества. Такая веб-страница сможет работать с любым языком. Установить эту кодировку на всех веб-страницах, которые вы создаёте — отличная идея! Страница в такой кодировке прекрасно отображает как английские, так и японские символы:</p>
      \n
      <p>\n  Если использовать, скажем, кодировку <code>ISO-8859-1</code> (набор символов для латиницы), текст страницы испортится:\n</p>
      \n
      <p>\n  \n</p>
      \n
      <div class="notecard note" id="sect1">
         \n  
         <p><strong>Примечание:</strong> Некоторые браузеры (например, Chrome) автоматически исправляют неправильную кодировку, поэтому, в зависимости от используемого вами браузера, вы можете не увидеть эту проблему. Несмотря на это вам всё равно необходимо указывать кодировку UTF-8 для вашей страницы, чтобы избежать возможных проблем в других браузерах.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="активное_изучение_экспериментируем_с_символьными_кодировками">
   <h3 id="активное_изучение_экспериментируем_с_символьными_кодировками"><a>Активное изучение: экспериментируем с символьными кодировками</a></h3>
   <div class="section-content">
      <p>Чтобы проверить это, вернитесь к HTML из примера <code>&lt;title&gt;</code> (странице <a class="external" target="_blank">title-example.html</a>), поменяйте meta charset на <code>ISO-8859-1</code> и попробуйте написать что-нибудь на японском или русском. Вот текст из нашего примера (кстати, там написано <em>«рис горячий»</em>):</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Пример на японском: ご飯が熱い。</p>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="указываем_автора_и_описание">
   <h3 id="указываем_автора_и_описание"><a>Указываем автора и описание</a></h3>
   <div class="section-content">
      <p>У элементов <code>&lt;meta&gt;</code> часто есть атрибуты <code>name</code> и <code>content</code>:</p>
      \n
      <ul>
         \n  
         <li><code>name</code> — тип элемента, то есть какие именно метаданные он содержит.</li>
         \n  
         <li><code>content</code> — сами метаданные.</li>
         \n
      </ul>
      \n
      <p>Два полезных элемента метаданных — указание автора страницы и краткое описание её содержимого. Рассмотрим эти элементы на примере:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><meta name="author" content="Крис Миллс">\n<meta name="description" content="Задача MDN — в том, чтобы обучить\nновичков всему тому, что нужно им для разработки веб-сайтов и приложений.">\n</pre>
      </div>
      \n
      <p>По указанному имени автора (author) можно найти человека, который написал страницу, и связаться с ним. Некоторые системы управления содержимым (CMS) автоматически обрабатывают эту информацию и делают её доступной для таких целей.</p>
      \n
      <p>Краткое описание (description) содержимого страницы учитывается поисковыми системами при совпадении ключевых слов. Такое называют <a>поисковой оптимизацией</a>, или <a>SEO</a>.</p>
   </div>
</section>
<section aria-labelledby="активное_изучение_как_поисковые_системы_используют_описание">
   <h3 id="активное_изучение_как_поисковые_системы_используют_описание"><a>Активное изучение: как поисковые системы используют описание</a></h3>
   <div class="section-content">
      <p>Описание из <code>&lt;meta name="description"&gt;</code> используется на страницах поисковой выдачи. Проведём небольшое исследование такого сценария.</p>
      \n
      <ol>
         \n  
         <li>Перейдите на <a>главную страницу Mozilla Developer Network</a>.</li>
         \n  
         <li>Откройте исходный код страницы (кликните правой кнопкой мыши и выберите <em>Просмотреть код</em> в контекстном меню.)</li>
         \n  
         <li>
            Найдите тег meta с описанием. Он выглядит так:\n    
            <div class="code-example">
               <div class="example-header"></div>
               <pre compile="false" disable="true" language="markup"><meta name="description" content="Веб-документация на MDN\nпредоставляет собой информацию об открытых веб-технологиях,\nвключая HTML, CSS и различные API для веб-сайтов и\nпрогрессивных веб-приложений. Также на сайте содержатся материалы\nдля разработчиков о таких продуктах Mozilla, как Инструменты разработчика Firefox.">\n</pre>
            </div>
            \n  
         </li>
         \n  
         <li>Теперь найдите "Mozilla Developer Network" в своём поисковике (мы использовали Google). Обратите внимание, что описание и название из <code>&lt;meta&gt;</code> и <code>&lt;title&gt;</code> используется в результатах поиска, — мы не зря указали их!</li>
         \n
      </ol>
      \n
      <p>\n  \n</p>
      \n
      <div class="notecard note" id="sect2">
         \n  
         <p><strong>Примечание:</strong> Google также показывает важные страницы MDN под ссылкой на главную страницу. Такие ссылки называются sitelinks, и их можно настроить через <a class="external" target="_blank">Google Search Console</a>, чтобы пользователи могли сразу перейти к ним со страницы поиска.</p>
         \n
      </div>
      \n
      <div class="notecard note" id="sect3">
         \n  
         <p><strong>Примечание:</strong> Многие типы <code>&lt;meta&gt;</code> больше не используются. Так, поисковые системы больше не используют данные из элемента <code>&lt;meta type="keywords" content="ваши, ключевые, слова, введите, здесь"&gt;</code>, в котором указывали ключевые слова, по которым можно найти страницу: спамеры засовывали туда все слова, какие могли придумать, чтобы их сайты почаще появлялись в поиске.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="другие_виды_метаданных">
   <h3 id="другие_виды_метаданных"><a>Другие виды метаданных</a></h3>
   <div class="section-content">
      <p>В сети вы найдёте также другие типы метаданных. Многие из них — это собственные форматы, созданные для предоставления определённым сайтам (например, социальных сетей) специальной информации, которую они могут использовать.</p>
      \n
      <p>Например, <a class="external" target="_blank">Протокол Open Graph</a> создан Facebook чтобы предоставить сайтам дополнительные возможности использования метаданных. В исходном коде MDN Web Docs вы можете найти строки:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><meta property="og:image" content="https://developer.mozilla.org/mdn-social-share.png">\n<meta property="og:description" content="Веб-документация на MDN предоставляет\nсобой информацию об открытых веб-технологиях, включая HTML, CSS и различные API для веб-сайтов\nи прогрессивных веб-приложений. Также на сайте содержатся материалы для разработчиков о таких\nпродуктах Mozilla, как Инструменты разработчика Firefox.">\n<meta property="og:title" content="MDN Web Docs">\n</pre>
      </div>
      \n
      <p>Один из результатов добавления этих метаданных в том, что когда вы добавите ссылку MDN Web Docs на facebook, она отобразится с изображением и описанием, улучшая опыт взаимодействия _<a class="external" target="_blank">(User eXperience, UX</a>)_.</p>
      \n
      <p>\n  У Twitter также есть собственный формат метаданных, с помощью которого создаётся аналогичный эффект, при отображении URL сайта на twitter.com:\n</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><meta name="twitter:title" content="MDN Web Docs">\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="добавление_иконок">
   <h2 id="добавление_иконок"><a>Добавление иконок</a></h2>
   <div class="section-content">
      <p>Чтобы добавить своему сайту узнаваемости, можно указать в метаданных разные иконки.</p>
      \n
      <p><a class="external" target="_blank">Favicon</a>, один из старожилов интернета, стал первой из таких иконок. Браузеры показывают её в заголовке вкладки и в списке избранных страниц.\n  \n</p>
      \n
      <p>Чтобы добавить на страницу favicon:</p>
      \n
      <ol>
         \n  
         <li>Сохраните изображение в формате <code>.ico</code> (многие браузеры поддерживают и в более привычных форматах, таких как <code>.gif</code> или <code>.png</code>) в папку со своим документом. Старые браузеры, например, Internet Explorer 6, поддерживают только формат <code>.ico</code></li>
         \n  
         <li>
            Добавьте ссылку на иконку в <code>&lt;head&gt;</code> документа:\n    
            <div class="code-example">
               <div class="example-header"></div>
               <pre compile="false" disable="true" language="markup"><link rel="shortcut icon" href="favicon.ico" type="image/x-icon">\n</pre>
            </div>
            \n  
         </li>
         \n
      </ol>
      \n
      <p>Для разных устройств можно указывать разные иконки. Например, на главной странице MDN:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><!-- Для iPad 3 с Retina-экраном высокого разрешения: -->\n<link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://developer.mozilla.org/static/img/favicon144.png">\n<!-- Для iPhone с Retina-экраном высокого разрешения: -->\n<link rel="apple-touch-icon-precomposed" sizes="114x114" href="https://developer.mozilla.org/static/img/favicon114.png">\n<!-- Для iPad первого и второго поколения: -->\n<link rel="apple-touch-icon-precomposed" sizes="72x72" href="https://developer.mozilla.org/static/img/favicon72.png">\n<!-- Для iPhone, iPod Touch без Retina и устройств с Android 2.1+: -->\n<link rel="apple-touch-icon-precomposed" href="https://developer.mozilla.org/static/img/favicon57.png">\n<!-- Для других случаев - обычный favicon -->\n<link rel="shortcut icon" href="https://developer.mozilla.org/static/img/favicon32.png">\n</pre>
      </div>
      \n
      <p>В комментариях указано, для чего используется каждая иконка — например, при добавлении страницы на домашний экран iPad будет использована иконка в высоком разрешении.</p>
      \n
      <p>Не беспокойтесь о реализации всех этих типов значков — это довольно продвинутая функция, и мы не станем возвращаться к ней в курсе. Основная цель — показать вам, что это такое, если вы столкнётесь с ними при просмотре исходного кода других веб-сайтов.</p>
   </div>
</section>
<section aria-labelledby="подключение_css_и_javascript">
   <h3 id="подключение_css_и_javascript"><a>Подключение CSS и JavaScript</a></h2>
   <div class="section-content">
      <p>Современные сайты используют <a>CSS</a>, чтобы выглядеть привлекательнее, и добавляют интерактивные функции через <a>JavaScript</a>: видеоплееры, карты, игры. Обычно связанные стили добавляют на страницу через элемент <a><code>&lt;link&gt;</code></a>, а скрипты — через элемент <a><code>&lt;script&gt;</code></a> .</p>
      \n
      <ul>
         \n  
         <li>
            Элемент <a><code>&lt;link&gt;</code></a> помещают в заголовок документа. У него есть два атрибута: <code>rel="stylesheet"</code> показывает, что мы указываем <em>стиль</em> документа, а в <code>href</code> указан путь к файлу:\n    
            <div class="code-example">
               <div class="example-header"></div>
               <pre compile="false" disable="true" language="markup"><link rel="stylesheet" href="my-css-file.css">\n</pre>
            </div>
            \n  
         </li>
         \n  
         <li>
            Элемент <a><code>&lt;script&gt;</code></a> не обязательно находится в заголовке — на самом деле лучше поместить его в самом конце страницы, прямо перед закрывающем тегом <code>&lt;/body&gt;</code>. Так браузер сначала отобразит саму страницу, а уже затем загрузит и запустит скрипт — иначе скрипт может обратиться к ещё не созданному элементу страницы и сломаться.\n    
            <div class="code-example">
               <div class="example-header"></div>
               <pre compile="false" disable="true" language="markup">'<sсript src="my-js-file.js"></sсript>\n</pre>
            </div>
            <strong>Примечание</strong>: Элемент <code>&lt;script&gt;</code> кажется пустым, но это не всегда так, и указывать закрывающий тег обязательно. Вместо того чтобы ссылаться на внешний скрипт, код можно писать прямо внутри этого элемента — так можно не тратить время на загрузку отдельного скрипта, но зато не выйдет сослаться на один js-файл с нескольких страниц.\n  
         </li>
         \n
      </ul>
   </div>
</section>
<section aria-labelledby="активное_изучение_добавляем_на_страницу_css_и_javascript">
   <h3 id="активное_изучение_добавляем_на_страницу_css_и_javascript"><a>Активное изучение: добавляем на страницу CSS и JavaScript</a></h3>
   <div class="section-content">
      <ol>
         \n  
         <li>Для этого упражнения скачайте файлы <a class="external" target="_blank">meta-example.html</a>, <a class="external" target="_blank">script.js</a> и <a class="external" target="_blank">style.css</a> и положите их в одну папку на своём компьютере. Проверьте, что они сохранились с правильными именами и расширениями.</li>
         \n  
         <li>Откройте HTML в браузере и текстовом редакторе.</li>
         \n  
         <li>Следуя изученному материалу, добавьте на страницу скрипт и стиль с помощью элементов <a><code>&lt;link&gt;</code></a> и <a><code>&lt;script&gt;</code></a>.</li>
         \n
      </ol>
      \n
      <p>Если всё получилось, когда вы сохраните HTML и обновите страницу в браузере, вы увидите кое-что новенькое:</p>
      \n
      <p>\n  \n</p>
      \n
      <ul>
         \n  
         <li>JavaScript добавил на страницу пустой список. При нажатии на красную область появляется окно, в которое можно ввести текст нового пункта списка. При нажатии на кнопку OK пункт добавляется на страницу. Текст существующих пунктов списка можно редактировать, нажимая на них.</li>
         \n  
         <li>CSS покрасил фон зелёным и увеличил размер шрифта, а также стилизовал элементы, добавленные JavaScript. Красный прямоугольник и рамка вокруг списка — тоже его рук дело.</li>
         \n
      </ul>
      \n
      <div class="notecard note" id="sect4">
         \n  
         <p><strong>Примечание:</strong> Если вам никак не удаётся подключить CSS или JS, посмотрите на наш готовый пример — страницу <a class="external" target="_blank">css-and-js.html</a>.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="основной_язык_html_страницы">
   <h3 id="основной_язык_html_страницы"><a>Основной язык HTML страницы</a></h3>
   <div class="section-content">
      <p>Наконец, стоит отметить, что вы можете (и действительно должны) установить язык для своей страницы. Это можно сделать, добавив <a>атрибут lang</a> в открывающий HTML-тег (как в примере <a class="external" target="_blank">meta-example.html</a>: и как показано ниже):</p>
      \n
      <pre compile="false" disable="true" language="markup"><htnl lang="en">
</pre>
      \n
      <pre compile="false" disable="true" language="markup"><htnl lang="ru">
</pre>
      \n
      <p>Это полезно во многих случаях. Ваш HTML-документ будет более эффективно индексироваться поисковыми системами, если его язык установлен (что позволяет ему правильно отображаться в языковых результатах), и он полезен людям с нарушением зрения, которые используют программы, читающие страницы вслух (например, слово "шесть" пишется одинаково как на французском, так и на английском языках, но произносится по-разному.).</p>
      \n
      <p>Можно также указать язык для части документа. Например, мы могли бы установить язык для части страницы на японском:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Пример на японском: <span lang="ja">ご飯が熱い。</span>.</p>\n</pre>
      </div>
      \n
      <p>Коды языков определены в стандарте <a class="external" target="_blank">ISO 639-1</a>. Подробнее о работе с языками можно узнать в <a class="external" target="_blank">Языковые тэги в HTML и XML</a>.</p>
   </div>
</section>
<section aria-labelledby="заключение">
   <h3 id="заключение"><a>Заключение</a></h3>
   <div class="section-content">
      <p>На этом заканчивается наш беглый обзор по HTML-блоку head — с его помощью вы можете делать гораздо больше, но исчерпывающий обзор будет скучным и запутанным на этом этапе, мы же сейчас хотели дать вам представление о самых распространённых вещах, которые вы можете там найти! В следующей статье мы рассмотрим основы разметки текста в HTML.</p>
   </div>
</section>
`,
		works: [],
	},
	{
		book: 'HTML',
		title: 'Основы редактирования текста в HTML',

		content: `<header>
   <h1>Основы редактирования текста в HTML</h1>
</header>
<div class="section-content">
   \n
   <p>Одна из основных задач HTML — придавать тексту структуру и смысл, <a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!">семантику</a>, так, чтобы браузер смог отобразить текст корректно. Эта статья покажет, как можно использовать <a>HTML</a>, чтобы упорядочить текст на странице путём добавления заголовков и абзацев, выделения слов, создания списков и многое другое.</p>
   \n
</div>
<section aria-labelledby="основы_заголовки_и_абзацы_параграфы">
   <h2 id="основы_заголовки_и_абзацы_параграфы"><a>Основы: Заголовки и абзацы / параграфы</a></h2>
   <div class="section-content">
      <p>Большинство структурированных текстов состоят из параграфов и заголовков, независимо от того, читаете ли вы рассказ, или газету, или учебник, журнал и т.д.</p>
      \n
      <p>\n  \n</p>
      \n
      <p>Упорядоченный контент делает чтение более лёгким и приятным.</p>
      \n
      <p>В HTML каждый абзац заключён в элемент <a><code>&lt;p&gt;</code></a>, подобно:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Я параграф, да, это я.</p>\n</pre>
      </div>
      \n
      <p>Каждый заголовок заключён в элемент заголовка <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a>:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><h1>Я заголовок истории.</h1>\n</pre>
      </div>
      \n
      <p>Имеется шесть элементов заголовка: <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h2&gt;</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h3&gt;</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h4&gt;</code> <small>(en-US)</small></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h5&gt;</code> <small>(en-US)</small></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h6&gt;</code> <small>(en-US)</small></a>. Каждый элемент представляет разный уровень контента в документе; <code>&lt;h1&gt;</code> представляет главный заголовок, <code>&lt;h2&gt;</code> представляет подзаголовки, <code>&lt;h3&gt;</code> представляет под-подзаголовки и так далее.</p>
   </div>
</section>
<section aria-labelledby="создание_иерархической_структуры">
   <h3 id="создание_иерархической_структуры"><a>Создание иерархической структуры</a></h3>
   <div class="section-content">
      <p>Например, в рассказе <code>&lt;h1&gt;</code> будет представлять заглавие рассказа, <code>&lt;h2&gt;</code> обозначит название каждой главы, <code>&lt;h3&gt;</code> будет обозначать подзаголовки в каждой главе и так далее.</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><h1>Сокрушительная скука</h1>\n\n<p>Крис Миллс</p>\n\n<h2>Глава 1: Тёмная ночь</h2>\n\n<p>Это была тёмная ночь. Где-то кричала сова. Дождь обрушился на ...</p>\n\n<h2>Глава 2: Вечное молчание</h2>\n\n<p>Наш главный герой ничего не мог, когда шёпот из тёмной фигуры ...</p>\n\n<h3>Призрак говорит</h3>\n\n<p>\n  Прошло ещё несколько часов, когда внезапно призрак выпрямился и воскликнул:\n  «Пожалуйста, помилуй мою душу!»\n</p>\n</pre>
      </div>
      \n
      <p>Всё это действительно зависит от вас — что именно будут представлять собой элементы, пока существует иерархия. Вам просто нужно иметь в виду несколько хороших правил при создании таких структур.</p>
      \n
      <ul>
         \n  
         <li>Предпочтительнее использовать <code>&lt;h1&gt;</code> только один раз на странице — это заголовок самого верхнего уровня, и все остальные заголовки располагаются ниже его в иерархии.</li>
         \n  
         <li>Убедитесь, что вы используете заголовки в правильном порядке в иерархии. Не используйте <code>&lt;h3&gt;</code> для создания подзаголовков при одновременном использовании <code>&lt;h2&gt;</code> для представления под-подзаголовков — это не имеет смысла и приведёт к странным результатам.</li>
         \n  
         <li>Из шести доступных уровней заголовка вы должны стремиться использовать не более трёх на странице, если только вы не чувствуете, что это необходимо. Документы с большим количеством уровней (то есть с глубокой иерархией) становятся громоздкими и трудными для навигации. В таких случаях рекомендуется распределять контент по нескольким страницам, если это возможно.</li>
         \n
      </ul>
   </div>
</section>
<section aria-labelledby="зачем_нам_необходима_структура">
   <h3 id="зачем_нам_необходима_структура"><a>Зачем нам необходима структура?</a></h3>
   <div class="section-content">
      <p>Чтобы ответить на этот вопрос, давайте посмотрим на <a class="external" target="_blank">text-start.html</a> — отправную точку нашего примера для этой статьи (хороший рецепт хумуса). Вы должны сохранить копию этого файла на своём локальном компьютере, так как вам понадобится это для упражнений позже. Сейчас тело этого документа содержит несколько фрагментов контента — они не отмечены каким-либо образом, но они разделены разрывами строк (был нажат Enter / Return для перехода на следующую строку).</p>
      \n
      <p>Однако, когда вы откроете документ в своём браузере, вы увидите, что текст выглядит как один большой кусок!</p>
      \n
      <p>\n  \n</p>
      \n
      <p>Это связано с тем, что нет элементов для создания структуры контента, поэтому браузер не знает, где здесь заголовок и где абзац. Более того:</p>
      \n
      <ul>
         \n  
         <li>Пользователи, просматривающие веб-страницу, быстро сканируют её в поиске подходящего контента, часто просто просматривая только заголовки (мы обычно <a class="external" target="_blank">тратим очень мало времени на веб-странице</a>). Если они не смогут увидеть ничего полезного в течение нескольких секунд, они, скорее всего, расстроятся и отправятся куда-нибудь ещё.</li>
         \n  
         <li>Поисковые системы, индексирующие вашу страницу, считают содержание заголовков важными ключевыми словами для влияния на ранжирование поиска страницы. Без заголовков ваша страница будет плохо работать с точки зрения <a>SEO</a> (Search Engine Optimization — поисковая оптимизация).</li>
         \n  
         <li>Сильно слабовидящие люди часто не читают веб-страницы — они слушают их вместо этого. Это делается с помощью программного обеспечения, называемого <a class="external" target="_blank">программой чтения с экрана</a>. Это программное обеспечение предоставляет способы быстрого доступа к данному текстовому контенту. Среди различных используемых методов они предоставляют схему документа, считывая заголовки, позволяя своим пользователям быстро находить нужную им информацию. Если заголовки недоступны, они будут вынуждены слушать весь документ вслух.</li>
         \n  
         <li>Чтобы стилизовать контент с помощью <a>CSS</a> или сделать его интересным с помощью <a>JavaScript</a>, вам нужно, чтобы элементы обёртывали соответствующий контент, чтобы CSS и JavaScript смогли эффективно работать.</li>
         \n
      </ul>
      \n
      <p>Поэтому нужно дать структурную разметку нашему контенту.</p>
   </div>
</section>
<section aria-labelledby="активное_изучение_создание_структуры_для_нашего_контента">
   <h3 id="активное_изучение_создание_структуры_для_нашего_контента"><a>Активное изучение: создание структуры для нашего контента</a></h3>
   <div class="section-content">
      <p>Давайте рассмотрим это на живом примере. В приведённом ниже примере добавьте элементы в исходный текст в поле «Редактируемый код», чтобы он отображался как заголовок и два абзаца в поле «Результат».</p>
      \n
      <p>Если вы допустили ошибку, вы всегда можете сбросить её с помощью кнопки <em>Сбросить</em>. Если вы застряли, нажмите кнопку <em>Показать решение</em>, чтобы увидеть ответ.</p>
      \n
      <div class="code-example">
         <pre compile="true" disable="false" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 100px; width: 95%">Моя мини-история\nЯ полицейский, и моё имя Триш.\nМои ноги сделаны из картона, и мой муж — рыба.</input>\n
				 <style>body {\n  margin: 10px;\n  background: #f5f9fa;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 6em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}</sty></pre>
      </div>
      \n
   </div>
</section>
<section aria-labelledby="почему_мы_нуждаемся_в_семантике">
   <h3 id="почему_мы_нуждаемся_в_семантике"><a>Почему мы нуждаемся в семантике?</a></h3>
   <div class="section-content">
      <p>Семантика проявляется всюду вокруг нас — мы полагаемся на опыт, который рассказывает нам, какова функция бытовых предметов; когда мы что-то видим, мы знаем, какова его функция. Так, например, мы ожидаем, что красный свет на светофоре означает «стоп», а зелёный свет означает «идти». Жизнь станет очень сложной, если применяется неправильная семантика (какие-либо страны используют красный цвет для обозначения «идти»? Надеюсь, что нет.)</p>
      \n
      <p>В подобном ключе нам нужно убедиться, что мы используем правильные элементы, придавая нашему контенту правильное значение, функцию или внешний вид. В этом контексте элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;h1&gt;</code> <small>(en-US)</small></a> также является семантическим элементом, который даёт тексту, который он обёртывает, роль (или значение) «заголовка верхнего уровня на вашей странице».</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><h1>Это заголовок верхнего уровня</h1>\n</pre>
      </div>
      \n
      <p>По умолчанию браузер придаст ему большой размер шрифта, чтобы он выглядел как заголовок (хотя вы можете стилизовать его как угодно, используя CSS). Что ещё более важно, его семантическое значение будет использоваться несколькими способами, например, поисковыми системами и программами чтения с экрана (как упоминалось выше).</p>
      \n
      <p>С другой стороны, вы можете сделать любой элемент похожим на заголовок верхнего уровня. Рассмотрим следующее:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><span style="font-size: 32px; margin: 21px 0;">Это заголовок верхнего уровня?</span>\n</pre>
      </div>
      \n
      <p>Это элемент <a><code>&lt;span&gt;</code></a>. У него нет семантики. Вы используете его, когда хотите применить к контенту CSS (или сделать что-то с ним с помощью JavaScript), не придавая ему никакого дополнительного значения (об этом вы узнаете позже). Мы применили CSS, чтобы он выглядел как заголовок верхнего уровня, но поскольку он не имеет семантического значения, он не получит никаких дополнительных преимуществ, описанных выше. Рекомендуется использовать соответствующий элемент HTML на практике.</p>
   </div>
</section>
<section aria-labelledby="списки">
   <h2 id="списки"><a>Списки</a></h2>
   <div class="section-content">
      <p>Теперь обратим наше внимание на списки. Списки есть везде вокруг нас — от вашего списка покупок до списка направлений, которым вы подсознательно следуете, чтобы каждый день добраться домой, и списка инструкций, которые вы выполняете в этом руководстве! Списки используются всюду в Интернете, и мы рассмотрим три разных типа списков.</p>
   </div>
</section>
<section aria-labelledby="неупорядоченные">
   <h3 id="неупорядоченные"><a>Неупорядоченные</a></h3>
   <div class="section-content">
      <p>Неупорядоченные списки используются для элементов, для которых порядок не имеет значения, — возьмём, к примеру, список покупок:</p>
      \n
      <pre compile="false" disable="true" language="markup">молоко\nяйца\nхлеб\nхумус\n</pre>
      \n
      <p>Каждый неупорядоченный список начинается с элемента <a><code>&lt;ul&gt;</code></a> (<em>unordered list</em>) — он обёртывает все элементы списка: молоко, яйца, хлеб, хумус.</p>
      \n
      <p>Последний шаг состоит в том, чтобы обернуть каждый элемент списка в элемент <a><code>&lt;li&gt;</code></a> (элемент списка):</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><ul>\n  <li>молоко</li>\n  <li>яйца</li>\n  <li>хлеб</li>\n  <li>хумус</li>\n</ul>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="активное_изучение_разметка_неупорядоченного_списка">
   <h3 id="активное_изучение_разметка_неупорядоченного_списка"><a>Активное изучение: разметка неупорядоченного списка</a></h3>
   <div class="section-content">
      <p>Попробуйте отредактировать образец ниже, чтобы создать свой собственный неупорядоченный список HTML.</p>
      \n
      <div class="code-example">
         <pre compile="true" disable="false" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 100px; width: 95%">молоко\nяйца\nхлеб\nхумус</input>\n\n
				 <style>body {\n  margin: 10px;\n  background: #f5f9fa;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 6em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}</style></pre>
      </div>
      \n
   </div>
</section>
<section aria-labelledby="упорядоченные">
   <h3 id="упорядоченные"><a>Упорядоченные</a></h3>
   <div class="section-content">
      <p>Упорядоченные списки — это списки, в которых порядок элементов имеет значение, — возьмём в качестве примера маршрут следования:</p>
      \n
      <pre compile="false" disable="true" language="markup">Двигайтесь до конца дороги\nПоверните направо\nЕзжайте прямо через первые два перекрёстка с круговым движением\nПоверните налево на третьем перекрёстке\nШкола справа от вас, 300 метров вверх по дороге\n</pre>
      \n
      <p>Структура разметки такая же, как для неупорядоченных списков, за исключением того, что вы должны обернуть элементы списка в элемент <a><code>&lt;ol&gt;</code></a> (ordered list), а не &lt;ul&gt;:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><ol>\n  <li>Двигайтесь до конца дороги</li>\n  <li>Поверните направо</li>\n  <li>Езжайте прямо через первые два перекрёстка с круговым движением</li>\n  <li>Поверните налево на третьем перекрёстке</li>\n  <li>Школа справа от вас, в 300 метрах вверх по дороге</li>\n</ol>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="активное_изучение_разметка_упорядоченного_списка">
   <h3 id="активное_изучение_разметка_упорядоченного_списка"><a>Активное изучение: разметка упорядоченного списка</a></h3>
   <div class="section-content">
      <p>Попробуйте отредактировать образец ниже, чтобы создать свой собственный упорядоченный список HTML.</p>
      \n
      <div class="code-example">
         <pre compile="true" disable="false" language="markup"><h2>Результат</h2>\n<div class="output" style="min-height: 50px;"></div>\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 200px; width: 95%">Двигайтесь до конца дороги\nПоверните направо\nЕзжайте прямо через первые два перекрёстка с круговым движением\nПоверните налево на третьем перекрёстке\nШкола справа от вас, 300 метров вверх по дороге</input>\n
				 <style>body {\n  margin: 10px;\n  background: #f5f9fa;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 6em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}</style></pre>
      </div>
    
   </div>
</section>
<section aria-labelledby="активное_изучение_разметка_собственной_страницы_рецептов">
   <h3 id="активное_изучение_разметка_собственной_страницы_рецептов"><a>Активное изучение: разметка собственной страницы рецептов</a></h3>
   <div class="section-content">
      <p>Итак, в этот момент в статье у вас есть вся необходимая информация, чтобы разметить наш пример страницы рецепта. Вы можете либо сохранить локальную копию исходного файла <a class="external" target="_blank">text-start.html</a> и выполнить в нём работу, либо сделать это в приведённом ниже примере. Делать это локально, вероятно, будет лучше, так как тогда вы сможете сохранить работу, которую вы делаете, тогда как если вы её добавите в редактируемый пример, она будет потеряна при следующем открытии страницы. У обоих способов есть плюсы и минусы.</p>
      \n
      <div class="code-example">
         <pre compile="true" disable="false" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 200px; width: 95%">Рецепт быстрого приготовления хумуса.\n\n  Хумус — быстро, вкусно, — и ничего лишнего. Этот рецепт был составлен из других рецептов, которые мне попадались в течение многих лет.\n\n  Хумус — это вкусная густая паста, широко используемая в Греческих и Ближневосточных блюдах. Очень вкусно есть его с салатами, мясом на гриле и питой.\n\n  Ингредиенты\n\n  1 банка (400г) турецкого гороха (или бараньего гороха)\n  175г тахини\n  6 вяленых томатов\n  Половинка красного перца\n  Щепотка кайенского перца\n  1 зубчик чеснока\n  Чуть-чуть оливкового масла\n\n  Рецепт\n\n  Очистите чеснок от кожуры и крупно нарежьте.\n  Удалите стебель и семена у перца; крупно нарежьте перец.\n  Добавьте все ингредиенты в пищевой комбайн.\n  Измельчите все ингредиенты до состояния пасты.\n  Если вы хотите "грубый" хумус, измельчайте пару минут.\n  Если вам нужен гладкий хумус, измельчайте дольше.\n\n  По вкусу вы также можете добавить в небольших количествах лимон с кориандром, перец чили, лайм с чипотле, хариссу с мятой или же шпинат с брынзой. Попробуйте и решите, что подойдёт вам.\n\n  Хранение\n\n  Храните хумус в запечатанном контейнере в холодильнике. Хумус хранится примерно неделю после приготовления. Если он начнёт пениться, выкидывайте его.\n\n  Хумус можно хранить в морозильном отделении 2–3 месяца.</input>
				 <style>\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 6em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}</style>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="вложенные_списки">
   <h3 id="вложенные_списки"><a>Вложенные списки</a></h3>
   <div class="section-content">
      <p>Вполне нормально вложить один список в другой. Возможно, вы захотите, чтобы один список располагался внутри другого. Давайте возьмём второй список из нашего примера рецепта:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><ol>\n  <li>Очистите чеснок от кожуры и крупно нарежьте.</li>\n  <li>Удалите стебель и семена у перца; крупно нарежьте перец.</li>\n  <li>Добавьте все ингредиенты в пищевой комбайн.</li>\n  <li>Измельчите все ингредиенты до состояния пасты.</li>\n  <li>Если вы хотите "грубый" хумус, измельчайте пару минут.</li>\n  <li>Если вам нужен гладкий хумус, измельчайте дольше.</li>\n</ol>\n</pre>
      </div>
      \n
      <p>Поскольку последние две строки очень тесно связаны с тем, что было до них (они читаются как вспомогательные инструкции или варианты, которые подходят под этой маркой), может иметь смысл вложить их в свой собственный неупорядоченный список и поместить этот список внутри текущего. Это будет выглядеть так:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><ol>\n  <li>Очистите чеснок от кожуры и крупно нарежьте.</li>\n  <li>Удалите стебель и семена у перца; крупно нарежьте перец.</li>\n  <li>Добавьте все ингредиенты в пищевой комбайн.</li>\n  <li>\n    Измельчите все ингредиенты до состояния пасты.\n    <ul>\n      <li>Если вы хотите "грубый" хумус, измельчайте пару минут.</li>\n      <li>Если вам нужен гладкий хумус, измельчайте дольше.</li>\n    </ul>\n  </li>\n</ol>\n</pre>
      </div>
      \n
      <p>Попробуйте вернуться к предыдущему примеру активного обучения и обновить второй список.</p>
   </div>
</section>
<section aria-labelledby="акцент_и_важность">
   <h2 id="акцент_и_важность"><a>Акцент и важность</a></h2>
   <div class="section-content">
      <p>В обиходе мы часто подчёркиваем определённые слова, чтобы изменить смысл предложения и мы часто хотим отметить некоторые слова как важные или разные в некотором роде. HTML предоставляет различные семантические элементы, позволяющие нам добавлять текстовые материалы с такими эффектами, и в этом разделе мы рассмотрим несколько наиболее распространённых.</p>
   </div>
</section>
<section aria-labelledby="акцент">
   <h3 id="акцент"><a>Акцент</a></h3>
   <div class="section-content">
      <p>Когда мы хотим добавить акцент в разговорный язык, мы подчёркиваем определённые слова, тонко изменяя смысл того, что мы говорим. Точно так же на письменном языке мы склонны подчёркивать слова, выделяя их <em>курсивом</em>. Например, следующие два предложения имеют разные значения.</p>
      \n
      <p>Я рад, что ты не опоздал.</p>
      \n
      <p>Я <em>рад</em>, что ты не <em>опоздал</em>.</p>
      \n
      <p>В первом предложении звучит искреннее облегчение, что человек не опоздал. Во втором, напротив, звучит сарказм или пассивная агрессия: так выражена досада от того, что человек немного опоздал.</p>
      \n
      <p>В таких случаях в HTML используется элемент <a><code>&lt;em&gt;</code></a> (выделение). Кроме того, чтобы сделать документ более интересным для чтения, они распознаются программами, считывающими с экрана, и произносятся другим тоном. Браузеры стилизуют это по умолчанию курсивом, но вы можете не использовать этот тег, чтобы получить курсив. Для выделения курсивом вы можете использовать элемент <a><code>&lt;span&gt;</code></a> и CSS или элемент <a><code>&lt;em&gt;</code></a>:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Я <em>рад</em>, что ты не <em>опоздал</em>.</p>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="важное_значение">
   <h3 id="важное_значение"><a>Важное значение</a></h3>
   <div class="section-content">
      <p>Чтобы подчеркнуть важные слова, мы склонны подчёркивать их в устной речи и <strong>выделять жирным</strong> в письменном языке. Например:</p>
      \n
      <blockquote>
         \n  
         <p>Эта жидкость <strong>очень токсична</strong>.</p>
         \n  
         <p>Я рассчитываю на тебя. <strong>Не опаздывай</strong>!</p>
         \n
      </blockquote>
      \n
      <p>В таких случаях в HTML используется элемент <a><code>&lt;strong&gt;</code></a> (важное значение). Помимо того, что документ становится более полезным, они распознаются программами, считывающими с экрана, и говорят другим тоном. Браузеры стилизуют это как полужирный текст по умолчанию, но вы можете не использовать этот тег, чтобы получить жирный шрифт. Для получения жирного шрифта вы можете использовать элемент <a><code>&lt;span&gt;</code></a> и CSS или элемент <a><code>&lt;strong&gt;</code></a>:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Эта жидкость <strong>очень токсична</strong>.</p>\n\n<p>Я рассчитываю на тебя. <strong>Не опаздывай</strong>!</p>\n</pre>
      </div>
      \n
      <p>При желании вы можете вложить важные и акцентированные слова друг в друга:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  Эта жидкость <strong>очень токсична</strong> — если ты выпьешь её, <strong>то можешь <em>умереть</em></strong>.\n</p>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="активное_изучение_давайте_будем_важны!">
   <h3 id="активное_изучение_давайте_будем_важны!"><a>Активное изучение: Давайте будем важны!</a></h3>
   <div class="section-content">
      <p>В этом разделе активного обучения мы предоставили редактируемый пример. Внутри него мы хотели бы, чтобы вы попытались добавить акцент и большую важность для слов, которые, по вашему мнению, им нужны, просто для того, чтобы попрактиковаться.</p>
      \n
      <div class="code-example">
         <pre compile="true" disable="false" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 200px; width: 95%">&lt;h1&gt;Важное объявление&lt;/h1&gt;\n&lt;p&gt;9 января 2010 года, в воскресенье,\nбанда вандалов была обнаружена за кражей нескольких\nсадовых гномов из торгового центра в центре Милуоки. На них были\nнадеты зелёные спортивные костюмы и глупые шляпы, и,\nпо-видимому, они были в нетрезвом состоянии. Если у кого-то\nесть какая-либо информация об этом инциденте, пожалуйста,\nпозвоните в полицию немедленно.&lt;/p&gt;</input>\n
				 <style>h2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n</style>
				 </pre>
      </div>
   </div>
</section>
<section aria-labelledby="курсив_жирный_шрифт_подчеркивание">
   <h3 id="курсив_жирный_шрифт_подчеркивание"><a>Курсив, жирный шрифт, подчеркивание</a></h3>
   <div class="section-content">
      <p>Элементы, которые мы обсуждали до сих пор, имеют чёткую привязку к семантике. Ситуация с <a><code>&lt;b&gt;</code></a>, <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;i&gt;</code> <small>(en-US)</small></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;u&gt;</code> <small>(en-US)</small></a> несколько сложнее. Они появились в эпоху, когда CSS поддерживался плохо или вообще не поддерживался, чтобы люди могли писать <strong>жирный</strong> текст, <em>курсив</em> или <strong>подчёркнутый</strong> текст. Такие элементы, которые влияют только на внешний вид, а не на семантику, известны как элементы представления и больше не должны использоваться, поскольку, как мы видели ранее, семантика очень важна для доступности людям с ограниченными возможностями, SEO и так далее.</p>
      \n
      <p>HTML5 переопределил &lt;b&gt;, &lt;i&gt; и &lt;u&gt; с новыми, несколько запутанными, семантическими ролями.</p>
      \n
      <p>Вот хорошее правило: предпочтительней использовать &lt;b&gt;, &lt;i&gt; или &lt;u&gt; для передачи значения, традиционно передаваемого жирным шрифтом, курсивом или подчёркиванием, при условии, что нет более подходящего элемента. Тем не менее, всегда важно сохранить менталитет доступности. Концепция курсива не очень помогает людям, использующим устройства для чтения с экрана, или людям, использующим систему письма, отличную от латинского алфавита.</p>
      \n
      <ul>
         \n  
         <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;i&gt;</code> <small>(en-US)</small></a> используется для передачи значения, традиционно передаваемого курсивом: иностранные слова, таксономические обозначения, технические термины, мысли ...</li>
         \n  
         <li><a><code>&lt;b&gt;</code></a> используется для передачи значения, традиционно передаваемого жирным шрифтом: ключевые слова, названия продуктов, предложения ...</li>
         \n  
         <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;u&gt;</code> <small>(en-US)</small></a> используется для передачи значения, традиционно передаваемого подчёркиванием: имя собственное, орфографическая ошибка ...</li>
         \n
      </ul>
      \n
      <div class="notecard note" id="sect11">
         \n  
         <p><strong>Примечание:</strong> Предупреждение о подчёркивании: <strong>люди сильно ассоциируют подчёркивание с гиперссылками</strong>. Поэтому в Интернете лучше всего подчеркнуть только ссылки. Используйте элемент &lt;u&gt;, когда он семантически подходит, но подумайте о том, чтобы использовать CSS для изменения подчёркивания по умолчанию для чего-то более подходящего в Интернете. Пример ниже иллюстрирует, как это можно сделать.</p>
         \n
      </div>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><!-- Научные наименования -->\n<p>\n  Колибри обыкновенный (<i>архилоус обыкновенный</i>) — наиболее часто\n  встречающийся вид колибри в северо-восточной Америке.\n</p>\n\n<!-- Иностранные слова -->\n<p>\n  Случился прилив иностранных слов, таких как <i lang="uk-latn">vatrushka</i>,\n  <i lang="id">nasi goreng</i> и <i lang="fr">soupe à l\'oignon</i>.\n</p>\n\n<!-- Явно неправильное произношение или написание -->\n<p>Когда-нибудь я узнаю, как <u>гаварить</u> без ошибок.</p>\n\n<!-- Выделение ключевых слов в инструкциях -->\n<ol>\n  <li><b>Отрежьте</b> два ломтика хлеба.</li>\n  <li><b>Добавьте</b> кусочек помидора и лист латука между ломтями хлеба.</li>\n</ol>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="заключение">
   <h2 id="заключение"><a>Заключение</a></h2>
   <div class="section-content">
      <p>Вот и всё! Эта статья должна была дать вам хорошее представление о том, как начать разметку текста в HTML, и познакомить вас с некоторыми из наиболее важных элементов в этой области. В этой области есть намного больше семантических элементов, и мы рассмотрим их в нашей статье «Больше семантических элементов» позже в курсе. В следующей статье мы подробно рассмотрим, как <a>создавать гиперссылки</a>, возможно, самый важный элемент в Интернете.</p>
   </div>
</section>
`,
		works: [],
	},
	{
		book: 'HTML',
		title: 'Создание гиперссылок',

		content: `<header>
   <h1>Создание гиперссылок</h1>
</header>
<div class="section-content">
   \n
   <p>Гиперссылки очень важны — именно они делают Интернет <em>сетью</em>. В этой статье представлен синтаксис, необходимый для создания ссылки, а также обсуждаются лучшие практики обращения со ссылками.</p>
   \n
</div>
<section aria-labelledby="что_такое_гиперссылка">
   <h3 id="что_такое_гиперссылка"><a>Что такое гиперссылка?</a></h3>
   <div class="section-content">
      <p>Гиперссылки — одно из самых интересных нововведений Интернета. Они были особенностью Сети с самого начала, но именно они превращают Интернет в Интернет. Они позволяют нам связывать наши документы с любым другим документом (или ресурсом), с которым мы хотим. С их помощью мы также можем связывать документы с их конкретными частями, и мы можем сделать приложения доступными на простом веб-адресе (сравните это с локальными приложениями, которые должны быть установлены, и другими такими же вещами). Почти любой веб-контент может быть преобразован в ссылку, так что когда вы кликаете по ней (или иным образом активируете), она заставляет веб-браузер перейти на другой веб-адрес (<a>URL</a>).</p>
      \n
      <div class="notecard note" id="sect1">
         \n  
         <p><strong>Примечание:</strong> URL-адрес может указывать на файлы HTML, текстовые файлы, изображения, текстовые документы, видео и аудиофайлы и все остальное, что может жить в Интернете. Если веб-браузер не знает, как отображать или обрабатывать файл, он спросит вас, хотите ли вы открыть файл (в этом случае обязанность открытия или обработки файла передаётся в соответствующее локальное приложение на устройстве) или загрузить файл (в этом случае вы можете попытаться разобраться с ним позже).</p>
         \n
      </div>
      \n
      <p>Например, домашняя страница BBC содержит большое количество ссылок, которые указывают не только на множество новостей, но и на различные области сайта (меню), страницы входа / регистрации (пользовательские инструменты) и многое другое.</p>
      \n
      <p>\n  \n</p>
   </div>
</section>
<section aria-labelledby="анатомия_ссылки">
   <h3 id="анатомия_ссылки"><a>Анатомия ссылки</a></h3>
   <div class="section-content">
      <p>Простая ссылка создаётся путём обёртывания текста (или другого содержимого, смотрите <a>Ссылки-блоки</a>), который вы хотите превратить в ссылку, в элемент <a><code>&lt;a&gt;</code></a>, и придания этому элементу атрибута <a><code>href</code></a> (который также известен как <strong>гипертекстовая ссылка,</strong> или <strong>цель</strong>), который будет содержать веб-адрес, на который вы хотите указать ссылку.</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  Я создал ссылку на\n  <a href="https://www.mozilla.org/ru/">домашнюю страницу Mozilla</a>.\n</p>\n</pre>
      </div>
      \n
      <p>Это дало нам следующий результат:<br>Я создал ссылку на <a class="external" target="_blank">домашнюю страницу Mozilla</a>.</p>
   </div>
</section>
<section aria-labelledby="блочные_ссылки">
   <h3 id="блочные_ссылки"><a>Блочные ссылки</a></h3>
   <div class="section-content">
      <p>Как упоминалось ранее, вы можете превратить любой элемент в ссылку, даже <a>блочный элемент</a>. Если вы хотите превратить заголовок в ссылку, то оберните его в элемент (<code>&lt;a&gt;</code>):</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><a href="https://developer.mozilla.org/ru/">\n  <h1>MDN Web Docs</h1>\n</a>\n<p>\n  Документируем веб-технологии, включая CSS, HTML и JavaScript, с 2005 года.\n</p>\n</pre>
      </div>
      \n
      <p>\n  This turns the heading into a link:\n  </p>
      <div class="code-example" id="sect2">
         <div class="example-header" id="sect3"></div>
      </div>
      \n
      <p></p>
   </div>
</section>
<section aria-labelledby="добавляем_информацию_с_помощью_атрибута_title">
   <h3 id="добавляем_информацию_с_помощью_атрибута_title"><a>Добавляем информацию с помощью атрибута title</a></h3>
   <div class="section-content">
      <p>Другим атрибутом, который вы можете добавить к своим ссылкам, является — <code>title</code>. Он предназначен для хранения полезной информации о ссылке. Например, какую информацию содержит страница или другие вещи, о которых вам нужно знать. Например:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  Я создал ссылку на\n  <a href="https://www.mozilla.org/ru/" title="Лучшее место для поиска дополнительной информации\n           о миссии Mozilla и о том, как внести свой вклад">домашнюю страницу Mozilla </a>.\n</p>\n</pre>
      </div>
      \n
      <p>Вот что получилось (описание появится, если навести курсор на ссылку):</p>
      <div class="code-example" id="sect4">
         <div class="example-header" id="sect5"></div>
      </div>
      \n
      <div class="notecard note" id="sect6">
         \n  
         <p><strong>Примечание:</strong> Описание из атрибута title отображается только при наведении курсора, значит люди, полагающиеся на клавиатурные элементы управления для навигации по веб-страницам, будут испытывать трудности с доступом к информации, которую содержит title. Если информация заголовка действительно важна для удобства использования страницы, то вы должны представить её таким образом, который будет доступен для всех пользователей, например, поместив её в обычный текст.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="активное_изучение_создаём_собственную_ссылку">
   <h3 id="активное_изучение_создаём_собственную_ссылку"><a>Активное изучение: создаём собственную ссылку</a></h3>
   <div class="section-content">
      <p>Время упражнения: мы хотели бы, чтобы вы создали любой HTML-документ в текстовом редакторе на своём компьютере (наш <a class="external" target="_blank">базовый пример</a> подойдёт.)</p>
      \n
      <ul>
         \n  
         <li>Попробуйте добавить в тело HTML один или несколько абзацев или другие элементы, о которых вы уже знаете.</li>
         \n  
         <li>Теперь превратите некоторые фрагменты документа в ссылки.</li>
         \n  
         <li>Добавьте ссылкам атрибут <code>title</code>.</li>
         \n
      </ul>
   </div>
</section>
<section aria-labelledby="краткое_руководство_по_url-адресам_и_путям">
   <h3 id="краткое_руководство_по_url-адресам_и_путям"><a>Краткое руководство по URL-адресам и путям</a></h3>
   <div class="section-content">
      <p>Чтобы полностью понять адреса ссылок, вам нужно понять несколько вещей про URL-адреса и пути к файлам. Этот раздел даст вам информацию, необходимую для достижения этой цели.</p>
      \n
      <p>URL-адрес (Uniform Resource Locator, или единый указатель ресурса, но так его никто не называет) — это просто строка текста, которая определяет, где что-то находится в Интернете. Например, домашняя страница Mozilla находится по адресу <code>https://www.mozilla.org/ru/</code>.</p>
      \n
      <p>URL-адреса используют пути для поиска файлов. Пути указывают, где в файловой системе находится файл, который вас интересует. Давайте рассмотрим простой пример структуры каталогов (смотрите каталог <a class="external" target="_blank">creating-hyperlinks</a>.)</p>
      \n
      <p>\n  \n</p>
      \n
      <p><strong>Корень</strong> структуры — каталог <code>creating-hyperlinks</code>. При работе на локальном веб-сайте у вас будет один каталог, в который входит весь сайт. В корне у нас есть два файла — <code>index.html</code> и <code>contacts.html</code>. На настоящем веб-сайте <code>index.html</code> был бы нашей домашней, или лендинг-страницей (веб-страницей, которая служит точкой входа для веб-сайта или определённого раздела веб-сайта).</p>
      \n
      <p>В корне есть ещё два каталога — <code>pdfs</code> и <code>projects</code>. У каждого из них есть один файл внутри — <code>project-brief.pdf</code> и <code>index.html</code>, соответственно. Обратите внимание на то, что вы можете довольно успешно иметь два <code>index.html</code> файла в одном проекте, пока они находятся в разных местах файловой системы. Многие веб-сайты так делают. Второй <code>index.html</code>, возможно, будет главной лендинг-страницей для связанной с проектом информации.</p>
      \n
      <ul>
         \n  
         <li>
            <strong>Тот же каталог</strong>: Если вы хотите подключить ссылку внутри <code>index.html</code> (верхний уровень <code>index.html</code>), указывающую на <code>contacts.html</code>, вам просто нужно указать имя файла, на который вы хотите установить ссылку, так как он находится в том же каталоге, что и текущий файл. Таким образом, URL-адрес, который вы используете — <code>contacts.html</code>:\n    
            <div class="code-example">
               <div class="example-header"></div>
               <pre compile="false" disable="true" language="markup"><p>\n  Хотите связаться с конкретным сотрудником? Найдите подробную информацию на\n  нашей <a href="contacts.html">странице контактов</a>.\n</p>\n</pre>
            </div>
            \n  
         </li>
         \n  
         <li>
            <strong>Перемещение вниз в подкаталоги</strong>: Если вы хотите подключить ссылку внутри <code>index.html</code> (верхний уровень <code>index.html</code>), указывающую на <code>projects/index.html</code>, вам нужно спуститься ниже в директории <code>projects</code> перед тем, как указать файл, который вы хотите. Это делается путём указания имени каталога, после которого идёт слеш и затем имя файла. Итак, URL-адрес, который вы используете - <code>projects/index.html</code>:\n    
            <div class="code-example">
               <div class="example-header"></div>
               <pre compile="false" disable="true" language="markup"><p>\n  Посетите мою <a href="projects/index.html">домашнюю страницу проекта</a>.\n</p>\n</pre>
            </div>
            \n  
         </li>
         \n  
         <li>
            <strong>Перемещение обратно в родительские каталоги</strong>: Если вы хотите подключить ссылку внутри <code>projects/index.html</code>, указывающую на <code>pdfs/project-brief.pdf</code>, вам нужно будет подняться на уровень каталога, затем спустится в каталог <code>pdf</code>. "Подняться вверх на уровень каталога" обозначается двумя точками — <code>..</code> — так, URL-адрес, который вы используете <code>../pdfs/project-brief.pdf</code>:\n    
            <div class="code-example">
               <div class="example-header"></div>
               <pre compile="false" disable="true" language="markup"><p>\n  Ссылка на\n  <a href="../pdfs/project-brief.pdf">краткое описание моего проекта</a>.\n</p>\n</pre>
            </div>
            \n  
         </li>
         \n
      </ul>
      \n
      <div class="notecard note" id="sect7">
         \n  
         <p>\n    <strong>Примечание:</strong> вы можете объединить несколько экземпляров этих функций в сложные URL-адреса, если необходимо, например:\n    <code>../../../сложный/путь/к/моему/файлу.html</code>.\n  </p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="фрагменты_документа">
   <h3 id="фрагменты_документа"><a>Фрагменты документа</a></h3>
   <div class="section-content">
      <p>Можно ссылаться на определённую часть документа HTML (известную как <strong>фрагмент документа</strong>), а не только на верхнюю часть документа. Для этого вам сначала нужно назначить атрибут <a><code>id</code></a> элементу, с которым вы хотите связаться. Обычно имеет смысл ссылаться на определённый заголовок, поэтому это выглядит примерно так:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><h2 id="Почтовый_адрес">Почтовый адрес</h2>\n</pre>
      </div>
      \n
      <p>Затем, чтобы связаться с этим конкретным <code>id</code>, вы должны включить его в конец URL-адреса, которому предшествует знак решётки, например:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  Хотите написать мне письмо? Используйте наш\n  <a href="contacts.html#Почтовый_адрес">почтовый адрес</a>.\n</p>\n</pre>
      </div>
      \n
      <p>Вы даже можете использовать ссылку на фрагмент документа отдельно для ссылки на <em>другую часть того же документа</em>:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  <a href="#Почтовый_адрес">Почтовый адрес компании</a>\n  можно найти в нижней части этой страницы.\n</p>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="абсолютные_и_относительные_url-адреса">
   <h3 id="абсолютные_и_относительные_url-адреса"><a>Абсолютные и относительные URL-адреса</a></h3>
   <div class="section-content">
      <p>Два понятия, с которыми вы столкнётесь в Интернете, — это <strong>абсолютный URL</strong> и <strong>относительный URL</strong>:</p>
      \n
      <dl>
         \n  
         <dt id="абсолютный_url"><a><strong>Абсолютный URL</strong></a></dt>
         \n  
         <dd>
            \n    
            <p>Указывает на местоположение, определяемое его абсолютным местоположением в Интернете, включая <a>протокол</a> и <a>доменное имя</a>. Например, если страница <code>index.html</code> загружается в каталог, называемый <code>projects</code>, который находится внутри корня веб-сервера, а домен веб-сайта — <code>http://www.example.com</code>, страница будет доступна по адресу <code>http://www.example.com/projects/index.html</code> (или даже просто <code>http://www.example.com/projects/</code>), так как большинство веб-серверов просто ищет целевую страницу, такую как <code>index.html</code>, для загрузки, если он не указан в URL-адресе.).</p>
            \n  
         </dd>
         \n
      </dl>
      \n
      <p><em>Абсолютный URL</em> всегда будет указывать на одно и то же местоположение, независимо от того, где он используется.</p>
      \n
      <dl>
         \n  
         <dt id="относительный_url"><a><strong>Относительный URL</strong></a></dt>
         \n  
         <dd>
            \n    
            <p>Указывает расположение <em>относительно</em> файла, с которого вы связываетесь, это больше похоже на случай, который мы рассматривали в предыдущей секции. Для примера, если мы хотим указать со страницы <code>http://www.example.com/projects/index.html</code> на PDF файл, находящийся в той же директории, наш URL может быть просто названием файла — <code>project-brief.pdf</code> — никакой дополнительной информации не требуется. Если PDF расположен в поддиректории <code>pdfs</code> внутри каталога <code>projects</code>, относительная ссылка будет <code>pdfs/project-brief.pdf</code> (аналогичный абсолютный URL был бы <code>http://www.example.com/projects/pdfs/project-brief.pdf</code>.).</p>
            \n  
         </dd>
         \n
      </dl>
      \n
      <p><em>Относительный URL</em> будет указывать на различные места, в зависимости от того, где находится файл, в котором он используется, — например, если мы переместим наш файл <code>index.html</code> из каталога <code>projects</code> в корневой каталог веб-сервера (верхний уровень, не в директорию) , то относительный URL <code>pdfs/project-brief.pdf</code> будет вести на <code>http://www.example.com/pdfs/project-brief.pdf</code>, а не на <code>http://www.example.com/projects/pdfs/project-brief.pdf</code>.</p>
      \n
      <p>Советуем вам основательно разобраться в этой теме!</p>
   </div>
</section>
<section aria-labelledby="практика_написания_хороших_ссылок">
   <h2 id="практика_написания_хороших_ссылок"><a>Практика написания хороших ссылок</a></h2>
   <div class="section-content">
      <p>При написании ссылок рекомендуется следовать некоторым правилам. Давайте рассмотрим их.</p>
   </div>
</section>
<section aria-labelledby="используйте_чёткие_формулировки_описания_ссылок">
   <h3 id="используйте_чёткие_формулировки_описания_ссылок"><a>Используйте чёткие формулировки описания ссылок</a></h3>
   <div class="section-content">
      <p>На вашей странице легко добавить ссылки. Но этого не совсем достаточно. Мы должны сделать наши ссылки <em>доступными</em> для всех читателей, независимо от их возможностей и инструментов просмотра страницы, которые они предпочитают. Например:</p>
      \n
      <ul>
         \n  
         <li>Пользователям программ читающих с экрана нравится переходить по ссылкам на странице, читая адрес ссылки в тексте.</li>
         \n  
         <li>Поисковые системы используют текст ссылки для индексирования файлов, поэтому рекомендуется включать ключевые слова в текст ссылки, чтобы эффективно описывать, куда ведёт ссылка.</li>
         \n  
         <li>Пользователи часто бегло просматривают страницу, не читая каждое слово, и их глаза будут привлечены к тексту, который выделяется, например, ссылки. Им будет полезно описание того, куда ведёт ссылка.</li>
         \n
      </ul>
      \n
      <p>Взгляните на этот пример:</p>
      \n
      <p><em><strong>Хороший</strong> текст ссылки:</em> <a class="external" target="_blank">Скачать Firefox</a></p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p><a href="https://firefox.com/"> Скачать Firefox </a></p>\n</pre>
      </div>
      \n
      <p><em><strong>Плохой</strong> текст ссылки:</em> <a class="external" target="_blank">Нажми сюда</a>, чтобы скачать Firefox</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p><a href="https://firefox.com/"> Нажми сюда </a> чтобы скачать Firefox</p>\n</pre>
      </div>
      \n
      <p>Советы:</p>
      \n
      <ul>
         \n  
         <li>Не пишите URL-адрес как часть текста ссылки. URL-адреса выглядят сложными, а звучат ещё сложнее, когда программы чтения с экрана читают их по буквам.</li>
         \n  
         <li>Не пишите «ссылка» или «ссылки на» в тексте ссылки — это лишнее. Программы чтения с экрана сами проговаривают, что есть ссылка. На экране пользователи также видят, что есть ссылка, потому что ссылки, как правило, оформлены в другом цвете и подчёркнуты (подчёркивая ссылки, вы соблюдаете правила хорошего тона, поскольку пользователи привыкли к этому).</li>
         \n  
         <li>Следите за тем, чтобы текст ссылки был как можно короче. Длинный текст ссылки особенно раздражает пользователей программ чтения с экрана, которым придётся услышать всё, что написано.</li>
         \n  
         <li>Минимизируйте случаи, когда несколько копий одного и того же текста ссылок указывает на разные страницы. Это может вызвать проблемы для пользователей программ чтения с экрана, которые часто вызывают список ссылок — несколько ссылок, помеченных как «нажмите здесь», «нажмите здесь», «нажмите здесь», будут путать.</li>
         \n
      </ul>
   </div>
</section>
<section aria-labelledby="используйте_относительные_ссылки_где_это_возможно">
   <h3 id="используйте_относительные_ссылки_где_это_возможно"><a>Используйте относительные ссылки, где это возможно</a></h3>
   <div class="section-content">
      <p>Из прочитанного выше, вы можете подумать, что всё время использовать абсолютные ссылки — хорошая идея; в конце концов, они не ломаются, когда страница перемещается. Тем не менее, лучше использовать относительные ссылки везде, где это возможно, в пределах <em>одного сайта</em> (при ссылке на <em>другие сайты</em> необходимо использовать абсолютную ссылку):</p>
      \n
      <ul>
         \n  
         <li>Во-первых, гораздо проще прописать в коде относительные URL-адреса, как правило, они намного короче абсолютных URL-адресов, что значительно упрощает чтение кода</li>
         \n  
         <li>Во-вторых, использование относительных URL-адресов эффективней по следующей причине. Когда вы используете абсолютный URL-адрес, браузер начинает поиск реального местоположения сервера запрашивая адрес у Domain Name System (<a>DNS</a>; также прочтите <a>Как работает web</a>), затем он переходит на этот сервер и находит файл, который запрашивается. С относительным URL-адресом проще: браузер просто ищет файл, который запрашивается на том же сервере. Используя абсолютные URL-адреса вместо относительных, вы постоянно нагружаете свой браузер дополнительной работой.</li>
         \n
      </ul>
   </div>
</section>
<section aria-labelledby="создавая_ссылки_на_не_html_ресурсы_—_добавляйте_описание">
   <h3 id="создавая_ссылки_на_не_html_ресурсы_—_добавляйте_описание"><a>Создавая ссылки на не HTML ресурсы — добавляйте описание</a></h3>
   <div class="section-content">
      <p>Когда вы создаёте ссылку на файл, нажав на который можно загрузить документ PDF или Word или открыть просмотр видео, прослушивание аудио файла или перейти на страницу с другим, неожиданным для пользователя результатом (всплывающее окно или загрузка Flash-фильма), добавляйте чёткую формулировку, чтобы уменьшить путаницу. Отсутствие описания может раздражать пользователя. Приведём пример:</p>
      \n
      <ul>
         \n  
         <li>Если вы используете соединение с низкой пропускной способностью и вдруг нажмёте на ссылку без описания, начнётся загрузка большого файла.</li>
         \n  
         <li>Если у вас нет установленного Flash-плеера и вы нажмёте ссылку, то внезапно перейдёте на страницу с Flash-контентом.</li>
         \n
      </ul>
      \n
      <p>Посмотрите на примеры, чтобы увидеть, как добавить описание:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  \t<a href="http://www.example.com/large-report.pdf">\n    \tСкачать отчёт о продажах (PDF, 10MB)\n  \t</a>\n</p>\n<p>\n <a href="http://www.example.com/video-stream/">\n    Посмотреть видео (видео откроется в отдельном окне, HD качество)\n  </a>\n</p>\n<p>\n  <a href="http://www.example.com/car-game">\n    Играть в гонки (необходим Flash)\n  </a>\n</p>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="используйте_атрибут_download_когда_создаёте_ссылку">
   <h3 id="используйте_атрибут_download_когда_создаёте_ссылку"><a>Используйте атрибут download, когда создаёте ссылку</a></h3>
   <div class="section-content">
      <p>Когда создаёте ссылку на файл, который должен быть загружен, а не открыт в браузере, можете использовать атрибут <code>download</code>, чтобы создать имя файла по умолчанию для сохранения . Приведём пример ссылки для загрузки браузера Firefox 39:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><a href="https://download.mozilla.org/?product=firefox-39.0-SSL&amp;os=win&amp;lang=en-US" download="firefox-39-installer.exe">\n  Скачать Firefox 39 для Windows\n</a>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="активное_изучение_создание_меню_навигации">
   <h3 id="активное_изучение_создание_меню_навигации"><a>Активное изучение: создание меню навигации</a></h3>
   <div class="section-content">
      <p>Для этого упражнения мы хотим, чтобы вы создали ссылки на страницы в меню навигации в многостраничном сайте. Это один из распространённых способов создания сайта: на каждой странице используется одна и та же структура страниц, включая одно и то же меню навигации, поэтому при нажатии ссылок создаётся впечатление, что вы остаётесь в одном месте: меню остаётся на месте, а контент меняется.</p>
      \n
      <p>Вам нужно скачать или создать следующие страницы в одном каталоге (Смотрите <a class="external" target="_blank">navigation-menu-start</a>):</p>
      \n
      <ul>
         \n  
         <li><a class="external" target="_blank">index.html</a></li>
         \n  
         <li><a class="external" target="_blank">projects.html</a></li>
         \n  
         <li><a class="external" target="_blank">pictures.html</a></li>
         \n  
         <li><a class="external" target="_blank">social.html</a></li>
         \n
      </ul>
      \n
      <p>Что делать:</p>
      \n
      <ol>
         \n  
         <li>Добавьте неупорядоченный список в указанном месте в любом html-файле. Список должен состоять из имён страниц (index, projects и т.д.). Меню навигации обычно представляет собой список ссылок, поэтому создание неупорядоченного списка семантически верно.</li>
         \n  
         <li>Создайте ссылки каждому элементу списка, ведущие на эти страницы.</li>
         \n  
         <li>Скопируйте созданное меню в каждую страницу.</li>
         \n  
         <li>На каждой странице удалите только ссылку, которая указывает на эту же страницу (на странице index.html удалить ссылку index и так далее). Дело в том, что, находясь на странице index.html, нам незачем видеть ссылку в меню на эту же страницу. С одной стороны, нам незачем ещё раз переходить на эту же страницу, с другой, такой приём помогает визуально определить, смотря на меню, в какой части сайта мы находимся.</li>
         \n
      </ol>
      \n
      <p>Когда закончите задание, посмотрите, как это должно выглядеть:</p>
      \n
      <p>\n  \n</p>
      \n
      <div class="notecard note" id="sect8">
         \n  
         <p><strong>Примечание:</strong> Если не удаётся сделать, или вы не уверены, что сделали верно, посмотрите наш вариант <a class="external" target="_blank">navigation-menu-marked-up</a>.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="ссылки_электронной_почты">
   <h2 id="ссылки_электронной_почты"><a>Ссылки электронной почты</a></h2>
   <div class="section-content">
      <p>Можно создавать ссылки или кнопки, которые при нажатии открывают новое исходящее сообщение электронной почты, а не ссылку на ресурс или страницу. Для этого используется элемент <a><code>&lt;a&gt;</code></a> и <code>mailto:</code> — <em>адрес почты</em>.</p>
      \n
      <p>Самыми простыми и часто используемыми формами <code>mailto:</code> являются <em>subject</em>, <em>cc</em>, <em>bcc</em> и <em>body</em>; дальше прописываем адрес электронной почты. Например:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><a href="mailto:nowhere@mozilla.org">Отправить письмо для nowhere</a>\n</pre>
      </div>
      \n
      <p>В результате получим ссылку вида: <a>Отправить письмо для nowhere</a>.</p>
      \n
      <p>Сам адрес электронной почты не является обязательным для заполнения. Если оставить это поле пустым (в поле <a><code>href</code></a> оставить только "mailto:"), откроется новое исходящее сообщение почтовой программой, в поле получателя будет пусто. Это можно использовать для кнопки "Поделиться".</p>
   </div>
</section>
<section aria-labelledby="особенности_и_детали">
   <h3 id="особенности_и_детали"><a>Особенности и детали</a></h3>
   <div class="section-content">
      <p>Помимо адреса электронной почты, вы можете предоставить другую информацию. Фактически, любые стандартные поля для отправки почты могут быть добавлены к указанному вами адресу <code>mailto</code>. Часто используемыми из них являются «subject», «cc» и «body» (которые не являются истинным полем заголовка, но позволяют указать дополнительную информацию для нового сообщения электронной почты). Каждое поле и его значение задаются в качестве условия запроса.</p>
      \n
      <p>Вот пример который включает cc(кому отправить копию сообщения, все получатели письма видят список тех кто это письмо получит), bcc(скрытый адрес получателя, никто из получателей не будет видеть полный список получателей письма), subject(тема письма) и body(текст сообщения):</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><a href="mailto:nowhere@mozilla.org?cc=name2@rapidtables.com&amp;bcc=name3@rapidtables.com&amp;subject=The%20subject%20of%20the%20email &amp;body=The%20body%20of%20the%20email">\n  Send mail with cc, bcc, subject and body\n</a>\n</pre>
      </div>
      \n
      <div class="notecard note" id="sect9">
         \n  
         <p><strong>Примечание:</strong> Значение каждого поля должно быть написано в URL-кодировке (то есть с непечатаемыми символами и пробелами <a class="external" target="_blank">percent-escaped</a>). Обратите внимание на знак вопроса (?) для разделения основного адреса и дополнительных полей, амперсанд (&amp;) для разделения каждого поля <code>mailto:</code> URL. Для этого используется стандартное описание URL запроса. Прочтите <a>о методе GET</a>, чтобы лучше понимать описание URL запроса.</p>
         \n
      </div>
      \n
      <p>Вот несколько примеров использования <code>mailto</code> URLs:</p>
      \n
      <ul>
         \n  
         <li><a>mailto:</a></li>
         \n  
         <li><a>mailto:nowhere@mozilla.org</a></li>
         \n  
         <li><a>mailto:nowhere@mozilla.org,nobody@mozilla.org</a></li>
         \n  
         <li><a>mailto:nowhere@mozilla.org?cc=nobody@mozilla.org</a></li>
         \n  
         <li><a>mailto:nowhere@mozilla.org?cc=nobody@mozilla.org&amp;subject=This%20is%20the%20subject</a></li>
         \n
      </ul>
   </div>
</section>
<section aria-labelledby="заключение">
   <h2 id="заключение"><a>Заключение</a></h2>
   <div class="section-content">
      <p>Этой информации достаточно для создания ссылок! Вы вернётесь к ссылкам позже, когда начнёте изучать стили. Дальше вы рассмотрите семантику текста и более сложные и необычные возможности, которые будут полезны при создании контента сайта. В следующей главе будет рассматриваться продвинутое форматирование текста.</p>
   </div>
</section>
`,
		works: [
			{
				answer: 'Различие только в виде',
				explain: 'Различие только в виде',
				question: 'Выбери верный ответ',
				type: BookTypeWork.QUESTION,
				variant: ['Различие только в виде', 'Нет различий'],
			},
		],
	},
	{
		book: 'HTML',
		title: 'Продвинутое форматирование текста',

		content: `<header>
   <h1>Продвинутое форматирование текста</h1>
</header>
<div class="section-content">
   \n
   <p>В HTML для форматирования текста есть много других элементов, не рассмотренных в статье <a>Основы редактирования текста в HTML</a>. Элементы, описанные в этой статье, не так часто используются, но всё же полезны для понимания (и это всё ещё будет не полный список элементов). Здесь вы узнаете о цитатах, списках описания, компьютерном коде и другом виде текстовых элементов, подстрочном и надстрочном тексте, контактной информации и других типах текста.</p>
   \n
</div>
<section aria-labelledby="списки_описания">
   <h3 id="списки_описания"><a>Списки описания</a></h3>
   <div class="section-content">
      <p>В основах HTML-текста мы рассмотрели, как <a>пометить привычные типы списков</a> в HTML, но мы не упоминали о третьем типе списка, с которым вы иногда сталкиваетесь, — списке описания. Цель этих списков состоит в том, чтобы пометить набор элементов и их связанных описаний, таких как термины и определения или вопросы и ответы.</p>
      \n
      <p>Давайте рассмотрим пример набора терминов и определений:</p>
      \n
      <pre compile="false" disable="true" language="markup">Солилоквий\nДраматическая речь, в которой персонаж разговаривает сам с собой, передавая свои ощущения и мысли публике (но не другим персонажам).\nМонолог\nДраматическая речь, в которой персонаж передаёт свои мысли публике и некоторым персонажам.\nРемарка\nВ драме: речь персонажа, при которой делается замечание с юмористическим или драматическим эффектом; чаще всего это чувства, мысли или предпосылки к чему-либо.\n</pre>
      \n
      <p>В списках описания используется иная оболочка, чем в других типах списков — <a><code>&lt;dl&gt;</code></a> (от <em>description list</em>); кроме того, каждый термин завёрнут в элемент <a><code>&lt;dt&gt;</code></a> (<em>description term</em> — термин для описания) и каждое определение завёрнуто в элемент <a><code>&lt;dd&gt;</code></a> (<em>description definition</em> — описание определения).</p>
      \n
      <p>Закончим разметку нашего примера:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><dl>\n  <dt>Солилоквий</dt>\n  <dd>\n    Драматическая речь, в которой персонаж разговаривает сам с собой, передавая\n    свои ощущения и мысли публике (но не другим персонажам).\n  </dd>\n  <dt>Монолог</dt>\n  <dd>\n    Драматическая речь, в которой персонаж передаёт свои мысли публике и\n    некоторым персонажам.\n  </dd>\n  <dt>Ремарка</dt>\n  <dd>\n    В драме: речь персонажа, при которой делается замечание с юмористическим или\n    драматическим эффектом; чаще всего это чувства, мысли или предпосылки к\n    чему-либо.\n  </dd>\n</dl>\n</pre>
      </div>
      \n
      <p>В стилях браузера по умолчанию будут отображаться списки описания с некоторыми отступами от терминов. Стили, определённые на MDN, довольно близки к этому соглашению, но также вносят некоторые изменения:</p>
      \n
      <dl>
         \n  
         <dt id="солилоквий"><a>Солилоквий</a></dt>
         \n  
         <dd>
            \n    
            <p>Драматическая речь, в которой персонаж разговаривает сам с собой, передавая свои ощущения и мысли публике (но не другим персонажам).</p>
            \n  
         </dd>
         \n  
         <dt id="монолог"><a>Монолог</a></dt>
         \n  
         <dd>
            \n    
            <p>Драматическая речь, в которой персонаж передаёт свои мысли публике и некоторым персонажам.</p>
            \n  
         </dd>
         \n  
         <dt id="ремарка"><a>Ремарка</a></dt>
         \n  
         <dd>
            \n    
            <p>В драме: речь персонажа, при которой делается замечание с юмористическим или драматическим эффектом; чаще всего это чувства, мысли или предпосылки к чему-либо.</p>
            \n  
         </dd>
         \n
      </dl>
      \n
      <p>Заметьте, что разрешено давать одному элементу несколько описаний:</p>
      \n
      <dl>
         \n  
         <dt id="ремарка_2"><a>Ремарка</a></dt>
         \n  
         <dd>
            \n    
            <p>В драме: речь персонажа, при которой делается замечание с юмористическим или драматическим эффектом; чаще всего это чувства, мысли или предпосылки к чему-либо.</p>
            \n    
            <p>В письменности: отметка, примечание (<em>устар.</em>).</p>
            \n  
         </dd>
         \n
      </dl>
   </div>
</section>
<section aria-labelledby="активное_обучение_разметка_набора_определений">
   <h3 id="активное_обучение_разметка_набора_определений"><a>Активное обучение: разметка набора определений</a></h3>
   <div class="section-content">
      <p>Пришло время попробовать свои силы в списках описания: добавьте элементы в исходный текст в поле Ввод, чтобы он отображался как список описания в поле <em>Вывод</em>. Вы можете попробовать использовать свои собственные термины и описания, если хотите.</p>
      \n
      <p>Если вы ошиблись, то всегда можете начать снова, воспользовавшись кнопкой <em>Сбросить</em>. Если упражнение вызывает у вас затруднения, то нажмите кнопку <em>Показать решение</em>, чтобы увидеть правильный ответ.</p>
      \n
      <div class="code-example">
         <pre compile="true" disable="false" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 100px; width: 95%">Бекон\nСкрепляет мир вокруг.\nЯйца\nСкрепляют пироги вокруг.\nКофе\nРычаг, движущий планетами.\nСветло-коричневого цвета.</input>\n
				 <style>h2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}</style>
				 </pre>
      </div>
   </div>
</section>
<section aria-labelledby="цитаты">
   <h3 id="цитаты"><a>Цитаты</a></h2>
   <div class="section-content">
      <p>HTML также имеет функции, доступные для маркировки цитат; какой элемент вы используете, зависит от того, маркируете ли вы блочную или строчную цитату.</p>
   </div>
</section>
<section aria-labelledby="блочные_цитаты">
   <h3 id="блочные_цитаты"><a>Блочные цитаты</a></h3>
   <div class="section-content">
      <p>Если часть содержимого уровня блока (будь то абзац, несколько абзацев, список и т. д.) цитируется из другого источника, вы должны обернуть её внутри элемента <a><code>&lt;blockquote&gt;</code></a>, чтобы обозначить это, и указать URL-адрес, указывающий на источник цитаты, внутри атрибута <a><code>cite</code></a>.</p>
      \n
      <p>Например, следующая разметка берётся из страницы элемента MDN <strong><code>&lt;blockquote&gt;</code></strong>:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  <strong>HTML-элемент<code>&lt;blockquote&gt;</code></strong> (от англ.\n  <em>HTML Block Quotation Element</em>) указывает на то, что заключённый в нём\n  текст является развёрнутой цитатой.\n</p>\n</pre>
      </div>
      \n
      <p>Чтобы превратить её в блочную цитату, мы просто делаем следующее:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><blockquote cite="https://developer.mozilla.org/ru/docs/Web/HTML/Element/blockquote">\n  <p>\n    <strong>HTML-элемент<code>&lt;blockquote&gt;</code></strong> (от англ.\n    <em>HTML Block Quotation Element</em>) указывает на то, что заключённый в\n    нём текст является развёрнутой цитатой.\n  </p>\n</blockquote>\n</pre>
      </div>
      \n
      <p>Стиль браузера по умолчанию будет отображать это как абзац с отступом, как индикатор того, что это цитата; абзац над цитатой призван продемонстрировать это. MDN делает это, но также добавляет некоторый дополнительный стиль:</p>
      \n
      <blockquote>
         \n  
         <p><strong>HTML-элемент &lt;blockquote&gt;</strong> (от англ. <em>Block Quotation</em>) указывает на то, что заключённый в нём текст является развёрнутой цитатой.</p>
         \n
      </blockquote>
   </div>
</section>
<section aria-labelledby="строчные_цитаты">
   <h3 id="строчные_цитаты"><a>Строчные цитаты</a></h3>
   <div class="section-content">
      <p>Строчные цитаты работают точно так же, за исключением того, что они используют элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;q&gt;</code> <small>(en-US)</small></a>. Например, следующий кусочек разметки содержит цитату из страницы <code>&lt;q&gt;</code> MDN:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  Элемент цитирования — <code>&lt;q&gt;</code> —\n  <q cite="https://developer.mozilla.org/ru/docs/Web/HTML/Element/q">предназначен для коротких цитат, не требующих прерывания абзаца</q>.\n</p>\n</pre>
      </div>
      \n
      <p>Стиль браузера по умолчанию будет отображать это как обычный текст, заключённый в кавычки для обозначения цитаты, например:</p>
      \n
      <p>Элемент цитирования — <code>&lt;q&gt;</code> — "предназначен для коротких цитат, не требующих прерывания абзаца".</p>
   </div>
</section>
<section aria-labelledby="цитирование">
   <h3 id="цитирование"><a>Цитирование</a></h3>
   <div class="section-content">
      <p>Содержание атрибута <a><code>cite</code></a> выглядит полезным, но, к сожалению, браузерам, программам чтения с экрана и т. д. оно на самом деле мало чем помогает. Невозможно заставить браузер отображать содержимое атрибута <code>cite</code> без написания собственного решения с использованием JavaScript или CSS. Если вы хотите, чтобы источник цитирования был доступен на странице, лучший способ его разметки - поместить элемент <a><code>&lt;cite&gt;</code></a> рядом с элементом цитаты (или внутри него). Это действительно будет означать то, что имя источника цитаты — то есть имя книги или имя человека, которое произвело цитату, — будет включено в текст. Нет причин, по которым вы не могли бы связать текст внутри <code>&lt;cite&gt;</code> с источником цитаты:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  Как указано в статье о\n  <a href="https://developer.mozilla.org/ru/docs/Web/HTML/Element/blockquote">\n    <cite>блочных цитатах</cite></a>:\n</p>\n\n<blockquote cite="https://developer.mozilla.org/ru/docs/Web/HTML/Element/blockquote">\n  <p>\n    <strong>HTML-элемент<code>&lt;blockquote&gt;</code></strong> (от англ.\n    <em>HTML Block Quotation Element</em>) указывает на то, что заключённый в\n    нем текст является развёрнутой цитатой.\n  </p>\n</blockquote>\n\n<p>\n  Элемент цитирования — <code>&lt;q&gt;</code> —\n  <q cite="https://developer.mozilla.org/ru/docs/Web/HTML/Element/q">предназначен для коротких цитат, не требующих прерывания абзаца</q>. --\n  <a href="https://developer.mozilla.org/ru/docs/Web/HTML/Element/q">\n    <cite>Строчные цитаты</cite></a>.\n</p>\n</pre>
      </div>
      \n
      <p>По умолчанию цитаты стилизованы курсивом. Этот код можно увидеть в нашем примере <a class="external" target="_blank">quotations.html</a></p>
   </div>
</section>
<section aria-labelledby="активное_обучение_кто_это_сказал">
   <h3 id="активное_обучение_кто_это_сказал"><a>Активное обучение: кто это сказал?</a></h3>
   <div class="section-content">
      <p>Время для другого примера активного обучения! В этом примере мы хотели бы, чтобы вы совершили следующие действия:</p>
      \n
      <ol>
         \n  
         <li>Преобразуйте средний абзац в блочную цитату (<code>&lt;blockquote&gt;</code>), который включает атрибут <code>cite</code>.</li>
         \n  
         <li>Заверните часть третьего абзаца в строчную цитату, которая включает атрибут <code>cite</code>.</li>
         \n  
         <li>Включите элемент <code>&lt;cite&gt;</code> для каждой ссылки.</li>
         \n
      </ol>
      \n
      <p>Источники цитирования, которые вам потребуются:</p>
      \n
      <ul>
         \n  
         <li><a class="external" target="_blank">http://www.brainyquote.com/quotes/authors/c/confucius</a> — HTML-страница с цитатами Конфуция</li>
         \n  
         <li><a class="external" target="_blank">https://www.affirmationsforpositivethinking</a> — HTML-страница <em>The Need To Eliminate Negative Self Talk</em>.</li>
         \n
      </ul>
      \n
      <p>Если вы ошиблись, то всегда можете начать снова, воспользовавшись кнопкой <em>Сбросить</em>. Если упражнение вызывает у вас затруднения, то нажмите кнопку <em>Показать решение</em>, чтобы увидеть правильный ответ.</p>
      \n
      <div class="code-example">
         <pre compile="true" disable="false" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 150px; width: 95%">&lt;p&gt;Здравствуйте и добро пожаловать на мою страницу мотивации! Конфуций как-то сказал:&lt;/p&gt;\n&lt;p&gt;Не важно, с какой скоростью ты движешься к своей цели, — главное не останавливаться.&lt;/p&gt;\n&lt;p&gt;Мне также нравится концепция позитивного мышления, и я считаю, каждый ощущает Необходимость избавления от негативного внутреннего разговора (как сказано в зарубежной статье Affirmations for Positive Thinking.)&lt;/p&gt;\n</input>\n
				 <style>h2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}</style>
				 </pre>
      </div>
   </div>
</section>
<section aria-labelledby="аббревиатуры">
   <h3 id="аббревиатуры"><a>Аббревиатуры</a></h3>
   <div class="section-content">
      <p>Другой довольно часто встречающийся элемент, который вы будете часто встречать в Интернете, — это <a><code>&lt;abbr&gt;</code></a>, используемый для обёртывания аббревиатур или акронимов и обеспечивающий полную расшифровку сокращения (с помощью атрибута <a><code>title</code></a>.)</p>
      \n
      <p>Давайте рассмотрим несколько примеров:</p>
      \n
      <pre compile="false" disable="true" language="markup"><p>Мы используем <abbr title="Hypertext Markup Language">HTML</abbr> для структурирования наших веб-документов.</p>\n\n<p>Я думаю, <abbr title="Почтенный">Почт.</abbr> Грин сделал это на кухне с бензопилой.</p>\n</pre>
      \n
      <p>Они будут выглядеть примерно так (расшифровка появится в подсказке при наведении курсора мыши на сокращение):</p>
      \n
      <p>Мы используем HTML для структурирования наших веб-документов.</p>
      \n
      <p>Я думаю, Почт. Грин сделал это на кухне с бензопилой.</p>
      \n
      <div class="notecard note" id="sect5">
         \n  
         <p><strong>Примечание:</strong> Существует ещё один элемент <a><code>&lt;acronym&gt;</code></a>, который в основном делает то же самое, что и <code>&lt;abbr&gt;</code>, но предназначен специально для акронимов (тип аббревиатур). Это, однако, было излишним, — он не поддерживается в браузерах на том же уровне, что <code>&lt;abbr&gt;</code>, и имеет такую же функциональность, поэтому считается бессмысленным иметь оба. Просто используйте <code>&lt;abbr&gt;</code>.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="активное_обучение_выделение_аббревиатуры">
   <h3 id="активное_обучение_выделение_аббревиатуры"><a>Активное обучение: выделение аббревиатуры</a></h3>
   <div class="section-content">
      <p>В рамках этого простого упражнения мы хотели бы, чтобы вы просто указали аббревиатуру. Вы можете использовать наш образец ниже или заменить его на свой собственный.</p>
      \n
      <div class="code-example">
         <pre compile="true" disable="false" language="markup"><h2>Результат</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Редактируемый код</h2>\n<p class="a11y-label">\n  Нажмите Esc, чтобы выйти из поля ввода (Tab вставляет символ табуляции).\n</p>\n\n<input id="code" class="input" style="min-height: 50px; width: 95%">&lt;p&gt;Безусловно, NASA занимается классными вещами.&lt;/p&gt;\n</input>\n
				 <style>h2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}</style>
				 </pre>
      </div>
   </div>
</section>
<section aria-labelledby="разметка_контактных_данных">
   <h3 id="разметка_контактных_данных"><a>Разметка контактных данных</a></h3>
   <div class="section-content">
      <p>HTML имеет элемент для разметки контактных данных — <a><code>&lt;address&gt;</code></a>. Он просто обёртывает ваши контактные данные, например:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><address>\n  <p>Крис Миллс, Манчестер, Жестокий Север, РФ</p>\n</address>\n</pre>
      </div>
      \n
      <p>Однако следует помнить, что элемент <a><code>&lt;address&gt;</code></a> предназначен для разметки контактных данных человека, который написал HTML-документ, а не <em>любого</em> адреса. Таким образом, написанное выше было бы корректным только в том случае, если бы Крис написал документ, на котором появляется разметка. Обратите внимание, что следующее также подойдёт:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><address>\n  <p>Автор страницы — <a href="../authors/chris-mills/">Крис Миллс</a>.</p>\n</address>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="верхний_и_нижний_индекс">
   <h3 id="верхний_и_нижний_индекс"><a>Верхний и нижний индекс</a></h3>
   <div class="section-content">
      <p>Иногда вам понадобится использовать надстрочный или подстрочный индекс при разметке таких вещей, как даты, химические формулы и математические уравнения, чтобы они имели правильное представление. Элементы <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;sup&gt;</code> <small>(en-US)</small></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;sub&gt;</code> <small>(en-US)</small></a> созданы для таких ситуаций.</p>
      \n
      <p>Приведём пример:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>Я просыпаюсь в 6<sup>35</sup> часов утра.</p>\n<p>\n  Химическая формула кофеина:\n  C<sub>8</sub>H<sub>10</sub>N<sub>4</sub>O<sub>2</sub>.\n</p>\n<p>Если x<sup>2</sup> равно 9, x должен равняться 3 или -3.</p>\n</pre>
      </div>
      \n
      <p>Результат этого кода выглядит следующим образом:</p>
      \n
      <p>Я просыпаюсь в 635 часов утра.</p>
      \n
      <p>Химическая формула кофеина: C8H10N4O2.</p>
      \n
      <p>Если x2 равно 9, x должен равняться 3 или -3.</p>
   </div>
</section>
<section aria-labelledby="представление_компьютерного_кода">
   <h3 id="представление_компьютерного_кода"><a>Представление компьютерного кода</a></h3>
   <div class="section-content">
      <p>Существует несколько элементов для маркировки компьютерного кода с использованием HTML:</p>
      \n
      <ul>
         \n  
         <li><a><code>&lt;code&gt;</code></a>: Для разметки общих частей компьютерного кода.</li>
         \n  
         <li><a><code>&lt;pre&gt;</code></a>: Для сохранения пробелов (как правило, кодовых блоков) — если вы используете отступы или лишние пробелы внутри вашего текста, браузеры будут игнорировать его, и вы не увидите его на вашей отображаемой странице; если вы поместите текст в теги <code>&lt;pre&gt;&lt;/pre&gt;</code>, то ваши пробелы будут отображаться идентично тому, как вы видите текст в редакторе.</li>
         \n  
         <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;var&gt;</code> <small>(en-US)</small></a>: Для конкретной маркировки имён переменных.</li>
         \n  
         <li><a><code>&lt;kbd&gt;</code></a>: Для маркировки ввода с клавиатуры (и других типов).</li>
         \n  
         <li><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;samp&gt;</code> <small>(en-US)</small></a>: Для маркировки вывода компьютерной программы.</li>
         \n
      </ul>
      \n
      <p>Давайте рассмотрим несколько примеров. Вы должны попробовать поиграть с ними (захватите копию нашего файла <a class="external" target="_blank">other-semantics.html</a>):</p>
      \n
      
   </div>
</section>
<section aria-labelledby="разметка_времени_и_даты">
   <h3 id="разметка_времени_и_даты"><a>Разметка времени и даты</a></h3>
   <div class="section-content">
      <p>HTML также содержит элемент <a><code>&lt;time&gt;</code></a> для отметки времени и дат в машиночитаемом формате. Например:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><time datetime="2020-01-20">20 Января 2020</time>\n</pre>
      </div>
      \n
      <p>Почему это полезно? Ну, есть много разных способов, которыми люди записывают даты. Вышеуказанная дата может быть записана как:</p>
      \n
      <ul>
         \n  
         <li>20 Января 2020</li>
         \n  
         <li>20-ое Января 2020</li>
         \n  
         <li>Янв 20 2020</li>
         \n  
         <li>20/01/20</li>
         \n  
         <li>01/20/20</li>
         \n  
         <li>20e Janvier 2020</li>
         \n  
         <li>2020 年 1 月 20 日</li>
         \n  
         <li>и другое...</li>
         \n
      </ul>
      \n
      <p>Но эти разные формы не могут быть легко распознаны компьютерами — что, если вы хотите автоматически захватить даты всех событий на странице и вставить их в календарь? Элемент <a><code>&lt;time&gt;</code></a> позволяет прикрепить к этой цели однозначное машиночитаемое время / дату.</p>
      \n
      <p>В приведённом выше базовом примере приведена простая машиносчитываемая дата, но есть много других возможных вариантов, например:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><!-- Стандартная дата -->\n<time datetime="2020-01-20">20 Января 2020</time>\n<!-- Только год и месяц -->\n<time datetime="2020-01">Январь 2020</time>\n<!-- Только месяц и день -->\n<time datetime="01-20">20 Января</time>\n<!-- Только время, часы и минуты -->\n<time datetime="19:30">19:30</time>\n<!-- Также вы можете отобразить секунды и миллисекунды! -->\n<time datetime="19:30:01.856">19:30:01.856</time>\n<!-- Дата и время -->\n<time datetime="2020-01-20T19:30">7.30pm, 20 Января 2020</time>\n<!-- Дата и время со смещением по часовому поясу -->\n<time datetime="2020-01-20T19:30+01:00">7.30pm, 20 Января 2020, — это 8.30pm во Франции.</time>\n<!-- Вызов номера недели -->\n<time datetime="2020-W04">Четвёртая неделя 2020</time>\n</pre>
      </div>
   </div>
</section>
<section aria-labelledby="заключение">
   <h3 id="заключение"><a>Заключение</a></h3>
   <div class="section-content">
      <p>На этом мы подошли к концу нашего изучения семантики текста HTML. Имейте в виду, что то, что вы видели во время этого курса, не является исчерпывающим списком текстовых элементов HTML. Мы попытались охватить основные из них, с которыми вы, скорее всего, столкнётесь в практической деятельности или, по крайней мере, сочтёте их интересными. Чтобы найти больше элементов HTML, вы можете взглянуть на нашу ссылку на <a>Элемент</a>. В следующей статье мы рассмотрим элементы HTML, которые вы будете использовать для структурирования различных частей HTML-документа.</p>
   </div>
</section>
`,
		works: [],
	},
	{
		book: 'HTML',
		title: 'Структура документа и веб-сайта',

		content: `<header>
   <h1>Структура документа и веб-сайта</h1>
</header>
<div class="section-content">
   \n
   <p>В дополнение к определению отдельных частей вашей страницы (таких как «абзац» или «изображение»), <a>HTML</a> также содержит ряд элементов блочного уровня, используемых для определения областей вашего веб-сайта (такие как «заголовок», «навигационное меню», «колонка основного содержимого»). В этой статье рассматривается, как планировать базовую структуру сайта и писать HTML для представления этой структуры.</p>
   \n
</div>
<section aria-labelledby="основные_составляющие_документа">
   <h3 id="основные_составляющие_документа"><a>Основные составляющие документа</a></h3>
   <div class="section-content">
      <p>Веб-страницы могут и будут отличаться друг от друга, но все они, преимущественно, состоят из аналогичных стандартных компонентов, если только страница не отображает полноэкранное видео или игру, не является частью какого-либо художественного проекта или просто плохо структурирована:</p>
      \n
      <dl>
         \n  
         <dt id="заголовок_колонтитул"><a>Заголовок (колонтитул)</a></dt>
         \n  
         <dd>
            \n    
            <p>Обычно это большая полоса вверху страницы, с крупным заголовком и / или логотипом. Здесь указывается общая информация о веб-сайте, не меняющаяся от страницы к странице.</p>
            \n  
         </dd>
         \n  
         <dt id="навигационное_меню"><a>Навигационное меню</a></dt>
         \n  
         <dd>
            \n    
            <p>Ссылки на основные разделы сайта; обычно в виде кнопок, ссылок или вкладок. Также как и заголовок, навигация остаётся неизменной на всех страницах сайта — наличие непоследовательной навигации на вашем сайте запутает и разочарует пользователей. Многие веб-дизайнеры считают панель навигации частью заголовка, а не отдельным компонентом, но это не является обязательным требованием; на самом деле, некоторые также утверждают, что их разделение на отдельные компоненты улучшает <a>доступность</a>, поскольку раздельная структура будет понятнее для людей, пользующихся считывателями экрана.</p>
            \n  
         </dd>
         \n  
         <dt id="основное_содержимое"><a>Основное содержимое</a></dt>
         \n  
         <dd>
            \n    
            <p>Большая область в центре страницы, содержащая, в основном, уникальный контент данной веб-страницы, например видео, которое вы хотите посмотреть, или рассказ, который вы читаете, или карту, которую вы хотите просмотреть, или заголовки новостей и т. д. Это одна из частей сайта, которая определённо будет меняться от страницы к странице!</p>
            \n  
         </dd>
         \n  
         <dt id="боковая_панель"><a>Боковая панель</a></dt>
         \n  
         <dd>
            \n    
            <p>Как правило, содержит некоторую второстепенную информацию, ссылки, цитаты, рекламу и т.д. Обычно она относится к содержимому в основном контенте (например, на странице со статьёй, боковая панель может содержать биографию автора или ссылки на связанные статьи), но в некоторых случаях здесь размещают и другие элементы, например, вторичную навигационную систему.</p>
            \n  
         </dd>
         \n  
         <dt id="нижний_колонтитул_футер"><a>Нижний колонтитул (футер)</a></dt>
         \n  
         <dd>
            \n    
            <p>Полоса в нижней части страницы, которая обычно содержит уведомления об авторских правах или контактную информацию. Это место для размещения общей информации (например, заголовка), но обычно эта информация не является критичной или вторична для самого веб-сайта. Нижний колонтитул также иногда используется для <a>SEO</a> целей, предоставляя ссылки для быстрого доступа к популярному контенту.</p>
            \n  
         </dd>
         \n
      </dl>
      \n
      <p>"Типичный веб-сайт" может быть структурирован примерно так:</p>
      \n
      <p>\n  \n</p>
   </div>
</section>
<section aria-labelledby="html_для_структурирования_содержимого">
   <h3 id="html_для_структурирования_содержимого"><a>HTML для структурирования содержимого</a></h3>
   <div class="section-content">
      <p>Пример, показанный сверху, не красив и примитивен, но идеально подходит для иллюстрирования типичного макета веб-сайта. У некоторых веб-сайтов больше колонок, некоторые — более сложные, но идею вы поняли. С правильным CSS вы могли бы использовать практически любые элементы для обёртывания различных разделов и стилизовать их так, как вам хочется, но, как обсуждалось ранее, нам нужно уважать семантику и <strong>использовать правильный элемент для правильной работы</strong>.</p>
      \n
      <p>Это потому, что визуальные эффекты — это ещё не самое главное. Мы используем цвет и размер шрифта для привлечения внимания посетителей к наиболее полезным частям содержимого, такого как навигационное меню или связанные ссылки, но что насчёт людей со слабым зрением, к примеру, для которых концепция "розового" и "большого шрифта" не будет полезной?</p>
      \n
      <div class="notecard note" id="sect1">
         \n  
         <p><strong>Примечание:</strong> Люди с дальтонизмом составляют около <a class="external" target="_blank">8% мирового населения</a>. Слепые и слабовидящие люди составляют примерно 4-5% населения мира (в 2012 году в мире было <a class="external" target="_blank">285 миллионов таких людей</a>, а общая численность населения составляла <a class="external" target="_blank">около 7 миллиардов</a>).</p>
         \n
      </div>
      \n
      <p>В своём HTML-коде вы можете размечать разделы содержимого сайта на основе их <em>функциональности</em> — использовать элементы, которые представляют разделы контента, описанные выше, а вспомогательные технологии, такие как программы чтения с экрана, смогут распознавать эти элементы и помогать в таких задачах, как "найти основную навигацию" или "найти основное содержимое". Как мы упоминали ранее в ходе курса, существует ряд <a>последствий неиспользования правильной структуры элементов и семантики для правильной работы.</a></p>
      \n
      <p>Для реализации такой семантической разметки HTML предоставляет выделенные теги, которые можно использовать для создания таких разделов, например:</p>
      \n
      <ul>
         \n  
         <li><strong>Заголовок:</strong> <a><code>&lt;header&gt;</code></a>.</li>
         \n  
         <li><strong>Навигационное меню:</strong> <a><code>&lt;nav&gt;</code></a>.</li>
         \n  
         <li><strong>Основное содержимое:</strong> <a><code>&lt;main&gt;</code></a>, с различными подразделами содержимого, представленными элементами <a><code>&lt;article&gt;</code></a>, <a><code>&lt;section&gt;</code></a> и <a><code>&lt;div&gt;</code></a>.</li>
         \n  
         <li><strong>Боковая панель:</strong> <a><code>&lt;aside&gt;</code></a>, обычно располагается внутри <a><code>&lt;main&gt;</code></a>.</li>
         \n  
         <li><strong>Нижний колонтитул:</strong> <a><code>&lt;footer&gt;</code></a>.</li>
         \n
      </ul>
   </div>
</section>
<section aria-labelledby="активное_обучение_исследование_кода_для_нашего_примера">
   <h3 id="активное_обучение_исследование_кода_для_нашего_примера"><a>Активное обучение: исследование кода для нашего примера</a></h3>
   <div class="section-content">
      <p>Наш пример, представленный выше, содержит следующий код (Вы также можете <a class="external" target="_blank">найти пример в нашем репозитории Github</a>). Мы хотели бы, чтобы вы взглянули на приведённый выше пример, а затем просмотрели код ниже, чтобы узнать, из каких частей он состоит.</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n\n    <title>Заголовок моей страницы</title>\n    <link href="https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One" rel="stylesheet" type="text/css">\n    <link rel="stylesheet" href="style.css">\n\n    <!-- следующие 3 строки нужны для корректного отображения семантических элементов HTML5 в старых версиях Internet Explorer-->\n    <!--[if lt IE 9]>\n      <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js"></script>\n    <![endif]-->\n  \n\n  \n    <!-- Вот наш главный заголовок, который используется на всех страницах нашего веб-сайта -->\n\n    <header>\n      <h1>Заголовок</h1>\n    </header>\n\n    <nav>\n      <ul>\n        <li><a href="#">Домашняя страница</a></li>\n        <li><a href="#">Наша команда</a></li>\n        <li><a href="#">Проекты</a></li>\n        <li><a href="#">Контакты</a></li>\n      </ul>\n\n      <!-- Форма поиска — это ещё один распространённый нелинейный способ навигации по веб-сайту. -->\n\n      <form>\n        <input type="search" name="q" placeholder="Search query">\n        <input type="submit" value="Go!">\n      </form>\n    </nav>\n\n    <!-- Здесь основное содержимое нашей страницы -->\n    <main>\n      <!-- Она содержит статью -->\n      <article>\n        <h2>Заголовок статьи</h2>\n\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Donec a diam\n          lectus. Set sit amet ipsum mauris. Maecenas congue ligula as quam\n          viverra nec consectetur ant hendrerit. Donec et mollis dolor. Praesent\n          et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt\n          congue enim, ut porta lorem lacinia consectetur.\n        </p>\n\n        <h3>Подраздел</h3>\n\n        <p>\n          Donec ut librero sed accu vehicula ultricies a non tortor. Lorem ipsum\n          dolor sit amet, consectetur adipisicing elit. Aenean ut gravida lorem.\n          Ut turpis felis, pulvinar a semper sed, adipiscing id dolor.\n        </p>\n\n        <p>\n          Pelientesque auctor nisi id magna consequat sagittis. Curabitur\n          dapibus, enim sit amet elit pharetra tincidunt feugiat nist imperdiet.\n          Ut convallis libero in urna ultrices accumsan. Donec sed odio eros.\n        </p>\n\n        <h3>Ещё один подраздел</h3>\n\n        <p>\n          Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum\n          soclis natoque penatibus et manis dis parturient montes, nascetur\n          ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem\n          facilisis semper ac in est.\n        </p>\n\n        <p>\n          Vivamus fermentum semper porta. Nunc diam velit, adipscing ut\n          tristique vitae sagittis vel odio. Maecenas convallis ullamcorper\n          ultricied. Curabitur ornare, ligula semper consectetur sagittis, nisi\n          diam iaculis velit, is fringille sem nunc vet mi.\n        </p>\n      </article>\n\n      <!-- Дополнительный контент также может быть вложен в основной контент -->\n      <aside>\n        <h2>Связанные темы</h2>\n\n        <ul>\n          <li><a href="#">Мне нравится стоять рядом с берегом моря</a></li>\n          <li><a href="#">&gt;Мне нравится стоять рядом с морем</a></li>\n          <li><a href="#">Даже на севере Англии</a></li>\n          <li><a href="#">Здесь не перестаёт дождь</a></li>\n          <li><a href="#">Лаааадно...</a></li>\n        </ul>\n      </aside>\n    </main>\n\n    <!-- И вот наш главный нижний колонтитул, который используется на всех страницах нашего веб-сайта -->\n\n    <footer>\n      <p>©Авторские права никому не принадлежат, 2050. Все права защищены.</p>\n    </footer>\n  \n\n</pre>
      </div>
      \n
      <p>Потратьте некоторое время, чтобы просмотреть код и понять его — комментарии внутри кода также помогут вам в этом. Мы не просим вас делать ничего больше в этом уроке, потому что ключ к пониманию макета документа заключается в написании осмысленной структуры HTML, а затем её развёртывании с помощью CSS. Мы подождём, пока вы не начнёте изучать CSS-макет как часть темы CSS.</p>
   </div>
</section>
<section aria-labelledby="подробнее_об_элементах_html_макета">
   <h3 id="подробнее_об_элементах_html_макета"><a>Подробнее об элементах HTML макета</a></h3>
   <div class="section-content">
      <p>Полезно понять общий смысл всех структурных элементов HTML — это то, над чем вы будете работать постепенно, когда начнёте получать больше опыта с веб-разработкой. Вы можете ознакомиться с деталями, прочитав статью <a>HTML-элементы</a>. Пока что это основные определения, которые вы должны попытаться понять:</p>
      \n
      <ul>
         \n  
         <li><a><code>&lt;main&gt;</code></a> предназначен для содержимого, <em>уникального для этой страницы</em>. Используйте <code>&lt;main&gt;</code> только <em>один</em> раз на странице и размещайте прямо внутри <a><code>&lt;body&gt;</code></a>. В идеале он не должен быть вложен в другие элементы.</li>
         \n  
         <li><a><code>&lt;article&gt;</code></a> окружает блок связанного содержимого, который имеет смысл сам по себе без остальной части страницы (например, один пост в блоге).</li>
         \n  
         <li><a><code>&lt;section&gt;</code></a> подобен <code>&lt;article&gt;</code>, но больше подходит для группирования одной части страницы, которая представляет собой одну часть функциональности (например, мини-карту или набор заголовков статей и сводок). Считается хорошей практикой начинать каждый раздел с <a>заголовка</a>. Также обратите внимание, что в зависимости от контекста вы можете разбить <code>&lt;article&gt;</code> на несколько <code>&lt;section&gt;</code> или, наоборот, <code>&lt;section&gt;</code> на несколько <code>&lt;article&gt;</code>.</li>
         \n  
         <li><a><code>&lt;aside&gt;</code></a> содержит контент, который не имеет прямого отношения к основному содержимому, но может содержать дополнительную информацию, косвенно связанную с ним (словарь, биография автора, связанные ссылки и т. д.).</li>
         \n  
         <li><a><code>&lt;header&gt;</code></a> представляет собой группу вводного содержимого. Если он дочерний элемент <a><code>&lt;body&gt;</code></a>, то он определяет глобальный заголовок веб-страницы, но если он дочерний элемент <a><code>&lt;article&gt;</code></a> или <a><code>&lt;section&gt;</code></a>, то определяет конкретный заголовок для этого раздела (постарайтесь не путать его с <a>titles и headings</a>).</li>
         \n  
         <li><a><code>&lt;nav&gt;</code></a> содержит основные функции навигации для страницы. Так же часто в нем можно увидеть логотип и / или название сайта или компании. Вторичные ссылки и т. д. не входят в навигацию.</li>
         \n  
         <li><a><code>&lt;footer&gt;</code></a> представляет собой группу конечного контента для страницы.</li>
         \n
      </ul>
   </div>
</section>
<section aria-labelledby="несемантические_обёртки">
   <h3 id="несемантические_обёртки"><a>Несемантические обёртки</a></h3>
   <div class="section-content">
      <p>Иногда вы будете сталкиваться с ситуацией, когда вы не можете найти идеальный семантический элемент, чтобы сгруппировать некоторые элементы вместе или обернуть некоторый контент. Иногда вам просто нужно будет сгруппировать несколько элементов вместе, чтобы применить к ним, как к единой сущности, <a>CSS</a> или <a>JavaScript</a>. Для таких случаев в HTML есть элементы <a><code>&lt;div&gt;</code></a> и <a><code>&lt;span&gt;</code></a>. Вам следует использовать их с подходящим значением атрибута <a><code>class</code></a> или <a><code>id</code></a>, чтобы можно было легко получить к ним доступ.</p>
      \n
      <p><a><code>&lt;span&gt;</code></a> — это строчный несемантический элемент, который стоит использовать только если вы не можете подобрать более подходящий семантический текстовый элемент для обёртывания контента или если не хотите добавлять какие-либо конкретные значения. Например:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  Пьяный Король возвратился в свою комнату в 01:00 и всё никак не мог войти в\n  дверь: хмель мешал\n  <span class="editor-note">[Примечание редактора: В этот момент свет на сцене должен быть\n    приглушён]</span>.\n</p>\n</pre>
      </div>
      \n
      <p>В этом примере примечание редактора просто сообщает дополнительные пожелания режиссёру пьесы. В нем нет особого семантического значения. Для слабовидящих пользователей, возможно, примечание будет отделено от основного содержимого с помощью CSS.</p>
      \n
      <p><a><code>&lt;div&gt;</code></a> — это блочный несемантический элемент, который следует использовать только если вы не можете подобрать более подходящий семантический блочный элемент или если не хотите добавлять какие-либо конкретные значения. Например, представьте виджет корзины в интернет-магазине, который вы можете открыть в любой момент нахождения на сайте:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><div class="shopping-cart">\n  <h2>Корзина</h2>\n  <ul>\n    <li>\n      <p>\n        <a href=""><strong>Silver earrings</strong></a>: $99.95.\n      </p>\n      <img src="../products/3333-0985/thumb.png" alt="Серебряные серьги">\n    </li>\n    <li>...</li>\n  </ul>\n  <p>Итого: $237.89</p>\n</div>\n</pre>
      </div>
      \n
      <p>Ему не подходит <code>&lt;aside&gt;</code>, поскольку это не обязательно относится к основному содержимому страницы (Вы хотите, чтобы его можно было просматривать из любого места). Также не подходит и <code>&lt;section&gt;</code>, т. к. это не часть основного содержимого страницы. Поэтому <code>&lt;div&gt;</code> подходит в этом случае. Мы включили заголовок в качестве указателя, чтобы помочь пользователям программ чтения с экрана в его поиске.</p>
      \n
      <div class="notecard warning" id="sect2">
         \n  
         <p><strong>Предупреждение:</strong> <strong>Внимание</strong>: <code>div</code> настолько просто использовать, что легко переборщить. Поскольку они не несут никакого семантического значения, они просто загромождают ваш HTML-код. Старайтесь использовать их только тогда, когда нет лучшего семантического решения, и постарайтесь свести их использование к минимуму, иначе вам будет трудно обновлять и поддерживать ваши документы.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="перенос_строки_и_горизонтальный_разделитель">
   <h3 id="перенос_строки_и_горизонтальный_разделитель"><a>Перенос строки и горизонтальный разделитель</a></h3>
   <div class="section-content">
      <p>Два элемента, которые вы будете периодически использовать или захотите узнать о них: <a><code>&lt;br&gt;</code></a> и <a><code>&lt;hr&gt;</code></a>:</p>
      \n
      <p><code>&lt;br&gt;</code> создаёт разрыв строки в абзаце, и это единственный способ изменить жёсткую структуру в ситуации, когда вам нужна серия фиксированных коротких строк, например, в почтовом адресе или стихотворении. Пример:</p>
      \n
      <div class="code-example">
         <div class="example-header"></div>
         <pre compile="false" disable="true" language="markup"><p>\n  Жила-была девчушка Нелл,<br>\n  Любившая писать HTML:<br>\n  Её семантика ужасна была — <br>\n  Она и сама прочитать ничего не могла.\n</p>\n</pre>
      </div>
      \n
      <p>Без элемента <code>&lt;br&gt;</code> абзац разместится в одну длинную линию (как было сказано ранее, <a>HTML игнорирует переносы строк</a>), а с ним в коде — разметка будет выглядеть следующим образом:</p>
      \n
      <p>\n  Жила-была девчушка Нелл,\n  Любившая писать HTML:\n  Её семантика ужасна была —\n  Она и сама прочитать ничего не могла.\n</p>
      \n
      <p><code>&lt;hr&gt;</code> создаёт горизонтальный разделитель в документе, это означает тематическое изменение текста (например, изменение темы или сцены). Визуально он просто похож на горизонтальную линию. В качестве примера:</p>
      \n
      <pre compile="false" disable="true" language="markup"><p>Рон был зажат в углу адскими тварями. Он боялся, но твёрдо решил защитить своих друзей, поднял свою волшебную палочку и приготовился к битве, надеясь, что справится со своим несчастьем.</p>\n<hr>\n<p>Тем временем Гарри сидел дома с раскрытым указом и размышлял о том, когда выйдут новые серии спин-оффов; в это время зачарованное письмо пархнуло в окно и приземлилось у него на коленях. Он прочитал его и подскочил на ноги; он подумал: "Думаю, самое время вернуться к работе".</p>\n</pre>
      \n
      <p>Будет выглядеть примерно так:</p>
      \n
      <p>Рон был зажат в углу адскими тварями. Он боялся, но твёрдо решил защитить своих друзей, поднял свою волшебную палочку и приготовился к битве, надеясь, что справится со своим несчастьем.</p>
      \n
      <hr>
      \n
      <p>Тем временем Гарри сидел дома с раскрытым указом и размышлял о том, когда выйдут новые серии спин-оффов; в это время зачарованное письмо пархнуло в окно и приземлилось у него на коленях. Он прочитал его и подскочил на ноги; он подумал: "Думаю, самое время вернуться к работе".</p>
   </div>
</section>
<section aria-labelledby="планирование_простого_веб-сайта">
   <h3 id="планирование_простого_веб-сайта"><a>Планирование простого веб-сайта</a></h3>
   <div class="section-content">
      <p>Когда вы уже спланировали содержание одной веб-страницы, следующий логический шаг — продумать содержание всего веб-сайта: какие страницы нужны, как они будут устроены и связаны друг с другом для лучшего восприятия пользователем. Это называется <a>Information architecture</a>. В большом, сложном веб-сайте на планирование может уходить много времени, однако спроектировать простой веб-сайт из нескольких страниц может быть очень легко и весело!</p>
      \n
      <ol>
         \n  
         <li>Имейте в виду, что у вас будет несколько элементов, общих для большинства (если не всех) страниц — например, меню навигации и содержимого нижнего колонтитула. Например, для сайта компании хорошая идея разместить контактные данные в нижнем колонтитуле на каждой странице. Составьте список элементов, общих для всех страниц. \n    \n  </li>
         \n  
         <li>Теперь набросайте структуру страниц (можно взять за образец наш простой дизайн, приведённый раннее). Что находится в этих блоках?\n    \n  </li>
         \n  
         <li>Теперь составьте список остальной (уникальной для каждой страницы) информации, которую вы разместите на сайте.\n    \n  </li>
         \n  
         <li>Сгруппируйте информацию по темам. Какие части можно разместить на одной странице? Это похоже на метод <a>Card sorting</a>. \n    \n  </li>
         \n  
         <li>Составьте карту сайта. Обведите каждую страницу рамкой, и продумайте перемещения пользователя между ними. Обычно в центре оказывается главная страница, с которой можно быстро перейти на все остальные. На небольшом сайте большинство страниц помещают в главную навигацию, но не обязательно класть туда все ссылки. Также можете пометить, как выглядят элементы страниц — ссылками, списками, карточками.</li>
         \n
      </ol>
      \n
      <p>\n  \n</p>
   </div>
</section>
<section aria-labelledby="самостоятельная_работа_создайте_свою_собственную_карту_сайта">
   <h3 id="самостоятельная_работа_создайте_свою_собственную_карту_сайта"><a>Самостоятельная работа: создайте свою собственную карту сайта</a></h3>
   <div class="section-content">
      <p>Применить наш метод к своему сайту. О чем он будет?</p>
      \n
      <div class="notecard note" id="sect3">
         \n  
         <p><strong>Примечание:</strong> Сохраните свой код, он вам ещё понадобится.</p>
         \n
      </div>
   </div>
</section>
<section aria-labelledby="заключение">
   <h3 id="заключение"><a>Заключение</a></h3>
   <div class="section-content">
      <p>Вы стали лучше понимать, как структурировать веб-страницу или сайт. В последней статье этого модуля мы узнаем, как отлаживать HTML.</p>
   </div>
</section>
<section aria-labelledby="дополнительные_материалы">
   <h3 id="дополнительные_материалы"><a>Дополнительные материалы</a></h3>
   <div class="section-content">
      <ul>
         \n  
         <li><a class="only-in-en-us" title="Currently only available in English (US)">Using HTML sections and outlines <small>(en-US)<small></small></small></a>: Продвинутый справочник по семантическим элементам и алгоритму выделения разделов (outline algorithm) в HTML5.</li>
         \n
      </ul>
   </div>
</section>
`,
		works: [],
	},
	{
		book: 'HTML',
		title: 'Отладка HTML',

		content:
			'<header><h1>Отладка HTML</h1></header><div class="section-content">\n<p>Написать HTML — здорово, но как понять, где ошибка, когда что-то не работает? В этой статье описаны несколько инструментов, которые помогают искать и исправлять ошибки в HTML.</p>\n</div><section aria-labelledby="отладка_—_это_не_страшно"><h2 id="отладка_—_это_не_страшно"><a>Отладка — это не страшно</a></h2><div class="section-content"><p>Во время написания какого-нибудь кода, обычно все идёт хорошо, пока не появляется тот момент, когда вы совершаете ошибку. Итак, ваш код не работает, или работает не так, как вы задумывали. Если вы попытаетесь скомпилировать неработающую программу на языке <a class="external" target="_blank">Rust</a>, компилятор укажет на ошибку:</p>\n<p>\n  В данном случае, сообщение об ошибке понять относительно просто — "unterminated double quote string". Если вы внимательно посмотрите на <code>println!(Hello, world!");</code> , то заметите, что здесь отсутствует двойная кавычка. Разумеется, сообщения об ошибках могут становиться куда более сложными для понимания по мере роста вашего кода, и даже самые простые случаи могут показаться пугающими для тех, кто ничего не знает о Rust.\n</p>\n<p>Но не бойтесь отладки! Чтобы комфортно писать и отлаживать любой код, нужно понимать язык и его инструменты.</p></div></section><section aria-labelledby="html_и_отладка"><h2 id="html_и_отладка"><a>HTML и отладка</a></h2><div class="section-content"><p>HTML не так сложен к пониманию, как Rust. HTML не компилируется в какую-либо другую форму перед тем, как браузер проанализирует это и покажет результат (он является <em>интерпретируемым</em>, а не <em>компилируемым</em>). Синтаксис HTML элементов намного понятнее, чем у "настоящих языков программирования", таких как Rust, <a>JavaScript</a>, или <a class="only-in-en-us" title="Currently only available in English (US)">Python <small>(en-US)</small></a>. Способ, которым браузеры читают HTML более <strong>толерантен</strong>, чем у языков программирования, интерпретирующих свой код строже. Это одновременно и плохо, и хорошо.</p></div></section><section aria-labelledby="толерантный_код"><h3 id="толерантный_код"><a>Толерантный код</a></h3><div class="section-content"><p>Так что же означает толерантный? В общих чертах, когда вы напортачили в коде, есть два типа ошибок, с которыми вы столкнётесь:</p>\n<ul>\n  <li><strong>Синтаксические ошибки (Syntax errors)</strong>: Это ошибки в правильности написания, как это было выше, в примере с Rust. Такие обычно легко исправлять, в той мере, в какой вы знакомы с синтаксисом языка и знаете, что означают сообщения об ошибках.</li>\n  <li><strong>Логические ошибки (Logic errors)</strong>: Это ошибки, появляющиеся в том случае, если синтаксис корректен, но код не выполняет своего предназначения, то есть программа выполняется неверно. Такие исправлять сложнее, чем синтаксические, поскольку не выводится сообщений, указывающих место, где вы ошиблись.</li>\n</ul>\n<p>HTML не страдает от синтаксических ошибок, потому что браузер читает код толерантно, в том смысле, что страницы могут отображаться даже если синтаксические ошибки присутствуют. Браузеры имеют встроенные правила по интерпретации неверно написанной разметки, и вы можете запустить что-либо, даже если вы имели в виду другое. Это может стать настоящей проблемой!</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> HTML читается толерантно, потому что когда веб только появился, было решено позволить людям публиковать контент даже при условии некорректностей в коде, так как это куда более важно, чем уверенность в абсолютно верном синтаксисе. Веб не был бы сейчас так популярен, если бы относился к новичкам строго.</p>\n</div></div></section><section aria-labelledby="активное_обучение_знакомство_с_толерантным_кодом"><h3 id="активное_обучение_знакомство_с_толерантным_кодом"><a>Активное обучение: Знакомство с толерантным кодом</a></h3><div class="section-content"><p>Время изучить природу толерантного кода в HTML.</p>\n<ol>\n  <li>Для начала, скачайте наш <a class="external" target="_blank">пример отладки</a> и сохраните локально. Эта демонстрация намеренно написана с ошибками, которые нам предстоит обнаружить.</li>\n  <li>Далее, откройте её в браузере. Вы увидите нечто вроде этого :\n    \n  </li>\n  <li>Сейчас документ выглядит не особо хорошо; Давайте посмотрим в код и выясним почему (Показано только тело документа):\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><h1>HTML debugging examples</h1>\n\n<p>What causes errors in HTML?\n\n</p><ul>\n  <li>Unclosed elements: If an element is <strong>not closed properly,\n      then its effect can spread to areas you didn\'t intend\n\n  </strong></li><li><strong>Badly nested elements: Nesting elements properly is also very important\n      for code behaving correctly. <strong>strong <em>strong emphasised?</em></strong><em>\n      what is this?</em>\n\n  </strong></li><li><strong>Unclosed attributes: Another common source of HTML problems. Let\'s\n      look at an example: </strong></li></ul></pre></div>\n  </li>\n  <li>Рассмотрим проблемы:\n    <ul>\n      <li>У <a>параграфа</a> и <a>элемента списка</a> не закрыты теги. На изображении выше видно, что разметка не пострадала, так как браузеру легко сделать вывод о том, где заканчивается один элемент и начинается другой.</li>\n      <li>Первый <a><code>&lt;strong&gt;</code></a> элемент также не имеет закрывающего тега. Это уже более проблематично, так как сложно сказать, где элемент должен заканчиваться. На деле, весь оставшийся текст был выделен жирным.</li>\n      <li>Следующая часть нарушает правила вложенности: <code>&lt;strong&gt;strong &lt;em&gt;strong emphasised?&lt;/strong&gt; what is this?&lt;/em&gt;</code>. В этом случае код тоже сложно проинтерпретировать по причине, описанной выше.</li>\n      <li>В атрибуте <a><code>href</code></a> отсутствует закрывающая двойная кавычка. Это послужило причиной крупной проблемы — ссылка не воспроизвелась вовсе.</li>\n    </ul>\n  </li>\n  <li>Сейчас же посмотрим, как браузер сгенерировал собственную разметку, в противовес исходной разметке документа. Чтобы сделать это, воспользуемся инструментами разработчика. Если вы не знакомы с инструментами разработчика, потратьте несколько минут на <a>Обзор инструментов разработки в браузерах</a>.</li>\n  <li>В DOM инспекторе вы можете увидеть как сгенерировалась новая разметка: \n    \n  </li>\n  <li>Используя DOM инспектор, давайте рассмотрим детали нашего кода, чтобы увидеть, как браузер пытается исправить наши ошибки в HTML (мы обозреваем в Firefox; другой современный браузер должен выдать те же результаты):\n    <ul>\n      <li>Параграфы и элементы списка получены с закрывающими тегами.</li>\n      <li>Было неочевидно, где элемент <code>&lt;strong&gt;</code> должен был закрыться, так что браузер обернул каждый отдельный блок текста своими собственными тегами strong, причём до самого низа документа!</li>\n      <li>Некорректная вложенность была исправлена браузером следующим образом:\n        <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><strong>strong\n  <em>strong emphasised?</em>\n</strong>\n<em> what is this?</em>\n</pre></div>\n      </li>\n      <li>Ссылка с отсутствующими двойными кавычками была удалена насовсем. Последний элемент списка будет выглядеть так:\n        <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><li>\n  <strong>Unclosed attributes: Another common source of HTML problems. Let\'s\n    look at an example:\n  </strong>\n</li>\n</pre></div>\n      </li>\n    </ul>\n  </li>\n</ol></div></section><section aria-labelledby="валидация_html"><h3 id="валидация_html"><a>Валидация HTML</a></h3><div class="section-content"><p>Из примера выше ясно, что стоит проверять валидность HTML. В простом примере сверху можно просто просмотреть весь код и найти ошибки, но как быть с огромными, сложными страницами?</p>\n<p>Лучше всего проверить страницу в <a class="external" target="_blank">сервисе валидации разметки</a>. Его создал и поддерживает W3C — организация, которая занимается спецификациями HTML, CSS и других веб-технологий. Сервис проверит ваш HTML и составит отчёт по ошибкам в нем.</p>\n<p>\n  \n</p>\n<p>HTML можно проверить по адресу, загрузив файл или напрямую ввести код HTML.</p></div></section><section aria-labelledby="активное_обучение_валидируем_html-документ"><h3 id="активное_обучение_валидируем_html-документ"><a>Активное обучение: Валидируем HTML-документ</a></h3><div class="section-content"><p>Попробуем проверить <a class="external" target="_blank">документ-пример</a>.</p>\n<ol>\n  <li>Откройте <a class="external" target="_blank">сервис валидации разметки</a> в браузере.</li>\n  <li>Перейдите в режим <a class="external" target="_blank">Validate by Direct Input</a>.</li>\n  <li>Скопируйте весь код документа (не только body) и вставьте в место для ввода.</li>\n  <li>Нажмите на <em>Check (проверить)</em>.</li>\n</ol>\n<p>Вы увидите список ошибок и другую информацию.</p>\n<p>\n  \n</p>\n<h4 id="работа_с_сообщениями_об_ошибках">Работа с сообщениями об ошибках</h4>\n<p>Обычно сразу ясно, что значат сообщения, но иногда приходится постараться, чтобы понять, в чем дело. Сейчас мы пройдёмся по всем ошибкам и разберём, что они значат. Обратите внимание, что в сообщениях указаны строка и столбец кода, чтобы ошибки было проще искать.</p>\n<ul>\n  <li>"End tag <code>li</code> implied, but there were open elements" (2 instances): Нет явного закрывающего тега, хотя браузер догадывается, где он должен быть. Сообщение указывает на строку после той, на которой ожидался закрывающий тег, но вы найдёте нужное место.</li>\n  <li>"Unclosed element <code>strong</code>": Это очень простая ошибка — элемент <a><code>&lt;strong&gt;</code></a> не закрыт, и сообщение указывает прямо на открывающий тег.</li>\n  <li>"End tag <code>strong</code> violates nesting rules": Элемент неправильно вложен — на этом уровне нет парного открывающего тега.</li>\n  <li>"End of file reached when inside an attribute value. Ignoring tag": Загадочное сообщение. Дело в том, что где-то (скорее всего, в конце документа) неправильно прописано свойство элемента, и конец файла оказался внутри этого свойства. В браузере не видно ссылки — скорее всего, проблема рядом с ней.</li>\n  <li>"End of file seen and there were open elements": Файл закончился, но некоторые элементы не закрыты. Сообщение указывает на конец файла, в данном случае не закрыт элемент\n    <pre compile="false" disable="true" language="markup">example: </pre>\n    <div class="notecard note" id="sect2">\n      <p><strong>Примечание:</strong> Свойство без закрывающей кавычки может проглотить закрывающий тег — браузер считает его частью значения этого свойства.</p>\n    </div>\n  </li>\n  <li>"Unclosed element <code>ul</code>": Странно, ведь элемент <a><code>&lt;ul&gt;</code></a> закрыт. Настоящая проблема всё там же — элемент <a><code>&lt;a&gt;</code></a> не закрыт из-за недостающей кавычки в свойстве.</li>\n</ul>\n<p>Если некоторые ошибки кажутся вам странными, начните исправление с остальных и проверьте документ ещё раз. Иногда одна ошибка ломает большую часть документа.</p>\n<p>Когда вы увидите эту надпись, в вашем документе больше нет ошибок:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Теперь вы умеете отлаживать HTML. С новыми знаниями вам будет проще разобраться и в отладке более сложных языков — например, CSS и JavaScript. На этом мы заканчиваем вводный модуль курса HTML — время попробовать свои силы в упражнениях.</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Разметка письма',

		content:
			'<header><h1>Разметка письма</h1></header><div class="section-content">\n<p>Мы все учимся писать письма рано или поздно; это также хороший способ испытать наши навыки форматирования! В этом задании у вас будет письмо для проверки ваших навыков форматирования текста HTML, использования гиперссылок и элемента <code>&lt;head&gt;</code>.</p>\n</div><section aria-labelledby="отправная_точка"><h2 id="отправная_точка"><a>Отправная точка</a></h2><div class="section-content"><p>Для начала задания, вы должны <a class="external" target="_blank">скачать текст</a>, который вам надо отформатировать, и <a class="external" target="_blank">CSS стиль</a>, который вы должны подключить к вашему HTML. Создайте .html файл используя текстовый редактор, которым вы пользуетесь (или воспользуйтесь онлайн редакторами, таким как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>).</p></div></section><section aria-labelledby="описание_проекта"><h2 id="описание_проекта"><a>Описание проекта</a></h2><div class="section-content"><p>В этом проекте, ваша задача - отформатировать письмо, которое должно быть размещено во внутренней сети университета. Это письмо - ответ исследователя будущему PhD студенту о его заявлении на работу в университете.</p>\n<p>Блочные элементы / структура:</p>\n<ul>\n  <li>Вы должны корректно структурировать весь документ, включив в него элементы doctype, и <a><code>&lt;html&gt;</code></a>, <a><code>&lt;head&gt;</code></a> и <a><code>&lt;body&gt;</code></a>.</li>\n  <li>Письмо в целом должно быть размечено используя параграфы и заголовки, за исключением следующих пунктов - один заголовок верхнего уровня (начинается на "Re:") и три заголовка второго уровня.</li>\n  <li>Даты начала семестра, изучения предметов и экзотических танцев должны быть помечены используя соответствующие типы списков.</li>\n  <li>Два адреса должны быть помещены внутри элементов <a><code>&lt;address&gt;</code></a>. Каждая строка адреса должна находиться на новой строке, но не быть новым параграфом.</li>\n</ul>\n<p>Строчные элементы:</p>\n<ul>\n  <li>Имена отправителя и получателя (как и "Tel" и "Email") должны быть выделены жирным.</li>\n  <li>Четырём датам в документе необходимо выбрать правильные элементы содержащие машинно-читаемые даты.</li>\n  <li>Первый адрес и первая дата в письме должны иметь атрибут <code>class</code> со значением <code>"sender-column"</code>; CSS стиль, который вы добавите позже, позволит выравнять по правому боку, как оно и должно быть в классической разметке письма.</li>\n  <li>Пять акронимов/аббревиатур в главном тексте письма должны быть размечены, чтобы предоставить подсказки для каждого акронима/аббревиатуры.</li>\n  <li>Шесть под/надстрочных элементов должны быть оформлены корректно в химической формуле, как и числа 103 и 104 (степень числа должна быть над числом).</li>\n  <li>Для разметки символов градуса и умножения воспользуйтесь <a class="external" target="_blank">справкой</a>.</li>\n  <li>Постарайтесь выделить как минимум два нужных по смыслу слова в тексте жирным.</li>\n  <li>Есть два места, где следует разместить гиперссылки; добавьте нужные ссылки с заголовками. В качестве адреса для ссылок используйте <code>http://example.com</code>.</li>\n  <li>Девиз университета и цитата должны быть размечены соответствующими элементами.</li>\n</ul>\n<p>Заголовок документа:</p>\n<ul>\n  <li>Кодировка документа должна быть указана как utf-8 с использованием соответствующего мета-тега.</li>\n  <li>Автор письма должен быть указан в соответствующем мета-теге.</li>\n  <li>Предоставленный CSS должен быть включён в соответствующий тег.</li>\n</ul></div></section><section aria-labelledby="советы_и_подсказки"><h2 id="советы_и_подсказки"><a>Советы и подсказки</a></h2><div class="section-content"><ul>\n  <li>Проверяйте свой HTML в <a class="external" target="_blank">валидаторе W3C</a> — писать валидный код здорово!</li>\n  <li>Для задания не нужно знать CSS — просто укажите CSS из задания в документе.</li>\n</ul></div></section><section aria-labelledby="пример"><h2 id="пример"><a>Пример</a></h2><div class="section-content"><p>Это скриншот размеченного письма:</p>\n<p>\n  \n</p></div></section><section aria-labelledby="оценка"><h2 id="оценка"><a>Оценка</a></h2><div class="section-content"><p>Если вам дали это задание на каком-то курсе, просто передайте свою страницу для проверки преподавателю. Если вы учитесь сами, обратитесь на <a class="external" target="_blank">форум, в тему этого задания</a>, или по тегу <a>#mdn</a> в нашем IRC-канале (<a class="external" target="_blank">Mozilla IRC</a>). Сделайте это задание сами — вам некого обманывать, кроме себя самого.</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Структурируем страницу',

		content:
			'<header><h1>Структурируем страницу</h1></header><div class="section-content">\n<p>Разметить страницу так, чтобы к ней было просто применить CSS — первое, чему должен научиться будущий веб-разработчик. В этом задании вам придётся подумать о том, как должна выглядеть страница, и подобрать подходящую семантическую разметку.</p>\n</div><section aria-labelledby="отправная_точка"><h2 id="отправная_точка"><a>Отправная точка</a></h2><div class="section-content"><p>Чтобы начать это, вы должны перейти и скачать <a class="external" target="_blank">архив содержащий все начальные активы</a>. Архив содержит:</p>\n<ul>\n  <li>HTML, где вам нужно добавить структурную разметку.</li>\n  <li>CSS для стилизации вашей разметки.</li>\n  <li>Изображения, которые используются на странице.</li>\n</ul>\n<p>Создайте пример на вашем локальном компьютере или, альтернативно, используйте сайт, например <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a> для исследования.</p></div></section><section aria-labelledby="краткое_описание_проекта"><h2 id="краткое_описание_проекта"><a>Краткое описание проекта</a></h2><div class="section-content"><p>Для этого проекта ваша задача - взять контент для домашней страницы веб-сайта наблюдения за птицами и добавить к нему структурные элементы, чтобы он мог использовать макет страницы. Он должен иметь:</p>\n<ul>\n  <li>Заголовок, охватывающий всю ширину сайта, содержащий основное название страницы, логотип сайта и меню навигации. Заголовок и логотип появляются рядом друг с другом, когда применяется стилизация, и навигация появляется ниже этих двух элементов.</li>\n  <li>Основная область содержимого, содержащая два столбца - основной блок, содержащий текст приветствия, и боковую панель для размещения миниатюр изображений.</li>\n  <li>Нижний колонтитул, содержащий информацию об авторских правах и разработчиках.</li>\n</ul>\n<p>Вам необходимо добавить подходящую обёртку для:</p>\n<ul>\n  <li>Заголовка</li>\n  <li>Меню навигации</li>\n  <li>Основного содержимого</li>\n  <li>Приветственного текста</li>\n  <li>Боковой панели изображения</li>\n  <li>Нижнего колонтитула</li>\n</ul>\n<p>Вы также должны:</p>\n<ul>\n  <li>Примените предоставленный CSS к странице, добавив ещё один элемент <a><code>&lt;link&gt;</code></a> чуть ниже существующего, указанного в начале.</li>\n</ul></div></section><section aria-labelledby="советы_и_подсказки"><h2 id="советы_и_подсказки"><a>Советы и подсказки</a></h2><div class="section-content"><ul>\n  <li>Используйте <a class="external" target="_blank">W3C HTML validator</a> для проверки вашего HTML; вы получите бонусные баллы, если он будет проверять как можно больше (строка «googleapis» используется для импорта пользовательских шрифтов на страницу из службы Google Fonts, она не проверяет, но не беспокойтесь об этом слишком много - валидатор - полезный инструмент, но 100% проверка является идеальной, а не полностью необходимой).</li>\n  <li>Вам не нужно знать CSS, чтобы сделать эту оценку; вам просто нужно поместить предоставленный CSS внутри HTML-элемента.</li>\n  <li>Предоставленный CSS разработан таким образом, что при добавлении правильных структурных элементов в разметку они будут отображаться зелёными на отображаемой странице.</li>\n  <li>Если вы застряли и не можете понять, какие элементы куда помещать, часто помогает вывести простую блок-схему макета страницы и сделать надписи на элементах, которые, по вашему мнению, должны обернуть каждый блок.</li>\n</ul></div></section><section aria-labelledby="пример"><h2 id="пример"><a>Пример</a></h2><div class="section-content"><p>Следующий скриншот показывает пример того, как может выглядеть домашняя страница после маркировки.</p>\n<p>\n  \n</p></div></section><section aria-labelledby="оценивание"><h2 id="оценивание"><a>Оценивание</a></h2><div class="section-content"><p>Если вам дали это задание на каком-то курсе, просто передайте свою страницу для проверки преподавателю. Если вы учитесь сами, обратитесь на <a class="external" target="_blank">форум, задав тему обсуждения этого упражнения, или в IRC-канале #mdn в IRC Mozilla</a>, или в IRC-канале <a>#mdn</a> в <a class="external" target="_blank">IRC Mozilla</a>. Попробуйте выполнить задание сами, ведь вам некого обманывать, кроме себя самого!</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Мультимедиа и встраивание',

		content:
			'<header><h1>Мультимедиа и встраивание</h1></header><div class="section-content"><p>Мы уже прочли много текста в этом курсе. МНОГО текста. Но веб был бы скучным, если бы состоял только из текста, поэтому давайте посмотрим, как оживить веб при помощи более интересного контента! Этот модуль объясняет, как при помощи HTML вставлять мультимедиа в ваши web-страницы, включая разные способы вставки изображений, видео, аудио, а также других страниц целиком.</p></div><section aria-labelledby="перед_стартом"><h2 id="перед_стартом"><a>Перед стартом</a></h2><div class="section-content"><p>Перед изучением этого модуля, вам необходимо изучить азы HTML, изложенные во <a>Введении в HTML</a>. Если вы не прошли этот модуль (или подобный ему), сначала пройдите его, затем возвращайтесь!</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если вы работаете на компьютере/планшете/другом устройстве, на котором у вас нет возможности создавать файлы, вы можете попробовать сделать упражнения на программирование (большинство из них) в онлайн сервисах, например в <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководство"><h2 id="руководство"><a>Руководство</a></h2><div class="section-content"><p>Этот модуль содержит следующие статьи, которые проведут вас через все основы внедрения мультимедиа на веб-страницах.</p>\n<dl>\n  <dt id="изображения_в_html"><a>Изображения в HTML</a></dt>\n  <dd>\n    <p>Можно рассматривать другие типы мультимедиа, но логично начать с простого элемента <a><code>&lt;img&gt;</code></a>, используемого для встраивания простого изображения в веб-страницу. В этой статье мы увидим, как использовать его в целом, включая основы, подписывать его, используя <a><code>&lt;figure&gt;</code></a>, и как он взаимодействует с фоновым изображением CSS.</p>\n  </dd>\n  <dt id="видео_и_аудио_контент"><a>Видео и аудио контент</a></dt>\n  <dd>\n    <p>Далее мы рассмотрим, как использовать элементы HTML5 <a><code>&lt;video&gt;</code></a> и <a><code>&lt;audio&gt;</code></a> для встраивания видео и аудио на наши страницы, включая основы, обеспечивая доступ к различным форматам файлов для разных браузеров, добавление подписей и субтитров, а также как добавить резервные копии для старых браузеров.</p>\n  </dd>\n  <dt id="от_object_к_iframe_—_другие_технологии_встраивания"><a>От &lt;object&gt; к &lt;iframe&gt; — другие технологии встраивания</a></dt>\n  <dd>\n    <p>В этом месте мы бы хотели сделать шаг в сторону, чтобы изучить пару элементов, которые позволят встраивать широкий спектр типов контента в ваши веб-страницы: элементы <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a>, <a><code>&lt;embed&gt;</code></a> и<a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;object&gt;</code> <small>(en-US)</small></a>. &lt;iframe&gt; используется для встраивания других веб-страниц, а другие два элемента позволяют встраивать PDF, SVG и даже Flash – устаревающая технология, но все ещё часто встречаемая.</p>\n  </dd>\n  <dt id="добавление_векторной_графики_в_веб"><a>Добавление векторной графики в Веб</a></dt>\n  <dd>\n    <p>Векторная графика может быть очень полезной в определённых ситуациях. В отличие от обычных форматов типа PNG/JPG, она не деформируются/пикселизируются при растяжении, она остаётся гладкой при масштабировании. Эта статья знакомит вас с понятием векторной графики и учит вас встраивать популярный формат <a>SVG</a> в веб-страницы.</p>\n  </dd>\n  <dt id="адаптивные_изображения"><a>Адаптивные изображения</a></dt>\n  <dd>\n    <p>В этой статье мы познакомимся с концепцией адаптивных изображений - изображений, которые хорошо работают на устройствах с сильно различающимися размерами экрана, разрешением и другими подобными характеристиками, и рассмотрим, какие инструменты предоставляет HTML для их реализации. Это помогает повысить производительность различных устройств. Адаптивные изображения - это всего лишь одна часть адаптивного дизайна, будущей темы CSS, которую вы должны изучить.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="аттестация"><h2 id="аттестация"><a>Аттестация</a></h2><div class="section-content"><p>Следующая аттестация проверит ваше понимание основ HTML, изложенных в перечисленных выше статьях.</p>\n<dl>\n  <dt id="страница_приветствия_mozilla"><a>Страница приветствия Mozilla</a></dt>\n  <dd>\n    <p>В этой аттестации мы проверим ваши знания по некоторым технологиям, которые обсуждались в статьях этого модуля, заставляя вас добавить несколько изображений и видео на примитивную приветственную страницу, посвящённую Mozilla!</p>\n  </dd>\n</dl></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Изображения в HTML',

		content:
			'<header><h1>Изображения в HTML</h1></header><div class="section-content">\n<p>В начале Web был просто текстом, что было довольно скучно. К счастью, это продолжалось не долго - до появления возможности вставлять изображения (и другие, более интересные, типы контента) в веб-страницы. Существуют и другие типы мультимедиа, однако логичнее начать со скромного <a><code>&lt;img&gt;</code></a> элемента, используемого для вставки простого изображения в веб-страницу. В этой статье мы рассмотрим, как использовать элемент, начиная с основ, снабжать примечаниями, используя <a><code>&lt;figure&gt;</code></a>, и разберём, как это относится к фоновым изображениям <a>CSS</a>.</p>\n</div><section aria-labelledby="как_разместить_картинку_на_странице"><h2 id="как_разместить_картинку_на_странице"><a>Как разместить картинку на странице?</a></h2><div class="section-content"><p>Чтобы разместить изображение на странице, нужно использовать тег <a><code>&lt;img&gt;</code></a>. Это пустой элемент (имеется ввиду, что не содержит текста и закрывающего тега), который требует минимум один атрибут для использования — <code>src</code> (произносится <em>эс-ар-си</em>, иногда говорят его полное название, <em>source</em>). Атрибут <code>src</code> содержит путь к изображению, которое вы хотите встроить в страницу, и может быть относительным или абсолютным URL, точно так же, как значения атрибута <code>href</code> для элемента <a><code>&lt;a&gt;</code></a>.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Перед тем как продолжить, вам стоит вспомнить про <a>типы адресов URL</a>, чтобы обновить в памяти про относительные и абсолютные адреса.</p>\n</div>\n<p>Например, если ваше изображение называется <code>dinosaur.jpg</code>, и оно находится в той же директории что и ваша HTML страница, вы можете встроить это изображение как:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="dinosaur.jpg">\n</pre></div>\n<p>Если изображение было в поддиректории <code>images</code> , находящаяся внутри той же директории, что и HTML страница (что рекомендует Google для индексации и целей SEO), тогда вы можете встроить его так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="images/dinosaur.jpg">\n</pre></div>\n<p>И так далее.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Поисковые системы также читают имена изображений и считают их для оптимизации поискового запроса. Поэтому присваивайте вашим изображениям смысловые имена: <code>dinosaur.jpg</code> лучше, чем <code>img835.png</code>.</p>\n</div>\n<p>Вы можете встроить изображение используя абсолютный URL, например:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="https://www.example.com/images/dinosaur.jpg">\n</pre></div>\n<p>Но это бессмысленно, так как он просто заставляет браузер делать больше работы, запрашивая каждый раз IP-адрес от DNS-сервера. Вы почти всегда будете держать свои изображения для сайта на том же сервере, что и ваш HTML.</p>\n<div class="notecard warning" id="sect3">\n  <p><strong>Предупреждение:</strong> <strong>Внимание:</strong> Большинство изображений защищены. Не отображайте изображения на вашем сайте пока:</p>\n  <ul>\n    <li>вы не будете владеть изображением</li>\n    <li>у вас не будет письменного разрешения владельца изображения, или</li>\n    <li>пока у вас не будет достаточно доказательств что изображение находится в открытом доступе.</li>\n  </ul>\n  <p>Нарушение авторских прав является незаконным. Кроме того, никогда не указывайте в своём атрибуте <code>src</code> ссылку на изображение, размещённое на чужом сайте. Это называется "хотлинкинг" (с англ. \'hotlinking\' - \'горячая ссылка\'). Запомните, кража пропускной способности чужого сайта незаконна. Это также замедляет вашу страницу и не позволяет вам контролировать, будет ли изображение удалено или заменено чем-то неприятным.</p>\n</div>\n<p>Наш код выше даст нам следующий результат:</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Такие элементы как <a><code>&lt;img&gt;</code></a> и <a><code>&lt;video&gt;</code></a> иногда называются замещаемыми элементами. Это потому что содержание элемента и размер, определяет внешний ресурс (как изображение или видео файл), а не содержание самого элемента. Вы можете узнать о них больше в <a>Замещаемых элементах</a>.</p>\n</div>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> вы можете найти готовый пример этого раздела, <a class="external" target="_blank">размещённый на Github</a> (смотрите также <a class="external" target="_blank">исходный код</a>).</p>\n</div></div></section><section aria-labelledby="альтернативный_текст"><h3 id="альтернативный_текст"><a>Альтернативный текст</a></h3><div class="section-content"><p>Следующий атрибут, который мы рассмотрим — <code>alt</code>. Его значением должно быть текстовое описание изображения для использования в ситуациях, когда изображение не может быть просмотрено / отображено или отрисовка занимает много времени из-за медленного интернет-соединения. Чтобы продемонстрировать использование атрибута <code>alt</code> на практике, внесём изменения в код из предыдущего примера:</p>\n<pre compile="false" disable="true" language="markup"><img src="images/dinosaur.jpg" alt="Голова и туловище скелета динозавра;\n         у него большая голова с длинными острыми зубами">\n</pre>\n<p>Самый простой способ увидеть атрибут <code>alt</code> в действии — это сделать намеренную ошибку в имени файла. Например, если бы мы написали имя изображения как <code>dinosooooor.jpg</code>, браузер не смог бы его отобразить, и на экране появился бы текст из атрибута <code>alt</code>:</p>\n<p>\n  Итак, в каких случаях текст из атрибута <code>alt</code> может быть нам полезен? Приведём несколько примеров:\n</p>\n<ul>\n  <li>Пользователь с нарушением зрения использует <a class="external" target="_blank">устройство чтения с экрана</a>, которое может читать вслух описание элементов веб-страницы. На самом деле, наличие текста в атрибуте <code>alt</code> для описания изображения может быть полезно для большинства пользователей.</li>\n  <li>В случае, если была допущена ошибка в имени файла или пути к нему (как было описано выше).</li>\n  <li>Браузер не поддерживает формат данного изображения. Некоторые люди до сих пор используют текстовые браузеры, такие как <a class="external" target="_blank">Lynx</a>, которые вместо изображений отображают текст из атрибута <code>alt</code>.</li>\n  <li>Если вы хотите добавить возможность найти ваше изображение с помощью поисковых систем. Например, поисковые системы могут искать совпадения поисковых запросов с текстом атрибута <code>alt</code>.</li>\n  <li>Если пользователи отключили отображение изображений на странице для уменьшения объёма передаваемых данных и для сокрытия элементов, отвлекающих внимание. Это обычная практика для пользователей мобильных телефонов, а также в странах с маленькой пропускной способностью интернет-каналов и с высокой стоимостью интернет-трафика.</li>\n</ul>\n<p>Что именно вы должны писать в атрибут <code>alt</code>? В первую очередь, это зависит от того, <em>зачем</em> изображение вообще находится на странице. Другими словами, что вы потеряете, если ваше изображение не появится:</p>\n<ul>\n  <li><strong>Декорация.</strong> Вы должны использовать <a>Фоновые изображения CSS</a> для декоративных изображений, но если вы должны использовать HTML, добавьте пустой alt = "". Если изображение служит просто украшением и не является частью содержимого, добавьте пустой <code>alt=""</code>. Например, программа чтения с экрана не тратит время на чтение содержимого, которое не является важным для пользователя.</li>\n  <li><strong>Контент.</strong> Если ваше изображение содержит важную информацию, передайте ту же информацию через краткий <code>alt</code>. Или даже лучше, в <em>главном</em> тексте, который все увидят. Не используйте <code>alt</code> , если можете обойтись без него. Насколько неудобно было бы для пользователя, если бы <em>параграфы</em> были написаны дважды в <em>главном контенте</em>? Если изображение адекватно описано в основном тексте, можете просто использовать <code>alt=""</code>.</li>\n  <li><strong>Ссылка.</strong> Если вы помещаете изображение в <a><code>&lt;a&gt;</code></a>, для того, чтобы сделать из него ссылку, вы всё ещё должны <a>использовать чёткие формулировки описания ссылок</a>. В таком случае, вы сможете использовать элемент <code>&lt;a&gt;</code> или атрибут <code>alt</code> . Старайтесь выбрать лучший вариант.</li>\n  <li><strong>Текст.</strong> Не пишите текст в изображениях. Если вашему заголовку понадобится тень, то лучше используйте для этого <a>CSS</a> вместо добавления текста в изображение. Однако, если <em>действительно этого не избежать</em>, то вам следует дополнить текст в атрибуте <code>alt</code>.</li>\n</ul>\n<p>По существу, главная идея здесь это предоставить нечто полезное, для случая когда изображения не видны. Это гарантирует что все пользователи не упустят ничего из содержимого страницы. Попробуйте отключить изображения в своём браузере и посмотрите как всё выглядит. Вы вскоре выясните насколько полезным является альтернативный текст, если изображения не видны.</p>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> Более подробную информацию, смотрите здесь: <a>Альтернативный текст</a>.</p>\n</div></div></section><section aria-labelledby="ширина_и_высота"><h3 id="ширина_и_высота"><a>Ширина и высота</a></h3><div class="section-content"><p>Вы можете использовать атрибуты <code>width</code> и <code>height</code>, чтобы указать ширину и высоту вашего изображения. Ширину и высоту вашего изображение можете найти различными способами. Например, на Mac можно использовать <kbd>Cmd</kbd> + <kbd>I</kbd> чтобы получить информацию по изображению. Повторяя наш пример, мы можем сделать так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="images/dinosaur.jpg" alt="The head and torso of a dinosaur skeleton;\n          it has a large head with long sharp teeth" width="400" height="341">\n</pre></div>\n<p>Это не приводит к большой разнице в отображении при нормальных обстоятельствах. Но если изображение не будет показано, например, когда пользователь только что перешёл на страницу, а оно ещё не успело загрузится, вы укажите браузеру оставить место для отрисовки изображения:</p>\n<p>\n  \n</p>\n<p>Это хорошая практика, в результате страница загрузится быстрее и более гладко.</p>\n<p>Однако, вы не должны изменять размеры ваших изображений используя HTML атрибуты. Если вы установите размер изображения слишком большим, то в конечном итоге вы столкнётесь с изображениями, которые выглядят зернистыми, размытыми или слишком маленькими, и потратите трафик для загрузки изображения, которое не будет соответствовать нуждам пользователя. Конечное изображение может также выглядеть искажённым, если вы не сохраните правильное <a class="external" target="_blank">соотношение сторон</a>. Рекомендуется использовать графический редактор для подгонки изображения к нужному размеру, перед вставкой его на вашу веб-страницу.</p>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Если вам действительно нужно изменить размер изображения, вы должны использовать вместо этого <a>CSS</a>.</p>\n</div></div></section><section aria-labelledby="заголовок_изображения"><h3 id="заголовок_изображения"><a>Заголовок изображения</a></h3><div class="section-content"><p>Как и для <a>ссылок</a>, вы также можете добавить атрибут <code>title</code> для изображений, чтобы при необходимости предоставить дополнительную информацию. В нашем примере мы могли бы сделать это так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="images/dinosaur.jpg" alt="The head and torso of a dinosaur skeleton;\n          it has a large head with long sharp teeth" width="400" height="341" title="A T-Rex on display in the Manchester University Museum">\n</pre></div>\n<p>Это даёт нам всплывающую подсказку при наведении курсора мыши, также как и в ссылках:</p>\n<p>\n  \n</p>\n<p>Однако это не рекомендуется - <code>title</code> имеет ряд проблем с доступностью, в основном из-за того, что поддержка программ чтения с экрана очень непредсказуема, и большинство браузеров не будут отображать её, если вы не наведёте курсор мыши (например, нет доступа для пользователей клавиатуры). Зачастую лучше включить такого рода вспомогательную информацию в основной текст статьи, чем прикреплять её к изображению. Однако, она полезна в некоторых обстоятельствах; например, в галереях изображений, когда у вас нет места для их заголовков.</p></div></section><section aria-labelledby="активное_обучение_встраивание_изображения"><h3 id="активное_обучение_встраивание_изображения"><a>Активное обучение: встраивание изображения</a></h3><div class="section-content"><p>Наступила очередь немного поиграть! Этот раздел активного обучения поможет вам выполнить простое упражнение по встраиванию. Вы будете обеспечены простым <a><code>&lt;img&gt;</code></a> тэгом; мы хотели бы чтобы вы встроили изображение расположенное по следующей ссылке:</p>\n<p><a class="external" target="_blank">https://raw.githubusercontent.com/mdn/learning-area/master/html/multimedia-and-embedding/images-in-html/dinosaur_small.jpg</a></p>\n<p>Ранее мы говорили никогда не используйте горячие ссылки на изображения с других серверов, данный случай только для целей обучения, итак мы позволим вам пренебречь этим один разок.</p>\n<p>Мы также хотели бы, чтобы вы:</p>\n<ul>\n  <li>Добавили любой альтернативный текст, и проверили как это работает внеся ошибку в ссылку на изображение.</li>\n  <li>Установите правильные значения <code>width</code> и <code>height</code> (подсказка: это 200px по ширине и 171px по высоте), после поэкспериментируйте с другими значениями, чтобы увидеть какой будет эффект.</li>\n  <li>Установите <code>title</code> для изображения.</li>\n</ul>\n<p>Если вы сделаете ошибку, вы всегда можете очистить код, используя кнопку <em>Reset</em>. Если вы реально не будете понимать как сделать, нажмите кнопку <em>Show solution</em>, чтобы увидеть ответ:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Input</h2>\n<input id="code" class="input">&lt;img&gt;</input>\n<h2>Output</h2>\n<div class="output"></div>\n<div class="controls">\n  <input id="reset" type="button" value="Reset">\n  <input id="solution" type="button" value="Show solution">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  font-family: "Open Sans Light", Helvetica, Arial, sans-serif;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 10em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar code = textarea.value;\nvar output = document.querySelector(".output");\nvar solution = document.getElementById("solution");\n\nfunction drawOutput() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  drawOutput();\n});\n\nsolution.addEventListener("click", function () {\n  textarea.value =\n    \'<img src="https://raw.githubusercontent.com/mdn/learning-area/master/html/multimedia-and-embedding/images-in-html/dinosaur_small.jpg" alt="The head and torso of a dinosaur skeleton; it has a large head with long sharp teeth" width="200" height="171" title="A T-Rex on display in the Manchester University Museum">\';\n  drawOutput();\n});\n\ntextarea.addEventListener("input", drawOutput);\nwindow.addEventListener("load", drawOutput);\n</pre></div><div class="code-example" id="sect8"><div class="example-header" id="sect9"></div></div></div></section><section aria-labelledby="придание_изображению_структуры_и_установка_заголовка"><h2 id="придание_изображению_структуры_и_установка_заголовка"><a>Придание изображению структуры и установка заголовка</a></h2><div class="section-content"><p>Начиная разговор о заголовках, есть множество путей как вы можете добавить заголовок к своему изображению. Для примера, нет ничего, что может вас остановить сделать это таким образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><div class="figure">\n  <img src="images/dinosaur.jpg" alt="The head and torso of a dinosaur skeleton;\n            it has a large head with long sharp teeth" width="400" height="341">\n\n  <p>A T-Rex on display in the Manchester University Museum.</p>\n</div>\n</pre></div>\n<p>Это нормально. Это содержит всё что вам нужно, и красиво стилизуется с помощью CSS. Но, есть проблема: здесь нет ничего, что семантически связывает изображение с его заголовком, и это может вызвать сложности для читателей. Например, когда у вас есть 50 изображений и заголовков, какой заголовок идёт вместе с каким изображением?</p>\n<p>Лучшим решением будет использование элементов HTML5 <a><code>&lt;figure&gt;</code></a> и <a><code>&lt;figcaption&gt;</code></a>. Они были созданы исключительно для этой цели: предоставить семантический контейнер для рисунков и чётко связать рисунок с заголовком. Наш пример выше мог бы быть переписан так:</p>\n<pre compile="false" disable="true" language="markup"><figure>\n  <img src="images/dinosaur.jpg" alt="The head and torso of a dinosaur skeleton;\n            it has a large head with long sharp teeth" width="400" height="341">\n\n  <figcaption>A T-Rex on display in the Manchester University Museum.</figcaption>\n</figure>\n</pre>\n<p>Элемент <a><code>&lt;figcaption&gt;</code></a> говорит браузерам и вспомогательной технологии, что заголовок описывает содержимое элемента <a><code>&lt;figure&gt;</code></a>.</p>\n<div class="notecard note" id="sect10">\n  <p><strong>Примечание:</strong> С точки зрения доступности, заголовки и <a><code>alt</code></a> имеют различные предназначения. Заголовки помогают даже тем, кто имеет возможность просматривать изображение, тогда как <a><code>alt</code></a> обеспечивает замену функциональности отсутствующего изображения. Таким образом, заголовки и <code>alt</code> не подразумевают под собой одни и те же вещи, потому что оба используются браузером при отсутствии изображения. Попробуйте отключить изображения в своём браузере, чтобы увидеть как это выглядит.</p>\n</div>\n<p>Тег &lt;figure&gt; не является изображением. Он представляет собой независимый структурный элемент, который:</p>\n<ul>\n  <li>Передаёт смысл компактным, интуитивно понятным способом.</li>\n  <li>Может использоваться в различных местах страницы.</li>\n  <li>Предоставляет ценную информацию, поддерживающую основной текст.</li>\n</ul>\n<p>Тег &lt;figure&gt; может быть несколькими изображениями, куском кода, аудио, видео, уравнением, таблицей, либо чем-то другим.</p></div></section><section aria-labelledby="активное_изучение_создание_figure"><h3 id="активное_изучение_создание_figure"><a>Активное изучение: создание &lt;figure&gt;</a></h3><div class="section-content"><p>В этом разделе активного изучения мы хотели бы, чтобы вы взяли текст из предыдущего раздела активного изучения и преобразовали его в &lt;figure&gt;:</p>\n<ul>\n  <li>Оберните его в <a><code>&lt;figure&gt;</code></a> элемент.</li>\n  <li>Скопируйте текст из атрибута <code>title</code>, удалите атрибут <code>title</code>, и вбейте текст в элемент <a><code>&lt;figcaption&gt;</code></a>.</li>\n</ul>\n<p>В случае допущения ошибки, вы всегда можете набрать код повторно, нажав кнопку <em>Reset</em>. Если вы застряли, нажмите кнопку <em>Show solution</em>, чтобы увидеть ответ:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Input</h2>\n<input id="code" class="input"></input>\n<h2>Output</h2>\n<div class="output"></div>\n<div class="controls">\n  <input id="reset" type="button" value="Reset">\n  <input id="solution" type="button" value="Show solution">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">body {\n  font-family: "Open Sans Light", Helvetica, Arial, sans-serif;\n}\n\n.input,\n.output {\n  width: 90%;\n  height: 10em;\n  padding: 10px;\n  border: 1px solid #0095dd;\n  overflow: auto;\n}\n\nbutton {\n  padding: 10px 10px 10px 0;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar code = textarea.value;\nvar output = document.querySelector(".output");\nvar solution = document.getElementById("solution");\n\nfunction drawOutput() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  drawOutput();\n});\n\nsolution.addEventListener("click", function () {\n  textarea.value =\n    \'<figure>\n  <img src="https://raw.githubusercontent.com/mdn/learning-area/master/html/multimedia-and-embedding/images-in-html/dinosaur_small.jpg" alt="The head and torso of a dinosaur skeleton; it has a large head with long sharp teeth" width="200" height="171">\n  <figcaption>A T-Rex on display in the Manchester University Museum</figcaption>\n</figure>\';\n  drawOutput();\n});\n\ntextarea.addEventListener("input", drawOutput);\nwindow.addEventListener("load", drawOutput);\n</pre></div><div class="code-example" id="sect11"><div class="example-header" id="sect12"></div></div></div></section><section aria-labelledby="фоновые_изображения_css"><h2 id="фоновые_изображения_css"><a>Фоновые изображения CSS</a></h2><div class="section-content"><p>Вы можете использовать CSS для встраивания изображений в веб-страницы (или JavaScript, но это совсем другая история). Параметры CSS <a><code>background-image</code></a> и другие <code>background-*</code> применяются для контроля размещения фонового изображения. К примеру, чтобы залить фон каждого параграфа страницы, необходимо сделать следующее:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">p {\n  background-image: url("images/dinosaur.jpg");\n}\n</pre></div>\n<p>Получившееся в конечном итоге изображение можно легко позиционировать и контролировать, в отличие от его HTML аналога. Так зачем же возиться с HTML изображениями? Как указано выше, фоновые изображения CSS предназначены только для украшения. Если вы просто хотите добавить что-то красивое на свою страницу, чтобы улучшить визуальные эффекты, это нормально. Тем не менее, такого рода изображения не имеют семантического смысла вообще. Они не могут иметь каких-то текстовых эквивалентов, видимых посетителю, они невидимы для программ чтения с экрана. Вот где блистают HTML-изображения!</p>\n<p>Итог: если изображение имеет важность, в контексте содержимого вашей страницы, вам следует использовать HTML изображения. Если же картинка является банальной декорацией, используйте фоновые изображения CSS.</p>\n<div class="notecard note" id="sect13">\n  <p><strong>Примечание:</strong> вы можете узнать больше о <a>фоновых изображениях CSS</a> в нашей теме о <a>CSS</a>.</p>\n</div></div></section><section aria-labelledby="проверьте_свои_навыки!"><h2 id="проверьте_свои_навыки!"><a>Проверьте свои навыки!</a></h2><div class="section-content"><p>Вы дошли до конца этой статьи, но можете ли вы вспомнить самую важную информацию? Вы можете найти дополнительные тесты, чтобы убедиться, что вы усвоили эту информацию, прежде чем двигаться дальше. Смотрите <a>Проверьте знания по изображениям в HTML</a>.</p></div></section><section aria-labelledby="резюме"><h2 id="резюме"><a>Резюме</a></h2><div class="section-content"><p>На этом пока все. Мы подробно рассмотрели изображения и их заголовки. В следующей статье мы рассмотрим, как использовать HTML для встраивания видео и аудио на веб-страницы.</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Видео и аудио контент',

		content:
			'<header><h1>Видео и аудио контент</h1></header><div class="section-content">\n<p>Теперь, когда мы спокойно добавляем простые изображения на веб-страницу, сделаем следующий шаг — начнём добавлять видео и аудиоплееры в ваши HTML-документы! В этой статье вы увидите, как это делать с элементами <a><code>&lt;video&gt;</code></a> и <a><code>&lt;audio&gt;</code></a> ; а в завершение посмотрите, как добавить титры и субтитры к вашим видео.</p>\n</div><section aria-labelledby="аудио_и_видео_в_интернете"><h2 id="аудио_и_видео_в_интернете"><a>Аудио и видео в Интернете</a></h2><div class="section-content"><p>Веб-разработчики хотели использовать видео и аудио в Интернете в течение длительного времени, начиная с начала 2000-х годов, когда пропускная способность сети стала достаточной, чтобы поддерживать любое видео (видеофайлы намного больше, чем текст, или даже изображения). На раннем этапе базовые веб-технологии, такие как HTML, не имели возможности размещения на сайтах видео и аудио контента, поэтому запатентованные технологии (или плагины), такие как Flash (а затем и Silverlight), стали популярными для обработки такого контента. Эти технологии работали нормально, но у них было много недостатков, в числе которых плохая поддержка возможностей HTML и CSS, проблемы безопасности и проблемы доступности.</p>\n<p>Собственное решение устранило бы большую часть этой проблемы, если бы оно было реализовано правильно. К счастью, несколько лет спустя в спецификации <a>HTML5</a> были добавлены такие функции, с элементами <a><code>&lt;video&gt;</code></a> и <a><code>&lt;audio&gt;</code></a>, и некоторые новые <a>JavaScript</a> <a>API</a> для их управления. Мы не будем рассматривать JavaScript здесь - только необходимые основы, которые могут быть достигнуты с помощью HTML.</p>\n<p>Мы не будем учить вас, как создавать аудио и видеофайлы - для этого требуется совершенно другой набор навыков. Мы предоставили вам образцы аудио и видеофайлов и пример кода для вашего собственного эксперимента, на случай, если у вас нет под рукой собственных.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Прежде всего, вы также должны знать, что есть немало <a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!">OVPs</a> (провайдеров онлайн-видео) вроде <a class="external" target="_blank">YouTube</a>, <a class="external" target="_blank">Dailymotion</a> и <a class="external" target="_blank">Vimeo</a>, а также онлайн аудио-провайдеров вроде <a class="external" target="_blank">Soundcloud</a>. Такие компании предлагают удобный и простой способ размещения и потребления видео, поэтому вам не нужно беспокоиться об огромном потреблении трафика. OVP даже обычно предлагают готовый код для встраивания видео и аудио в ваши веб-страницы. Если вы пойдёте по этому пути, то сможете избежать некоторых трудностей, которые мы обсуждаем в этой статье.</p>\n</div></div></section><section aria-labelledby="элемент_video"><h3 id="элемент_video"><a>Элемент &lt;video&gt;</a></h3><div class="section-content"><p>Элемент <a><code>&lt;video&gt;</code></a> позволяет вам вставлять видео достаточно легко. Очень простой пример выглядит так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><video src="rabbit320.webm" controls="">\n  <p>\n    Ваш браузер не поддерживает HTML5 видео. Используйте\n    <a href="rabbit320.webm">ссылку на видео</a> для доступа.\n  </p>\n</video>\n</pre></div>\n<p>Описание параметров:</p>\n<dl>\n  <dt id="src"><a><code>src</code></a></dt>\n  <dd>\n    <p>Точно так же, как для элемента <a><code>&lt;img&gt;</code></a> , атрибут <code>src</code> (source — источник) содержит путь к видео, которое вы хотите внедрить. Он работает точно так же.</p>\n  </dd>\n  <dt id="controls"><a><code>controls</code></a></dt>\n  <dd>\n    <p>Пользователи должны иметь возможность контролировать воспроизведение видео и аудио (особенно это важно для людей, которые больны <a class="external" target="_blank">эпилепсией</a>). Вы должны либо использовать атрибут <code>controls</code>, чтобы использовать встроенный в браузер интерфейс управления или создать собственный интерфейс, используя соответствующие <a>JavaScript API</a>. Как минимум, интерфейс должен включать способ запуска и остановки медиа-носителя и регулировки громкости.</p>\n  </dd>\n  <dt id="параграф_внутри_тегов"><a>Параграф внутри тегов </a><code>&lt;video&gt;</code></dt>\n  <dd>\n    <p>Это называют <strong>резервный контент</strong> — он будет отображаться, если браузер, показывающий страницу, не поддерживает элемент <code>&lt;video&gt;</code>, позволяя нам обеспечить поддержку для старых версий браузеров. Это может быть все, что вы захотите; в нашем примере мы предоставили прямую ссылку на видеофайл, поэтому пользователь может хотя бы получить к нему доступ, независимо от того, какой браузер он используют.</p>\n  </dd>\n</dl>\n<p>Встроенное видео будет выглядеть примерно так:</p>\n<p>\n  \n</p>\n<p>Вы можете <a class="external" target="_blank">посмотреть живой пример</a> (взгляните также на <a class="external" target="_blank">исходный код</a>).</p></div></section><section aria-labelledby="поддержка_нескольких_форматов"><h3 id="поддержка_нескольких_форматов"><a>Поддержка нескольких форматов</a></h3><div class="section-content"><p>Присутствует одна проблема с приведённым выше примером, которую вы, возможно, уже заметили, если пытались получить доступ к прямой ссылке выше с помощью браузера, такого как Safari или Internet Explorer. Видео не будет воспроизводиться!</p>\n<p>Давайте кратко рассмотрим терминологию. Форматы, такие как MP3, MP4 и WebM, называются <strong>форматами контейнеров</strong>. Они содержат различные части, которые составляют всю песню или видео — например, звуковую дорожку, видеодорожку (в случае видео) и метаданные для описания представленного носителя.</p>\n<p>Например, файл WebM, содержащий фильм, имеет основную видеодорожку и одну дорожку с альтернативным ракурсом, плюс аудио для английского и испанского языков, в дополнение к аудио для дорожки с комментариями на английском языке. Также включены текстовые дорожки, содержащие закрытые субтитры для художественного фильма, испанские субтитры для фильма и английские субтитры для комментариев.</p>\n<p>Аудио и видео треки также находятся в разных форматах, например:</p>\n<ul>\n  <li>Контейнер WebM обычно загружает звук Ogg Vorbis с видео VP8 / VP9. Поддерживается в основном в Firefox и Chrome.</li>\n  <li>Контейнер MP4 часто включает аудио AAC или MP3 с видео H.264. Поддерживается в основном в Internet Explorer и Safari.</li>\n  <li>Более старый контейнер Ogg имеет тенденцию идти с аудио Ogg Vorbis и видео Ogg Theora. Поддерживалось главным образом в Firefox и Chrome, но было вытеснено более качественным форматом WebM.</li>\n</ul>\n<p>Есть несколько особых случаев. Например, для некоторых типов аудио данные кодека часто хранятся без контейнера или с упрощённым контейнером. Одним из таких примеров является кодек FLAC, который чаще всего хранится в файлах FLAC, которые представляют собой просто необработанные дорожки FLAC.</p>\n<p>Ещё одна такая ситуация - всегда популярный файл MP3. «Файл MP3» на самом деле является звуковой дорожкой MPEG-1 Audio Layer III (MP3), хранящейся в контейнере MPEG или MPEG-2. Это особенно интересно, поскольку, хотя большинство браузеров не поддерживают использование мультимедиа MPEG в элементах <a><code>&lt;video&gt;</code></a> и <a><code>&lt;audio&gt;</code></a>, они могут поддерживать MP3 из-за его популярности.</p>\n<p>Аудиоплеер обычно воспроизводит аудиодорожку напрямую, например файл MP3 или Ogg. Для этого не нужны контейнеры.</p>\n<h4 id="поддержка_медиафайлов_в_браузерах">Поддержка медиафайлов в браузерах</h4>\n<p>Вышеупомянутые форматы существуют для сжатия видео и аудио в управляемые файлы (необработанные видео и аудио очень большие). Браузеры содержат разные <a>кодеки</a>, вроде Vorbis или H.264, которые используются для преобразования сжатого звука и видео в бинарные данные и обратно. Каждый кодек имеет свои преимущества и недостатки, и каждый контейнер может также предлагать свои собственные положительные и отрицательные особенности, влияющие на ваше решение о том, какой из них использовать. Как указано выше, браузеры, к сожалению, не поддерживают одни и те же кодеки, поэтому вам придётся предоставить несколько файлов для каждого медиа-продукта. Если вам не хватает правильного кодека для декодирования контента, он просто не сможет воспроизводиться.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Возможно, вам интересно, как сложилась такая ситуация. MP3 (для аудио) и MP4/H.264 (для видео) широко поддерживаются и имеют высокое качество. В то же время, они защищены патентами — американские патенты охватывают MP3 по крайней мере до 2017 года и H.264 самое меньшее до 2027 года, так что браузеры, которые не являются держателями этих патентов, должны платить огромные суммы денег для поддержки этих форматов. Кроме того, многие люди избегают несвободного программного обеспечения в принципе, предпочитая открытые форматы. Вот почему мы должны предоставить несколько форматов для разных браузеров.</p>\n</div>\n<p>Все становится немного сложнее, потому что каждый браузер не только поддерживает свой набор форматов файлов-контейнеров, но и каждый из них поддерживает свой выбор кодеков. Чтобы максимизировать вероятность того, что ваш веб-сайт или приложение будет работать в браузере пользователя, вам может потребоваться предоставить каждый медиафайл, который вы используете, в нескольких форматах. Если ваш сайт и браузер пользователя не используют общий медиаформат, ваши медиа просто не будут воспроизводиться.</p>\n<p>Из-за сложности обеспечения возможности просмотра мультимедийных файлов вашего приложения в любой комбинации браузеров, платформ и устройств, которые вы хотите использовать, выбор наилучшего сочетания кодеков и контейнера может оказаться сложной задачей. Смотрите <a class="only-in-en-us" title="Currently only available in English (US)">выбор подходящего контейнера <small>(en-US)<small></small></small></a> для получения помощи по выбору формата файла контейнера, наиболее подходящего для ваших нужд; аналогичным образом смотрите <a class="only-in-en-us" title="Currently only available in English (US)">выбор видеокодека <small>(en-US)<small></small></small></a> и <a class="only-in-en-us" title="Currently only available in English (US)">выбор аудиокодека <small>(en-US)<small></small></small></a> для помощи в выборе первых медиакодеков, которые будут использоваться для вашего контента и вашей целевой аудитории.</p>\n<p>Ещё одна вещь, о которой следует помнить: мобильные браузеры могут поддерживать дополнительные форматы, не поддерживаемые их настольными эквивалентами, точно так же, как они могут не поддерживать все те же форматы, что и настольная версия. Вдобавок ко всему, как настольные, так и мобильные браузеры могут быть спроектированы так, чтобы разгрузить обработку воспроизведения мультимедиа (либо для всех мультимедиа, либо только для определённых типов, которые он не может обрабатывать внутренне). Это означает, что поддержка мультимедиа частично зависит от того, какое программное обеспечение установил пользователь.</p>\n<p>Так как мы это сделаем? Взгляните на следующий <a class="external" target="_blank">обновлённый пример</a> (и попробуйте <a class="external" target="_blank">живой пример</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><video controls="">\n  <source src="rabbit320.mp4" type="video/mp4">\n  <source src="rabbit320.webm" type="video/webm">\n  <p>\n    Ваш браузер не поддерживает HTML5 видео. Вот\n    <a href="rabbit320.mp4">ссылка на видео</a> взамен.\n  </p>\n</video>\n</pre></div>\n<p>Здесь мы изъяли атрибут <code>src</code> из нашего тега <code>&lt;video&gt;</code>, и вместо этого включали отдельные элементы <a><code>&lt;source&gt;</code></a>, каждый из которых ссылается на собственный источник. В этом случае браузер пройдётся по элементам <code>&lt;source&gt;</code> и начнёт воспроизводить первый из них, который имеет поддерживаемый кодек. Включение источников WebM и MP4 должно быть достаточно для воспроизведения вашего видео на большинстве платформ и браузеров в наши дни.</p>\n<p>Каждый элемент <code>&lt;source&gt;</code> также имеет атрибут <code>type</code>. Он не обязательный, но рекомендуется его включать — он содержит <a>MIME types</a> видеофайла, браузеры могут прочитать их и сразу же пропустить видео, которые они не понимают. Если <code>type</code> не включён, браузеры загружают и пытаются воспроизвести каждый файл до тех пор, пока не найдут тот, который будет работать, затрачивая больше времени и ресурсов.</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Наша <a class="page-not-created" title="This is a link to an unwritten page">статья о поддерживаемых медиаформатах</a> описывает некоторые распространённые <a>MIME types</a>.</p>\n</div></div></section><section aria-labelledby="другие_параметры_video"><h3 id="другие_параметры_video"><a>Другие параметры &lt;video&gt;</a></h3><div class="section-content"><p>Есть ряд других параметры, которые вы можете включить в HTML5 элемент <code>video</code>. Взгляните на наш третий пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><video controls="" width="400" height="400" autoplay="" loop="" muted="" poster="poster.png">\n  <source src="rabbit320.mp4" type="video/mp4">\n  <source src="rabbit320.webm" type="video/webm">\n  <p>\n    Your browser doesn\'t support HTML5 video. Here is a\n    <a href="rabbit320.mp4">link to the video</a> instead.\n  </p>\n</video>\n</pre></div>\n<p>На выходе получим нечто, подобное этому:</p>\n<p>**\n  **Новые параметры:\n</p>\n<dl>\n  <dt id="width_and_height"><strong><a><code>width</code></a> and <a><code>height</code></a></strong></dt>\n  <dd>\n    <p>Вы можете контролировать размер видео либо с помощью этих атрибутов, либо с помощью <a>CSS</a>. В обоих случаях видео поддерживают собственное соотношение ширины и высоты — известное как соотношение сторон. Если соотношение сторон не поддерживается установленными вами размерами, видео будет увеличиваться, чтобы заполнить пространство по горизонтали, а заполненному пространству по умолчанию будет задан сплошной цвет фона.</p>\n  </dd>\n  <dt id="autoplay"><strong><a><code>autoplay</code></a></strong></dt>\n  <dd>\n    <p>Этот атрибут позволяет сразу начать воспроизведение звука или видео, пока остальная часть страницы загружается. Вам не рекомендуется использовать автовоспроизведение видео (или аудио) на ваших сайтах, потому что пользователи могут найти это действительно раздражающим.</p>\n  </dd>\n  <dt id="loop"><strong><a><code>loop</code></a></strong></dt>\n  <dd>\n    <p>Этот атрибут позволяет воспроизводить видео (или аудио) снова, когда он заканчивается. Это также может раздражать, поэтому используйте тогда, когда это действительно необходимо.</p>\n  </dd>\n  <dt id="muted"><strong><a><code>muted</code></a></strong></dt>\n  <dd>\n    <p>Этот атрибут заставляет проигрыватель воспроизводить звук, отключённый по умолчанию.</p>\n  </dd>\n  <dt id="poster"><strong><a><code>poster</code></a></strong></dt>\n  <dd>\n    <p>Этот атрибут принимает в качестве значения URL-адрес изображения, который будет отображаться до воспроизведения видео. Он предназначен для заставки к видео или рекламы.</p>\n  </dd>\n  <dt id="preload"><strong><a><code>preload</code></a></strong></dt>\n  <dd>\n    <p>этот атрибут используется в элементе для буферизации больших файлов. Он может принимать одно из трёх значений:</p>\n    <ul>\n      <li><code>"none"</code> не буферизирует файл</li>\n      <li><code>"auto"</code> буферизирует медиафайл</li>\n      <li><code>"metadata"</code> буферирует только метаданные файла</li>\n    </ul>\n  </dd>\n</dl>\n<p>Вы можете найти приведённый выше пример для воспроизведения <a class="external" target="_blank">на Github</a> (также <a class="external" target="_blank">просмотрите исходный код</a>.) Обратите внимание, что мы не включили атрибут <code>autoplay</code> в live-версию - если видео начнёт воспроизводиться, как только страница загрузится, вы не увидите заставку к видео!</p></div></section><section aria-labelledby="элемент_audio"><h3 id="элемент_audio"><a>Элемент &lt;audio&gt;</a></h3><div class="section-content"><p>Элемент <a><code>&lt;audio&gt;</code></a> работает точно так же, как элемент <a><code>&lt;video&gt;</code></a>, с несколькими небольшими отличиями, которые описаны ниже. Типичный пример может выглядеть так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><audio controls="">\n  <source src="viper.mp3" type="audio/mp3">\n  <source src="viper.ogg" type="audio/ogg">\n  <p>\n    Your browser doesn\'t support HTML5 audio. Here is a\n    <a href="viper.mp3">link to the audio</a> instead.\n  </p>\n</audio>\n</pre></div>\n<p>В браузере это вызывает следующее:</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Примечание: вы можете запустить <a class="external" target="_blank">аудио-демо</a> в Github (см. также <a class="external" target="_blank">исходный код аудиоплеера</a>.)</p>\n</div>\n<p>Он занимает меньше места, чем видеоплеер, поскольку нет визуального компонента - вам просто нужно отображать элементы управления для воспроизведения звука. Другие отличия от видео HTML5 заключаются в следующем:</p>\n<ul>\n  <li>Элемент <a><code>&lt;audio&gt;</code></a> не поддерживает атрибуты <code>width</code> и <code>height</code> - опять же, нет визуального компонента, поэтому присваивать ширину или высоту не к чему.</li>\n  <li>Он также не поддерживает атрибут <code>poster</code> опять же, из-за отсутствия визуального компонента.</li>\n</ul>\n<p>Помимо этого, <code>&lt;audio&gt;</code> поддерживает все те же функции, что и <code>&lt;video&gt;</code> - просмотрите приведённые выше разделы для получения дополнительной информации о них.</p></div></section><section aria-labelledby="отображение_текстовых_дорожек_к_видео"><h2 id="отображение_текстовых_дорожек_к_видео"><a>Отображение текстовых дорожек к видео</a></h2><div class="section-content"><p>Теперь мы обсудим немного более продвинутую концепцию, о которой очень полезно знать. Многие люди не могут или не хотят слышать аудио или видео контент, который они находят в Интернете, по крайней мере, в определённое время. Например:</p>\n<ul>\n  <li>У многих людей есть слуховые нарушения (более известные как слабослышащие или глухие).</li>\n  <li>Другие могут не слышать звук, потому что они находятся в шумной обстановке (например, в переполненном баре при показе спортивной игры) или, возможно, не хотят беспокоить других, если они находятся в тихом месте (например, в библиотеке).</li>\n  <li>Люди, которые не говорят на языке из видео, могут захотеть увидеть текстовую расшифровку или даже перевод, чтобы помочь им понять медиа-контент.</li>\n</ul>\n<p>Разве было бы неплохо иметь возможность предоставить этим людям транскрипцию слов, произносимых в аудио или видео? Благодаря HTML5 вы можете это сделать с форматом <a class="only-in-en-us" title="Currently only available in English (US)">WebVTT <small>(en-US)<small></small></small></a> и элементом <a><code>&lt;track&gt;</code></a>.</p>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> "Транскрибировать" значит записывать устную речь в виде текста. Полученный текст представляет собой «стенограмму».</p>\n</div>\n<p>WebVTT - это формат для записи текстовых файлов, содержащих несколько строк текста, а также метаданные, такие как время, в которое вы хотите отображать каждую текстовую строку, и даже ограниченную информацию о стиле/позиционировании. Эти текстовые строки называются репликами, и вы можете отображать разные типы для разных целей, наиболее распространёнными являются:</p>\n<dl>\n  <dt id="субтитры"><a><strong>субтитры</strong></a></dt>\n  <dd>\n    <p>Переводы иностранного материала, для людей, которые не понимают слов, произнесённых в аудио.</p>\n  </dd>\n  <dt id="титры"><a><strong>титры</strong></a></dt>\n  <dd>\n    <p>Синхронизированные транскрипции диалога или описания значимых звуков, чтобы люди, которые не могут слышать звук, поняли что происходит.</p>\n  </dd>\n  <dt id="рассчитанные_описания"><a><strong>рассчитанные описания</strong></a></dt>\n  <dd>\n    <p>Текст для преобразования в аудио, чтобы обслуживать людей с нарушениями зрения.</p>\n  </dd>\n</dl>\n<p>Типичный файл WebVTT будет выглядеть примерно так:</p>\n<pre compile="false" disable="true" language="markup">WEBVTT\n\n1\n00:00:22.230 --&gt; 00:00:24.606\nЭто первый субтитр.\n\n2\n00:00:30.739 --&gt; 00:00:34.074\nЭто второй.\n\n  ...\n</pre>\n<p>Чтобы отобразить это вместе с воспроизведением мультимедиа HTML, вам необходимо:</p>\n<ol>\n  <li>Сохраните его как <code>.vtt</code>- файл, в разумном месте.</li>\n  <li>Ссылка на файл <code>.vtt</code> с элементом <a><code>&lt;track&gt;</code></a>. <code>&lt;track&gt;</code> должен быть помещён в <code>&lt;audio&gt;</code> или <code>&lt;video&gt;</code>, но после элементов <code>&lt;source&gt;</code>. Используйте атрибут <a><code>kind</code></a>, чтобы указать, являются ли реплики <code>субтитрами</code>, <code>титрами</code> или <code>описаниями</code>. Кроме того, используйте <a><code>srclang</code></a>, чтобы сообщить браузеру, на каком языке вы записывали субтитры.</li>\n</ol>\n<p>Вот пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><video controls="">\n  <source src="example.mp4" type="video/mp4">\n  <source src="example.webm" type="video/webm">\n  <track kind="subtitles" src="subtitles_en.vtt" srclang="en">\n</video>\n</pre></div>\n<p>Это приведёт к просмотру видео с субтитрами, таким как:</p>\n<p>\n  \n</p>\n<p>Подробнее читайте в разделе <a>добавление титров и субтитров к видео HTML5</a>. Вы можете <a class="external" target="_blank">найти пример</a>, который соответствует этой статье в Github, написанной Яном Девлином (см. также <a class="external" target="_blank">исходный код</a>). В этом примере используется JavaScript, позволяющий пользователям выбирать между различными субтитрами. Обратите внимание, что для включения субтитров вам нужно нажать кнопку «CC» и выбрать вариант - английский, немецкий или испанский.</p>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> Текстовые треки также помогут вам с <a>SEO</a>, так как поисковые системы особенно преуспевают в работе с текстом. Текстовые треки даже позволяют поисковым системам напрямую связываться с местом, происходящим в видео.</p>\n</div></div></section><section aria-labelledby="активное_обучение_внедрение_собственного_аудио_и_видео"><h3 id="активное_обучение_внедрение_собственного_аудио_и_видео"><a>Активное обучение: Внедрение собственного аудио и видео</a></h3><div class="section-content"><p>Для этого активного обучения мы (в идеале) хотели бы, чтобы вы вышли на улицу и записали некоторые из ваших собственных видео и аудио. Большинство телефонов в наши дни позволяют очень легко записывать аудио и видео, и, если вы можете перенести их на свой компьютер, вы можете их использовать. Возможно, вам придётся сделать некоторое преобразование, чтобы в конечном итоге получить WebM и MP4 в случае видео, а также MP3 и Ogg в случае аудио, но есть достаточно программ, чтобы вы могли сделать это без особых проблем, таких как <a class="external" target="_blank">Miro Video Converter</a> и <a class="external" target="_blank">Audacity</a>. Мы хотели бы, чтобы вы попробовали сделать это!</p>\n<p>Если у вас нет какого-либо видео или аудио, вы можете свободно пользоваться нашими <a class="external" target="_blank">образцами аудио и видео файлов</a> для выполнения этого упражнения. Вы также можете использовать наш образец кода для справки.</p>\n<p>Мы хотим, чтобы вы сделали следующие действия:</p>\n<ol>\n  <li>Сохраните аудио и видео файлы в новом каталоге на вашем компьютере.</li>\n  <li>Создайте новый HTML файл в том же каталоге и назовите его <code>index.html</code>.</li>\n  <li>Добавьте элементы <code>&lt;audio&gt;</code> и <code>&lt;video&gt;</code> на страницу; чтобы они отображали элементы управления браузером по умолчанию.</li>\n  <li>Введите оба варианта элемента <code>&lt;source&gt;</code>, чтобы браузеры находили оптимальный формат звука, который он поддерживает и загружает. Они должны включать <code>type</code> атрибуты.</li>\n  <li>Дайте элементу <code>&lt;video&gt;</code> заставку, которая будет отображаться до начала воспроизведения видео. Получайте удовольствие, создавая свою собственную заставку к видео.</li>\n</ol>\n<p>Для дополнительного бонуса вы можете попробовать исследовать текстовые треки и выяснить, как добавить некоторые титры к вашему видео.</p></div></section><section aria-labelledby="краткое_изложение"><h2 id="краткое_изложение"><a>Краткое изложение</a></h2><div class="section-content"><p>Мы надеемся, что вам понравилось играть с видео и аудио на веб-страницах! В следующей статье мы рассмотрим другие способы встраивания контента в Web, используя такие технологии, как <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;object&gt;</code> <small>(en-US)</small></a>.</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'От <object> к <iframe> - другие технологии внедрения',

		content:
			'<header><h1>От &lt;object&gt; к &lt;iframe&gt; - другие технологии внедрения</h1></header><div class="section-content">\n<p>К настоящему моменту вы уже должны уметь прикреплять вложения на свои веб-страницы, включая изображения, видео и аудио. На этом этапе мы хотели бы сделать шаг в сторону, рассматривая некоторые элементы, которые позволяют встраивать в ваши веб-страницы самые разнообразные типы контента: <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a>, <a><code>&lt;embed&gt;</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;object&gt;</code> <small>(en-US)</small></a>. &lt;iframe&gt; предназначен для встраивания других веб-страниц, а два других позволяют встраивать PDF-файлы, SVG и даже Flash - устаревшую технологию, которую вы всё равно иногда увидите.</p>\n</div><section aria-labelledby="краткая_история_внедрения"><h2 id="краткая_история_внедрения"><a>Краткая история внедрения</a></h2><div class="section-content"><p>Давным-давно в Интернете было популярно использовать <strong>фреймы</strong> для создания веб-сайтов - небольших частей веб-сайта, хранящихся на отдельных страницах HTML. Они были встроены в главный документ, называемый <strong>набором фреймов</strong>, который позволял вам указать область на экране, которую заполнял каждый фрейм, а не столбец и строку таблицы. Они были популярны в середине и конце 90-х годов и были доказательством того, что разделение веб-страницы на более мелкие куски лучше сказывается на скорости загрузки, особенно это заметно, когда сетевые соединения были медленными. Однако у них было много проблем, которые намного перевешивали любые положительные моменты, когда скорость сети становилась выше. Поэтому вы больше не увидите, чтобы их использовали.</p>\n<p>Спустя некоторое время (конец 90-х, начало 2000-х годов) технологии плагинов, такие как Java-апплеты и Flash, стали очень популярными - это позволило веб-разработчикам встраивать богатый контент в веб-страницы, такие как видео и анимации, которые просто не были доступны только через HTML. Внедрение этих технологий осуществлялось посредством таких элементов, как <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;object&gt;</code> <small>(en-US)</small></a> и менее используемого <a><code>&lt;embed&gt;</code></a>, и они были очень полезны в то время. С тех пор они вышли из моды из-за многих проблем, включая доступность, безопасность, размер файла и многое другое; в наши дни большинство мобильных устройств больше не поддерживают такие плагины, и поддержка на компьютерах также уменьшается.</p>\n<p>Наконец, появился элемент <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a> (наряду с другими способами встраивания контента, например <a><code>&lt;canvas&gt;</code></a>, <a><code>&lt;video&gt;</code></a> и т. д. ) Он позволяет встраивать целый веб-документ внутри другого, как если бы это был <a><code>&lt;img&gt;</code></a> или другой подобный элемент, и сегодня используется повсеместно.</p>\n<p>Урок истории закончен, давайте двигаться дальше и посмотрим, как использовать некоторые из них.</p></div></section><section aria-labelledby="активное_обучение_использование_классического_внедрения"><h2 id="активное_обучение_использование_классического_внедрения"><a>Активное обучение: использование классического внедрения</a></h2><div class="section-content"><p>В этой статье мы собираемся перейти прямо в раздел активного обучения, чтобы сразу дать вам реальное представление о том, для чего используются технологии внедрения. Нам очень хорошо знаком Youtube, но многие не знают о некоторых доступных для него средствах совместного доступа. Давайте посмотрим, как Youtube позволяет нам встраивать видео на любую страницу, которая нам нравится, используя <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a>.</p>\n<ol>\n  <li>Сначала перейдите на Youtube и найдите понравившееся вам видео.</li>\n  <li>Под видео вы найдёте кнопку «Поделиться» - нажмите, чтобы отобразить параметры совместного доступа.</li>\n  <li>Выберите кнопку «Вставить», и вам будет предоставлен код &lt;iframe&gt; - скопируйте его.</li>\n  <li>Вставьте его в поле ввода ниже и посмотрите на результат в Output.</li>\n</ol>\n<p>Дополнительно вы также можете попробовать внедрить карту Google следующим образом:</p>\n<ol>\n  <li>Перейдите в Карты Google и найдите подходящую вам карту.</li>\n  <li>Нажмите «Меню» (три горизонтальные линии) в верхнем левом углу пользовательского интерфейса.</li>\n  <li>Выберите параметр Ссылка/код.</li>\n  <li>Выберите параметр Встраивание карт, который даст вам код &lt;iframe&gt; - скопируйте его.</li>\n  <li>Вставьте его в поле ввода ниже и посмотрите на результат в Output.</li>\n</ol>\n<p>Если вы допустили ошибку, вы всегда можете сбросить её с помощью кнопки «Сброс». Если вы действительно застряли, нажмите кнопку «Показать решение», чтобы увидеть ответ.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Live output</h2>\n\n<div class="output" style="min-height: 250px;"></div>\n\n<h2>Editable code</h2>\n<p class="a11y-label">\n  Press Esc to move focus away from the code area (Tab inserts a tab character).\n</p>\n\n<input id="code" class="input" style="width: 95%;min-height: 100px;"></input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Reset">\n  <input id="solution" type="button" value="Show solution">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: sans-serif;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Show solution";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Show solution") {\n    textarea.value = solutionEntry;\n    solution.value = "Hide solution";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Show solution";\n  }\n  updateCode();\n});\n\nvar htmlSolution =\n  \'<iframe width="420" height="315" src="https://www.youtube.com/embed/QH2-TGUlwu4" frameborder="0" allowfullscreen="">\n</iframe>\n\n<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d37995.65748333395!2d-2.273568166412784!3d53.473310471916975!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x487bae6c05743d3d%3A0xf82fddd1e49fc0a1!2sThe+Lowry!5e0!3m2!1sen!2suk!4v1518171785211" width="600" height="450" frameborder="0" style="border:0" allowfullscreen="">\n</iframe>\';\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\n// stop tab key tabbing out of textarea and\n// make it write a tab at the caret position instead\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\n// Update the saved userCode every time the user updates the text area code\n\ntextarea.onkeyup = function () {\n  // We only want to save the state when the user code is being shown,\n  // not the solution, so that solution is not saved over the user code\n  if (solution.value === "Show solution") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect1"><div class="example-header" id="sect2"></div></div></div></section><section aria-labelledby="подробно_об_iframes"><h2 id="подробно_об_iframes"><a>Подробно об Iframes</a></h2><div class="section-content"><p>Итак, это было легко и весело, не так ли? Элементы <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a> предназначены для размещения других веб-документов в текущем документе. Это отлично подходит для включения стороннего контента на ваш сайт, который, возможно, не имеет прямого контроля и не хочет реализовывать вашу собственную версию - например, видео от поставщиков онлайн-видео, системы комментариев, такие как Disqus, карты от поставщиков онлайн-карт, рекламных баннеров и т. д. Живые редактируемые примеры, которые вы использовали в этом курсе, реализованы с помощью &lt;iframe&gt;.</p>\n<p>Есть несколько серьёзных <a>Проблем безопасности</a> при использовании &lt;iframe&gt;, которые мы обсудим ниже, но это не значит, что вы не должны использовать их на своих сайтах - они просто требуют некоторых знаний и тщательного обдумывания. Давайте рассмотрим код немного подробнее. Скажем, вы хотите добавить глоссарий MDN на одну из своих веб-страниц. Вы можете попробовать что-то вроде этого:</p>\n<pre compile="false" disable="true" language="markup"><iframe src="https://developer.mozilla.org/ru/docs/Glossary" width="100%" height="500" frameborder="0" allowfullscreen="" sandbox="">\n  <p> <a href="https://developer.mozilla.org/ru/docs/Glossary">\n    Fallback link for browsers that don\'t support iframes\n  </a> </p>\n</iframe>\n</pre>\n<p>Этот пример включает основы, необходимые для использования &lt;iframe&gt;:</p>\n<dl>\n  <dt id="allowfullscreen"><a class="only-in-en-us" title="Currently only available in English (US)"><code>allowfullscreen</code> <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Если установлено, &lt;iframe&gt; может быть помещён в полноэкранный режим с использованием полноэкранного API (что несколько выходит за рамки этой статьи).</p>\n  </dd>\n  <dt id="frameborder"><a class="only-in-en-us" title="Currently only available in English (US)"><code>frameborder</code> <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Если установлено значение 1, это указывает браузеру нарисовать границу между этим фреймом и другими фреймами, что является поведением по умолчанию. 0 удаляет границу. Использование этого на самом деле не рекомендуется, так как тот же эффект можно улучшить, используя <a><code>border</code></a>: none; в <a>CSS</a>.</p>\n  </dd>\n  <dt id="src"><a class="only-in-en-us" title="Currently only available in English (US)"><code>src</code> <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Этот атрибут, как и <a><code>&lt;video&gt;</code></a> / <a><code>&lt;img&gt;</code></a>, содержит путь, указывающий на URL-адрес внедряемого документа.</p>\n  </dd>\n  <dt id="width"><a class="only-in-en-us" title="Currently only available in English (US)"><code>width</code> <small>(en-US)<small></small></small></a> and <a class="only-in-en-us" title="Currently only available in English (US)"><code>height</code> <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Эти атрибуты определяют ширину и высоту, в которых вы хотите использовать iframe.</p>\n  </dd>\n  <dt id="резервный_контент"><a>Резервный контент</a></dt>\n  <dd>\n    <p>Точно так же, как и другие подобные элементы, такие как <a><code>&lt;video&gt;</code></a>, вы можете включить резервный контент между тегами открытия и закрытия &lt;iframe&gt; &lt;/ iframe&gt;, которые появятся, если браузер не поддерживает &lt; IFRAME&gt;. В этом случае мы включили ссылку на страницу. Вряд ли вы столкнётесь с таким браузером, который не поддерживает &lt;iframe&gt; в наше время.</p>\n  </dd>\n  <dt id="sandbox"><a class="only-in-en-us" title="Currently only available in English (US)"><code>sandbox</code> <small>(en-US)<small></small></small></a></dt>\n  <dd>\n    <p>Этот атрибут, который работает в более современных браузерах, чем остальные функции &lt;iframe&gt; (например, IE 10 и выше). Он запрашивает повышенные настройки безопасности. Об этом мы расскажем в следующем разделе.</p>\n  </dd>\n</dl>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Чтобы повысить скорость загрузки, рекомендуется установить атрибут src в элементе iframe с помощью JavaScript после того, как основное содержимое будет загружено. Это ускорит вашу страницу и уменьшит время загрузки официальной страницы (важный показатель <a>SEO</a>.)</p>\n</div></div></section><section aria-labelledby="проблемы_безопасности"><h3 id="проблемы_безопасности"><a>Проблемы безопасности</a></h3><div class="section-content"><p>Выше мы упомянули о проблемах безопасности. Давайте рассмотрим это чуть подробнее. Мы не ожидаем, что вы всё поймёте с первого раза. Мы просто хотим сообщить вам о проблеме и предоставить ссылку, чтобы вы могли вернуться к ней, когда станете более опытными и начнёте рассматривать использование iframe в своих экспериментах и работе. Кроме того, нет необходимости бояться и не использовать &lt;iframe&gt; - вам просто нужно быть осторожным. Продолжим...</p>\n<p>Разработчики браузеров и веб-разработчики на горьком опыте усвоили, что iframe - частая цель (официальный термин: вектор атаки) плохих людей в Интернете (часто называемых хакерами, или, более точно, крекерами) для атаки при попытке злонамеренно изменить ваши веб-страницы или обманом заставить посетителей делать то, чего они не хотят, например, раскрыть конфиденциальную информацию вроде имени пользователя и пароли. Чтобы избежать этого, авторы спецификаций и разработчики браузеров разработали различные механизмы безопасности для обеспечения защиты &lt;iframe&gt;, лучшие из которых мы рассмотрим ниже.</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> <a class="external" target="_blank">Кликджекинг</a> – это один из видов обычной атаки iframe, когда хакеры внедряют невидимый iframe в ваш документ (или внедряют ваш документ на свой собственный вредоносный веб-сайт) и используют его для захвата взаимодействия пользователей. Это обычный способ ввести пользователей в заблуждение или украсть конфиденциальные данные.</p>\n</div>\n<p>Быстрый пример - попробуйте загрузить предыдущий пример, который мы показали выше, в ваш браузер (вы можете найти его живой пример на Github (см. Также исходный код). На самом деле, вы ничего не увидите на странице, т.к. если вы посмотрите в консоль в инструментах разработчика браузера, вы увидите сообщение, объясняющее вам, почему. В Firefox вы получите сообщение <em>«Отказано в доступе» в связи с X-Frame-Options: <code>https://developer.mozilla.org/ru/docs/Glossary</code> не разрешает кадрирование</em>. Это связано с тем, что разработчики, которые построили MDN, включили параметр на сервере, который обслуживает страницы веб-сайта, запрещая им внедряться внутри &lt;iframe&gt; (см. <a>Настройка директивы CSP</a> ниже). Суть здесь такова - целой странице MDN на самом деле нет смысла встраиваться в другие страницы - конечно, если вы не хотите сделать что-то вроде встраивания их на свой сайт и выставлять их как свои собственные; или пытаться украсть данные с помощью clickjacking, что очень плохо. Плюс, если все начнут это делать, вся дополнительная пропускная способность начнёт стоить Mozilla больших денег.</p>\n<h4 id="используйте_только_при_необходимости">Используйте только при необходимости</h4>\n<p>Иногда имеет смысл вставлять сторонний контент - например, видео и карты, но вы избежите головной боли, если будете вставлять сторонний контент только тогда, когда это абсолютно необходимо. Хорошее эмпирическое правило для веб-безопасности: «Вы никогда не можете быть слишком осторожным. Если вы что-то сделали, дважды проверьте это. Если кто-то другой сделал это, считайте, что это опасно, пока не будет доказано обратное».</p>\n<p>Помимо безопасности, вы также должны знать об интеллектуальной собственности. Большинство контента находится под защитой авторских прав, даже тот, от которого вы не могли ожидать (например, большинство картинок на <a class="external" target="_blank">Wikimedia Commons</a>). Никогда не выводите контент на свою страницу, если он вам не принадлежит или если нет однозначного письменного разрешения от правообладателя. Наказания за нарушения авторских прав строги. И, повторимся, вы никогда не можете быть слишком осторожными.</p>\n<p>Если контент лицензирован, вы должны соблюдать условия лицензии. Например, контент на MDN лицензирован на <a>licensed under CC-BY-SA</a>. Это означает, что вы <a class="external" target="_blank">должны относиться к нам с уважением</a>, когда цитируете наш контент, даже если внесли в него существенные изменения.</p>\n<h4 id="используйте_https">Используйте HTTPS</h4>\n<p><a>HTTPS</a> это зашифрованная версия <a>HTTP</a>. Вы должны обслуживать свои веб-сайты, используя HTTPS, всегда, когда это возможно :</p>\n<ol>\n  <li>HTTPS уменьшает вероятность того, что контент был изменён по пути;</li>\n  <li>HTTPS запрещает доступ внедрённого контента к контенту в вашем исходном документе и наоборот.</li>\n</ol>\n<p>Использование HTTPS требует сертификат безопасности, что может обходиться в копеечку (хотя есть <a class="external" target="_blank">Let\'s Encrypt</a>, что облегчает задачу). Если вы не можете его получить, вы можете отдавать свой родительский документ с помощью HTTP. Однако, из-за второго преимущества HTTPS <em>во что бы то ни стало</em> вы не должны внедрять сторонний контент с HTTP. (В лучшем случае ваш браузер выдаст угрожающее предупреждение.) Все уважаемые компании, которые делают контент доступным для внедрения через &lt;iframe&gt;, доступны через HTTPS - посмотрите URL-адреса внутри &lt;iframe&gt; src при встраивании, например, содержимого из Карт Google или Youtube.</p>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> <a>Github pages</a> позволяют предоставлять контент через HTTPS по умолчанию, поэтому это полезно для размещения контента. Если вы используете другой хостинг и не уверены, спросите хостинг-провайдера об этом.</p>\n</div>\n<h4 id="всегда_используйте_атрибут_sandbox">Всегда используйте атрибут <code>sandbox</code></h4>\n<p>Вы хотите дать хакерам как можно меньше возможностей, чтобы делать плохие вещи на вашем веб-сайте, поэтому вы должны позволять копипастить встроенный контент только с разрешений, необходимых для выполнения этого действия. Конечно, это относится и к вашему собственному контенту. Контейнер для кода, в котором он может использоваться надлежащим образом или для тестирования, но не может нанести вред остальной части кодовой базы (случайной или злонамеренной), называется <a class="external" target="_blank">sandbox</a>.</p>\n<p>Контент, не ограниченный sandbox, может сделать слишком многое (выполнение JavaScript, отправка форм, всплывающие окна и т. д.). По умолчанию включайте все возможные ограничения, используя атрибут <code>sandbox</code> без параметров, как показано в предыдущем примере.</p>\n<p>Если это необходимо, вы можете добавлять разрешения один за другим (внутри значения атрибута <code>sandbox=""</code>) — смотри <a class="only-in-en-us" title="Currently only available in English (US)"><code>sandbox</code> <small>(en-US)<small></small></small></a> ссылка для всех доступных опций. Важно отметить, что вы <em>никогда</em> не должны добавлять атрибуты <code>allow-scripts</code> и <code>allow-same-origin</code> в свой <code>sandbox</code> атрибут одновременно — в таком случае, встроенный контент может обходить политику безопасности, которая запрещает сайтам выполнять скрипты и использовать JavaScript для отключения "песочницы" sandbox .</p>\n<div class="notecard note" id="sect6">\n  <p><strong>Примечание:</strong> "Песочница" не обеспечивает защиту, если злоумышленники могут обманывать людей через прямое посещение вредоносного контента (вне iframe). Если есть вероятность, что определённый контент может быть вредоносным (например, созданный пользователями контент), пожалуйста, используйте его из другого <a>domain</a> на ваш основной сайт.</p>\n</div>\n<h4 id="настройка_директив_csp">Настройка директив CSP</h4>\n<p><a>CSP</a> означает <strong><a>политику безопасности контента</a></strong> и обеспечивает <a class="only-in-en-us" title="Currently only available in English (US)">набор заголовков HTTP <small>(en-US)<small></small></small></a> (метаданные, отправленные вместе с вашими веб-страницами, когда они обслуживаются с веб-сервера), предназначенных для улучшения безопасности вашего HTML-документа. Когда дело доходит до обеспечения безопасности <code>&lt;iframe&gt;</code>, вы можете <em><a class="only-in-en-us" title="Currently only available in English (US)">настроить сервер для отправки соответствующего <code>X-Frame-Options</code> заголовка. <small>(en-US)<small></small></small></a></em> Это может помешать другим веб-сайтам встраивать ваш контент на их веб-страницы (что позволило бы использовать кликджекинг и множество других атак), что и было сделано разработчиками MDN, как мы видели ранее.</p>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Вы можете прочитать пост Фредерика Брауна <a class="external" target="_blank">On the X-Frame-Options Security Header</a> для более детальной информации по теме. Разумеется, объяснение в этой статье далеко не полное.</p>\n</div></div></section><section aria-labelledby="элементы_embed_и_object"><h2 id="элементы_embed_и_object"><a>Элементы &lt;embed&gt; и &lt;object&gt;</a></h2><div class="section-content"><p>В отличие от <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;iframe&gt;</code> <small>(en-US)</small></a>, элементы <a><code>&lt;embed&gt;</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;object&gt;</code> <small>(en-US)</small></a> выполняют другую функцию. Они являются инструментами общего назначения для встраивания нескольких типов внешнего контента, включая плагиновые технологии, такие как Java Applets и Flash, PDF (которые могут отображаться в браузере с плагином PDF) и даже такой контент, как видео, SVG и изображения!</p>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> <strong>Плагин</strong> - это программное обеспечение, обеспечивающее доступ к контенту, который браузер не может читать изначально.</p>\n</div>\n<p>Тем не менее, вы вряд ли будете использовать эти элементы очень часто. Апплеты не использовались годами, Flash в настоящее время не очень популярен из-за ряда причин (см. <a>Дело против плагинов</a>, ниже), PDF-файлы, как правило, лучше открывать по ссылке, а другой контент - такой, как изображения и видео, могут обрабатываться намного проще. Плагины и эти методы внедрения действительно являются устаревшими технологиями, и мы упоминаем их здесь на случай, если вы столкнётесь с ними в определённых обстоятельствах, таких как интрасети или корпоративные проекты.</p>\n<p>Если вам нужно внедрить контент плагина, ниже исчерпывающая информация, которая вам понадобится:</p>\n\n<div class="notecard note" id="sect9">\n  <p><strong>Примечание:</strong> Элементу <code>&lt;object&gt;</code> необходим атрибут <code>data</code> , атрибут <code>type</code> , или оба сразу. Если вы используете их вместе, вы также можете использовать атрибут <a class="only-in-en-us" title="Currently only available in English (US)"><code>typemustmatch</code> <small>(en-US)<small></small></small></a> (имеющийся в наличии только в Firefox, на момент написания данной статьи). Атрибут <code>typemustmatch</code> предотвращает запуск файла, только если в в атрибут type не записан соответствующий медиа-тип. Следовательно, атрибут <code>typemustmatch</code> может предоставлять значительные преимущества в безопасности в случае встраивания контента из других источников <a>origin</a> (Таким образом, не давая возможности злоумышленникам запускать произвольные скрипты посредством плагинов).</p>\n</div>\n<p>Ниже представлен пример использования элемента <a><code>&lt;embed&gt;</code></a> для вставки Flash-фильма (загляните на <a class="external" target="_blank">live on Github</a>, а также на <a class="external" target="_blank">check the source code</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><embed src="whoosh.swf" quality="medium" bgcolor="#ffffff" width="550" height="400" name="whoosh" align="middle" allowscriptaccess="sameDomain" allowfullscreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">\n</pre></div>\n<p>Достаточно ужасно, не так ли? Html-код, генерируемый Flash, имел склонность быть значительно хуже. Он использовал элемент <code>&lt;object&gt;</code> вместе со встроенным элементом <code>&lt;embed&gt;</code> для скрытия всего фундамента (взгляните на пример). Flash ранее использовался в качестве резерва для HTML5-видео (в случае его отсутствия), но со временем необходимость в этом отпала.</p>\n<p>Давайте взглянем на пример <code>&lt;object&gt;</code> , встраивающего PDF в страницу (взгляните <a class="external" target="_blank">live example</a> и <a class="external" target="_blank">source code</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><object data="mypdf.pdf" type="application/pdf" width="800" height="1200" typemustmatch="">\n  <p>\n    You don\'t have a PDF plugin, but you can\n    <a href="mypdf.pdf">download the PDF file.</a>\n  </p>\n</object>\n</pre></div>\n<p>PDF-файлы были необходимой ступенью между бумажной и цифровой информацией, но в то же время они имеют множество проблем доступности и плохо читаемы на мелких экранах. В некоторых кругах они всё ещё пользуются популярностью, так что заметим, что вместо встраивания в страницу следует использовать ссылки (для скачивания или чтения на отдельной вкладке).</p></div></section><section aria-labelledby="дело_против_плагинов"><h3 id="дело_против_плагинов"><a>Дело против плагинов</a></h3><div class="section-content"><p>Когда-то плагины были незаменимы в Интернете. Помните дни, когда вам приходилось устанавливать Adobe Flash Player для просмотра онлайн-фильма? И потом постоянно возникали раздражающие предупреждения об обновлении Flash Player и Java Runtime Environment. С тех пор веб-технологии стали намного надёжнее. Почти всем сервисам пришло время прекратить доставлять контент с помощью плагинов и вместо этого использовать веб-технологии.</p>\n<ul>\n  <li><strong>Расширьте свою досягаемость для всех</strong>. У каждого есть браузер, но плагины используются все реже, особенно среди мобильных пользователей. Поскольку Web в значительной степени можно использовать без плагинов, люди предпочли бы просто перейти на сайты ваших конкурентов, чем установить плагин.</li>\n  <li><strong>Немного передохните от лишних головных болей, связанных с общедоступностью Flash-плагинов и др.( <a class="external" target="_blank">extra accessibility headaches</a>).</strong></li>\n  <li><strong>Избегайте лишних проблем безопасности.</strong> Ни для кого не секрет,что Adobe Flash является небезопасным, даже после многочисленных патчей. В 2015, Алекс Стэймос (бывший главный сотрудник по вопросам информационной безопасности компании Facebook) даже делал запрос, чтобы Adobe прекратил поддержку Flash.</li>\n</ul>\n<p>Итак, что нужно делать? Если вам нужна интерактивность, HTML и <a>JavaScript</a> могут легко выполнить задание для вас без необходимости использования апплетов Java или устаревшей технологии ActiveX / BHO. Вместо того, чтобы полагаться на Adobe Flash, вы можете использовать видео HTML5 для своих медиа-потребностей, SVG для векторной графики и Canvas для сложных изображений и анимаций. Питер Элст уже писал несколько лет назад, что Adobe Flash редко является подходящим инструментом для работы, за исключением специализированных игр и бизнес-приложений. Что касается ActiveX, браузер Microsoft <a class="only-in-en-us" title="Currently only available in English (US)">Edge <small>(en-US)</small></a> больше не поддерживает его.</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Тема встраивания другого контента в веб-документы поначалу может показаться очень сложной для понимания, поэтому в этой статье мы попытались представить её простым, знакомым способом, который сразу же станет актуальным, но всё же намекает на некоторые из более сложных функций вовлечённых технологий. Начнём с того, что вы вряд ли будете использовать большое количество встраивании стороннего контента, помимо встроенных карт и видео на своих страницах.</p>\n<p>Существует много других технологий, которые включают в себя внедрение внешнего контента, помимо тех, которые мы обсуждали здесь. Мы видели некоторые из них в предыдущих статьях, например <a><code>&lt;video&gt;</code></a>, <a><code>&lt;audio&gt;</code></a> и <a><code>&lt;img&gt;</code></a>, но есть и другие. Например, <a><code>&lt;canvas&gt;</code></a> для 2D-и 3D-графики, сгенерированной JavaScript, и <a><code>&lt;svg&gt;</code></a> для встраивания векторной графики. Мы рассмотрим SVG в следующей статье модуля.</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Добавление векторной графики в веб-документ',

		content:
			'<header><h1>Добавление векторной графики в веб-документ</h1></header><div class="section-content">\n<p>Векторная графика очень полезна во многих случаях. Она имеет малые размеры файла и высокую масштабируемость – при увеличении масштаба пиксели не увеличиваются вместе с графикой. В данной статье мы покажем, как встраивать векторную графику на Вашу страницу.</p>\n\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Данная статья не научит вас векторной графике, а даст понимание что это и как её использовать в веб-документах.</p>\n</div></div><section aria-labelledby="что_такое_векторная_графика"><h2 id="что_такое_векторная_графика"><a>Что такое векторная графика?</a></h2><div class="section-content"><p>В веб-разработке вы будете сталкиваться с двумя типами изображений - растровым и векторным:</p>\n<ul>\n  <li>Растровое изображение задаётся сеткой пикселей — файл растрового изображения содержит информацию о расположении и цвете каждого пикселя. Среди популярных форматов изображений данного типа числятся Bitmap (.bmp), PNG (.png), JPEG (.jpg) и GIF (.gif)</li>\n  <li>Векторное изображение определяется алгоритмом — файл векторного изображения содержит фигуры и правила, по которым компьютер может вычислить как должно выглядеть изображение, когда выводится на экран.<a>SVG</a> формат позволяет нам создавать векторную графику для использования в веб-документах.</li>\n</ul>\n<p>Для демонстрации различий между типами изображений, давайте взглянем на пример. Вы можете найти данный пример на Github как <a class="external" target="_blank">vector-versus-raster.html</a> — в нем демонстрируются два, на первый взгляд, одинаковых изображения, расположенных рядом друг с другом. Каждое из изображений представляет собой красную звезду с тенью. Различие их в том, что левое изображение имеет формат PNG, а правое - SVG.</p>\n<p>Различия становятся заметны, когда вы изменяете масштаб страницы — PNG изображение становится неровным (становятся видны пиксели), потому что оно содержит информацию о положении и цвете каждого пикселя. При увеличении каждый пиксель также увеличивается, охватывая несколько пикселей дисплея, поэтому становятся заметны "кирпичики". Векторное изображение продолжает выглядеть ровным и красивым, потому что фигуры, масштабируются совместно с ним.</p>\n<p>\n  \n</p>\n<p>\n  \n</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Оба изображения сверху имеют формат PNG — слева показано растровое изображение, справа условно показано векторное изображение. Напоминаем, что пример с реальными растровым и векторными изображениями находится по ссылке: <a class="external" target="_blank">vector-versus-raster.html</a> !</p>\n</div>\n<p>Более того, файлы векторных изображений намного меньше растровых, т.к. в них содержится алгоритмы построения вместо информации о каждом пикселе.</p></div></section><section aria-labelledby="что_такое_svg"><h2 id="что_такое_svg"><a>Что такое SVG?</a></h2><div class="section-content"><p><a>SVG</a> это язык на базе <a>XML</a> для описания векторных изображений. По сути это язык разметки, как и HTML, только содержащий множество различных элементов для определения фигур вашего изображения, а также параметров их отображения. SVG предназначен для разметки графики, а не содержимого. В простейшем случае, вы можете использовать элементы для создания простых фигур, таких как <a><code>&lt;circle&gt;</code></a>(круг) и <a><code>&lt;rect&gt;</code></a>(прямоугольник). Более сложные SVG элементы включают <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;feColorMatrix&gt;</code> <small>(en-US)</small></a> (разложение цвета с использованием матрицы), <a><code>&lt;animate&gt;</code></a> (анимация частей вашего векторного изображения) и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;mask&gt;</code> <small>(en-US)</small></a> (применение маски к изображению.)</p>\n<p>В качестве простого примера, следующий код создаёт круг и прямоугольник:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><svg version="1.1" baseProfile="full" width="300" height="200" xmlns="http://www.w3.org/2000/svg">\n  <rect width="100%" height="100%" fill="black"></rect>\n  <circle cx="150" cy="100" r="90" fill="blue"></circle>\n</svg>\n</pre></div>\n<p>В результате получается следующее:</p><div class="code-example" id="sect3"><div class="example-header" id="sect4"></div></div>\n<p>Исходя из примера выше, может показаться, что SVG легко создавать вручную. Да, простые SVG можно создавать, используя текстовый редактор, но в случае сложного изображения это становится сложным. Для создания SVG изображений используются редакторы векторной графики, такие как <a class="external" target="_blank">Inkscape</a> или <a class="external" target="_blank">Illustrator</a>. Данные приложения позволяют создавать различные изображения, используя множество графических инструментов, и создавать приближения фотографий (например опция Trace Bitmap feature приложения Inkscape.)</p>\n<p>Дополнительные преимущества SVG:</p>\n<ul>\n  <li>Текст в векторном изображении остаётся машинописным (то есть доступным для поисковика, что улучшает <a>SEO</a>).</li>\n  <li>SVG легко поддаются стилизации/программированию (scripting), потому что каждый компонент изображения может быть стилизован с помощью CSS или запрограммирован с помощью JavaScript.</li>\n</ul>\n<p>Так почему же тогда вообще используют растровые изображения, а не только SVG? Дело в том, что SVG имеет ряд недостатков:</p>\n<ul>\n  <li>SVG может очень быстро стать сложным в том смысле, что размер файла увеличивается; сложные SVG-изображения также создают большую вычислительную нагрузку на браузер.</li>\n  <li>SVG может быть сложнее создать, нежели растровое изображение, в зависимости от того, какое изображение необходимо создать.</li>\n  <li>не поддерживается старыми версиями браузеров, то есть не подойдёт для сайтов, поддерживающих Internet Explorer 8 или старее.</li>\n</ul>\n<p>В целом, растровая графика лучше подходит для сложных изображений, например, фотографий.</p>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> В приложении Inkscape сохраняйте файлы как Plain SVG, для экономии места. Также, пожалуйста перейдите на <a class="external" target="_blank">статью, описывающую как подготовить SVG изображение для веб-документа.</a></p>\n</div></div></section><section aria-labelledby="добавление_svg_на_страницы"><h2 id="добавление_svg_на_страницы"><a>Добавление SVG на страницы</a></h2><div class="section-content"><p>В данном разделе мы рассмотрим различные варианты, с помощью которых можно добавить SVG векторную графику на веб-страницу.</p></div></section><section aria-labelledby="быстрый_путь_img"><h3 id="быстрый_путь_img"><a>Быстрый путь: </a><a><code>&lt;img&gt;</code></a></h3><div class="section-content"><p>Чтобы встроить SVG используя элемент <a><code>&lt;img&gt;</code></a>, вам просто нужно сослаться на него в атрибуте src, как и следовало ожидать. Вам понадобится атрибут <code>height</code> или <code>width</code> (или оба, если ваш SVG не имеет собственного соотношения сторон). Если вы ещё этого не делали, пожалуйста, прочтите <a>Изображения в HTML</a>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="equilateral.svg" alt="triangle with all three sides equal" height="87px" width="100px">\n</pre></div>\n<h4 id="плюсы">Плюсы</h4>\n<ul>\n  <li>Быстрый, знакомый синтаксис изображения со встроенным текстовым эквивалентом, доступным в атрибуте <code>alt</code></li>\n  <li>Вы можете легко превратить изображение в гиперссылку, поместив <code>&lt;image&gt;</code> в элемент <a><code>&lt;a&gt;</code></a>.</li>\n</ul>\n<h4 id="минусы">Минусы</h4>\n<ul>\n  <li>Вы не можете изменять изображение с помощью JavaScript.</li>\n  <li>Если вы хотите управлять содержимым SVG с помощью CSS, вы должны использовать встроенные CSS стили в своём SVG коде. (Внешние таблицы стилей, вызываемые из файла SVG, не действуют.)</li>\n  <li>Вы не можете изменить стиль изображения с помощью псевдоклассов CSS (например <code>:focus</code>).</li>\n</ul></div></section><section aria-labelledby="устранение_неполадок_и_кросс-браузерная_поддержка"><h3 id="устранение_неполадок_и_кросс-браузерная_поддержка"><a>Устранение неполадок и кросс-браузерная поддержка</a></h3><div class="section-content"><p>Для браузеров которые не поддерживают SVG (IE 8 и ниже, Android 2.3 и ниже), вы можете ссылаться на PNG или JPG в <code>src</code> атрибуте и использовать <a><code>srcset</code></a> атрибут (который распознают только последние браузеры) чтобы сослаться на SVG. В этом случае SVG будут загружаться только поддерживающими браузерами - старые же браузеры будут загружать PNG:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="equilateral.png" alt="triangle with equal sides" srcset="equilateral.svg">\n</pre></div>\n<p>Также вы можете использовать SVG в качестве фоновых изображение CSS, как показано ниже. В приведённом коде ниже старые браузеры будут придерживаться PNG, который они понимают, тогда как новые браузеры будут загружать SVG:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">background: url("fallback.png") no-repeat center;\nbackground-image: url("image.svg");\nbackground-size: contain;\n</pre></div>\n<p>Подобно методу <code>&lt;img&gt;</code>, описанному выше, вставка SVG с использованием фоновых изображений CSS означает, что SVG нельзя манипулировать при помощи JavaScript, и что SVG будет иметь те же ограничения, что и CSS.</p>\n<p>Если ваши SVG не отображаются вовсе, возможно, ваш сервер не настроен должным образом. Если проблема в этом, то <a>данная статья укажет вам верное направление</a>.</p></div></section><section aria-labelledby="как_включить_svg_в_ваш_html_код"><h3 id="как_включить_svg_в_ваш_html_код"><a>Как включить SVG в ваш HTML код</a></h3><div class="section-content"><p>Вы можете открыть файл SVG в текстовом редакторе, скопировать этот код и вставить его в ваш HTML документ — такой приём иногда называют встраиванием SVG (<strong>SVG inline</strong> или <strong>inlining SVG</strong>). Убедитесь, что фрагмент вашего SVG кода начинается и заканчивается с тегов <a><code>&lt;svg&gt;&lt;/svg&gt;</code></a> (не включайте ничего, кроме них). Вот очень простой пример того, что вы можете вставить в ваш документ:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><svg width="300" height="200">\n  <rect width="100%" height="100%" fill="green"></rect>\n</svg>\n</pre></div>\n<h4 id="плюсы_2">Плюсы</h4>\n<ul>\n  <li>Вставка вашего SVG путём <strong>SVG inline</strong> позволяет сохранить HTTP запросы и, следовательно, может уменьшить время загрузки.</li>\n  <li>Вы можете присваивать <code>class</code>-ы и <code>id</code> элементам SVG и стилизовать их при помощи CSS, либо в пределах SVG, либо внутри SVG, либо там, где вы размещаете правила стиля CSS для вашего HTML документа. По факту вы можете использовать любой <a>атрибут представления SVG</a> как свойство CSS.</li>\n  <li><strong>SVG inline</strong> единственный метод, который позволяет вам использовать CSS-взаимодействия (как <code>:focus</code>) и CSS-анимацию на вашем SVG изображении (даже в вашей обычной таблице стилей).</li>\n  <li>Вы можете разметить SVG как гиперссылку, обернув в элемент <a><code>&lt;a&gt;</code></a>.</li>\n</ul>\n<h4 id="минусы_2">Минусы</h4>\n<ul>\n  <li>Этот метод подходит, только если вы используете SVG лишь в одном месте. Дублирование делает обслуживание ресурсоёмким.</li>\n  <li>Дополнительный SVG код увеличивает размер вашего HTML файла.</li>\n  <li>Браузер не может кешировать встроенный SVG, так как он кеширует обычные изображения.</li>\n  <li>Вы можете добавить альтернативный вариант в элементе <a><code>&lt;foreignObject&gt;</code></a>, но браузеры поддерживающие SVG будут продолжать загружать все альтернативные изображения. Вы должны взвесить действительно стоит ли поддержка устаревших браузеров дополнительных накладных расходов (ресурсов).</li>\n</ul></div></section><section aria-labelledby="как_встраивать_svg_при_помощи_iframe"><h3 id="как_встраивать_svg_при_помощи_iframe"><a>Как встраивать SVG при помощи &lt;iframe&gt;</a></h3><div class="section-content"><p>Вы можете открывать ваши SVG изображения в браузере просто как веб-страницы. Таким образом встраивание SVG документа с помощью <code>&lt;iframe&gt;</code> выполняется как мы изучали ранее в главе <a>От &lt;object&gt; к &lt;iframe&gt; — другие технологии внедрения</a>.</p>\n<p>Вот краткий обзор:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><iframe src="triangle.svg" width="500" height="500" sandbox="">\n  <img src="triangle.png" alt="Triangle with three unequal sides" />\n</iframe>\n</pre></div>\n<p>Это - определённо не самый лучший метод для выбора:</p>\n<h4 id="минусы_3">Минусы</h4>\n<ul>\n  <li>Как вы можете видеть, у <code>iframe</code>-ов есть резервный механизм, но браузеры отображают резервный вариант только если они вообще не поддерживают <code>iframe</code>-ы.</li>\n  <li>Более того, до тех пор пока SVG и ваша текущая веб-страница имеют одинаковый <a>origin</a>, вы не можете использовать JavaScript на вашей основной веб-странице, чтобы манипулировать SVG.</li>\n</ul></div></section><section aria-labelledby="активное_изучение_поиграйте_с_svg"><h2 id="активное_изучение_поиграйте_с_svg"><a>Активное изучение: поиграйте с SVG</a></h2><div class="section-content"><p>В этом разделе активного изучения мы бы хотели, чтобы вы просто попробовали поиграть с SVG. Ниже, в области <em>Input,</em> вы увидите, что мы уже предоставили некий пример для того, чтобы вы начали. А ещё вы можете посетить <a>SVG Element Reference</a>, чтобы узнать больше деталей о других игрушках, которые могут быть использованы в SVG, и тоже попробовать их. Этот раздел полностью посвящён практике ваших исследовательских навыков и вашему развлечению.</p>\n<p>Если Вы где-то застряли и ваш код не работает, вы всегда можете начать сначала, нажав кнопку <em>Reset</em>.</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup"><h2>Live output</h2>\n\n<div class="output" style="min-height: 50px;"></div>\n\n<h2>Editable code</h2>\n<p class="a11y-label">\n  Press Esc to move focus away from the code area (Tab inserts a tab character).\n</p>\n\n<input id="code" class="input" style="width: 95%;min-height: 200px;">  &lt;svg width="100%" height="100%"&gt;\n    &lt;rect width="100%" height="100%" fill="red" /&gt;\n    &lt;circle cx="100%" cy="100%" r="150" fill="blue" stroke="black" /&gt;\n    &lt;polygon points="120,0 240,225 0,225" fill="green"/&gt;\n    &lt;text x="50" y="100" font-family="Verdana" font-size="55"\n          fill="white" stroke="black" stroke-width="2"&gt;\n            Hello!\n    &lt;/text&gt;\n  &lt;/svg&gt;\n</input>\n\n<div class="playable-buttons">\n  <input id="reset" type="button" value="Reset">\n  <input id="solution" type="button" value="Show solution" disabled="">\n</div>\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">html {\n  font-family: sans-serif;\n}\n\nh2 {\n  font-size: 16px;\n}\n\n.a11y-label {\n  margin: 0;\n  text-align: right;\n  font-size: 0.7rem;\n  width: 98%;\n}\n\nbody {\n  margin: 10px;\n  background: #f5f9fa;\n}\n</pre></div>\n<div class="code-example"><pre compile="false" disable="true" language="markup">var textarea = document.getElementById("code");\nvar reset = document.getElementById("reset");\nvar solution = document.getElementById("solution");\nvar output = document.querySelector(".output");\nvar code = textarea.value;\nvar userEntry = textarea.value;\n\nfunction updateCode() {\n  output.innerHTML = textarea.value;\n}\n\nreset.addEventListener("click", function () {\n  textarea.value = code;\n  userEntry = textarea.value;\n  solutionEntry = htmlSolution;\n  solution.value = "Show solution";\n  updateCode();\n});\n\nsolution.addEventListener("click", function () {\n  if (solution.value === "Show solution") {\n    textarea.value = solutionEntry;\n    solution.value = "Hide solution";\n  } else {\n    textarea.value = userEntry;\n    solution.value = "Show solution";\n  }\n  updateCode();\n});\n\nvar htmlSolution = "";\nvar solutionEntry = htmlSolution;\n\ntextarea.addEventListener("input", updateCode);\nwindow.addEventListener("load", updateCode);\n\n// stop tab key tabbing out of textarea and\n// make it write a tab at the caret position instead\n\ntextarea.onkeydown = function (e) {\n  if (e.keyCode === 9) {\n    e.preventDefault();\n    insertAtCaret("\t");\n  }\n\n  if (e.keyCode === 27) {\n    textarea.blur();\n  }\n};\n\nfunction insertAtCaret(text) {\n  var scrollPos = textarea.scrollTop;\n  var caretPos = textarea.selectionStart;\n\n  var front = textarea.value.substring(0, caretPos);\n  var back = textarea.value.substring(\n    textarea.selectionEnd,\n    textarea.value.length,\n  );\n  textarea.value = front + text + back;\n  caretPos = caretPos + text.length;\n  textarea.selectionStart = caretPos;\n  textarea.selectionEnd = caretPos;\n  textarea.focus();\n  textarea.scrollTop = scrollPos;\n}\n\n// Update the saved userCode every time the user updates the text area code\n\ntextarea.onkeyup = function () {\n  // We only want to save the state when the user code is being shown,\n  // not the solution, so that solution is not saved over the user code\n  if (solution.value === "Show solution") {\n    userEntry = textarea.value;\n  } else {\n    solutionEntry = textarea.value;\n  }\n\n  updateCode();\n};\n</pre></div><div class="code-example" id="sect6"><div class="example-header" id="sect7"></div></div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Эта статья предоставила вам краткий обзор по тому, что такое векторная графика и SVG, почему полезно знать о них и как внедрять SVG в вашу веб-страницу. Эта статья не является полным руководством по изучению SVG, а всего лишь указатель, чтоб вы знали что такое SVG, на случай, если вы встретите его во время странствий по Сети. Так что не переживайте, если вы ещё не чувствуете себя экспертом в SVG. Ниже мы включили несколько ссылок, которые могут вам помочь, если вы хотите узнать больше о том, как это работает.</p>\n<p>В последней статье этого модуля мы будем исследовать адаптивные изображения в деталях, рассматривая инструменты HTML, которые позволяют делать ваши изображения так, чтоб они могли лучше работать на разных устройствах.</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Адаптивные изображения',

		content:
			'<header><h1>Адаптивные изображения</h1></header><div class="section-content">\n<p>В данной статье мы изучим концепцию гибких (responsive) изображений — таких, которые отображаются хорошо на устройствах с сильно отличающимися размерами экрана, разрешением, и другими характеристиками — и рассмотрим инструменты, которые имеются в HTML для их реализации. Responsive images - только одна часть (и хорошее начало) гибкого веб-дизайна, темы, которая будет рассмотрена подробнее в будущем модуле на тему <a>CSS</a>.</p>\n</div><section aria-labelledby="почему_адаптивные_изображения"><h2 id="почему_адаптивные_изображения"><a>Почему адаптивные изображения?</a></h2><div class="section-content"><p>Какую проблему мы пытаемся решить адаптивными изображениями? Давайте рассмотрим типичный сценарий. Обычный веб-сайт может содержать изображение в заголовке, для улучшения визуального восприятия пользователем, а также несколько изображений в контенте под ним. Вы, вероятно, захотите, чтобы изображение в заголовке занимало всю ширину окна, а изображения в контенте размещались где-то внутри колонки с контентом. Давайте посмотрим на следующий простой пример:</p>\n<p>\n  \n</p>\n<p>Такая вёрстка хорошо выглядит на широкоформатных экранах ноутбуков и настольных ПК, (вы можете посмотреть <a class="external" target="_blank">посмотреть демо-пример</a> и найти <a class="external" target="_blank">исходный код</a> на Github.) Мы не будем подробно рассматривать CSS, скажем только следующее:</p>\n<ul>\n  <li>Содержимому тега <code>main</code> задана максимальная ширина 1200 пикселей. Если ширина окна браузера больше этого значения, то содержимое сайта остаётся на 1200 пикселей и центрирует себя в доступном пространстве. Если ширина окна браузера меньше, содержимое устанавливается в 100% от ширины экрана.</li>\n  <li>Изображение в шапке всегда будет оставаться в центре тега header вне зависимости от ширины браузера. Если сайт будет просматриваться на узких экранах, то важные детали в центре изображения (люди) всё равно будут видны. Все, что выходит за пределы ширины экрана будет скрыто. Высота шапки 200 пикселей.</li>\n  <li>Изображения в содержимом заданы так, что если ширина body становится меньше чем ширина изображения, то изображения начинают сжиматься и остаются всегда внутри body и не выступают за его пределы.</li>\n</ul>\n<p>Всё хорошо, однако проблемы начинаются, когда вы просматриваете сайт на устройстве с небольшим экраном – шапка внизу выглядит нормально, но теперь она занимает значительную высоту экрана; первое изображение в контенте напротив, выглядит ужасно – при таком размере едва можно рассмотреть людей!</p>\n<p>\n  \n</p>\n<p>Было бы намного лучше показывать обрезанную версию изображения, на котором видны важные детали снимка, когда сайт отображается на узком экране, и, возможно, что-то среднее между обрезанным и оригинальным изображениями для экранов средней ширины, таких как планшеты – это известно как <strong>art direction problem</strong>.</p>\n<p>Кроме того, нет нужды встраивать такие большие изображения на страницу, если она просматривается на маленьком экране мобильного устройства; это называется <strong>resolution switching problem</strong> — растровое изображение представляет собой точно-заданное количество пикселей по ширине и высоте; как мы успели заметить, когда рассматривали <a>векторную графику</a>, растровое изображение становится зернистым и выглядит ужасно, если оно отображается в размере большем, чем оригинальный (тогда как векторное изображение нет). В то же время, если изображение отображается в гораздо меньшем размере, чем оригинальный, это приведёт к напрасной трате трафика — пользователи мобильных устройств будут грузить большое изображение для компьютера, вместо маленького для их устройства. Идеально было бы иметь несколько файлов в разных разрешениях, и отображать нужный размер в зависимости от устройства, обращающегося к веб-сайту.</p>\n<p>Сложность в том, что для некоторых устройств с большим разрешением экрана нужны изображения большего чем ожидается размера, чтобы чётче отображалось. По сути это всё одна задача в разных условиях.</p>\n<p>Можно предположить, что векторные изображения могли бы решить эти проблемы. В какой-то степени это так. У них небольшой вес и размер, поэтому их можно использовать почти в любом случае. Они хороши для простой графики, узоров, элементов интерфейса и т. д. Сложнее создать векторное изображение с большим количеством деталей, как, например, на фото. Растровые изображения (JPEG) для нашего примера подходят больше.</p>\n<p>Такого рода проблемы не было в начале существования веба, в первой половине 90-х годов – тогда единственными устройствами для просмотра веб-страниц были настольные компьютеры и ноутбуки, так что создатели браузеров и авторы спецификаций даже не задумывались о создании решения. <em>Технологии отзывчивых изображений</em> были реализованы недавно для решения проблем, указанных выше. Они позволяют вам предоставить браузеру несколько изображений, каждое из которых отображает одно и то же, но содержит разное количество пикселей (<em>resolution switching</em>), или разные изображения с отдельными областями основного изображения (<em>art direction</em>).</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Новые возможности обсуждаются в статье — <a><code>srcset</code></a>/<a><code>sizes</code></a>/<a><code>&lt;picture&gt;</code></a> — все они поддерживаются последними версиями современных настольных и мобильных браузеров (включая Microsoft Edge, но не Internet Explorer).</p>\n</div></div></section><section aria-labelledby="как_сделать_изображения_отзывчивыми"><h2 id="как_сделать_изображения_отзывчивыми"><a>Как сделать изображения отзывчивыми?</a></h2><div class="section-content"><p>В этом разделе рассмотрим две вышеописанные проблемы и покажем, как их решить с использованием инструментов HTML <a><code>&lt;img&gt;</code></a>. Как показано на примере выше - изображение в заголовке используется только как украшение сайта и установлено как фоновое с помощью CSS. <a class="external" target="_blank">CSS больше подходит для адаптивного дизайна</a> чем HTML, об этом поговорим в следующем модуле о CSS.</p></div></section><section aria-labelledby="разные_разрешения_разные_размеры"><h3 id="разные_разрешения_разные_размеры"><a>Разные разрешения: Разные размеры</a></h3><div class="section-content"><p>Итак, какую проблему решают разные разрешения? В зависимости от устройства нужно отобразить одно и то же изображение, но разных размеров. Посмотрите на вторую картинку в примере. Стандартный элемент <a><code>&lt;img&gt;</code></a> обычно позволяет указать только один путь к файлу:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="elva-fairy-800w.jpg" alt="Elva dressed as a fairy">\n</pre></div>\n<p>Однако есть два новых атрибута — <a><code>srcset</code></a> и <a><code>sizes</code></a> — позволяющих добавить дополнительные изображения с пометками, чтобы браузер выбрал подходящее. Пример на Github: <a class="external" target="_blank">responsive.html</a> (также смотри <a class="external" target="_blank">источник кода</a>).</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img srcset="\n    elva-fairy-320w.jpg 320w,\n    elva-fairy-480w.jpg 480w,\n    elva-fairy-800w.jpg 800w\n  " sizes="(max-width: 320px) 280px,\n            (max-width: 480px) 440px,\n            800px" src="elva-fairy-800w.jpg" alt="Elva dressed as a fairy">\n</pre></div>\n<p>Атрибуты <code>srcset</code> и <code>sizes</code> кажутся сложными, но они не так плохи, если вы отформатируете их как в примере выше: каждая часть значения атрибута с новой строки. Значение состоит из списка элементов через запятую, каждый из которых включает три части. Давайте рассмотрим эти значения:</p>\n<p><strong><code>srcset</code></strong> включает названия изображений, среди которых браузер выберет нужное и их размеры. Перед каждой запятой части значения в таком порядке:</p>\n<ol>\n  <li>Название изображения (<code>elva-fairy-480w.jpg</code>.)</li>\n  <li>Пробел.</li>\n  <li>\n    <strong>Актуальная ширина картинки</strong> <strong>в пикселах</strong> (<code>480w</code>) — заметьте, что здесь используется <code>w</code> вместо <code>px</code>, как вы могли ожидать. Эта настоящая ширина изображения, которая может быть просмотрена в свойствах картинки на вашем компьютере (например, на Mac нужно открыть картинку в Finder и нажать\n    <kbd>Cmd</kbd>\n    +\n    <kbd>I</kbd>\n    , чтобы вывести информацию на экран).\n  </li>\n</ol>\n<p><strong><code>sizes</code></strong> определяет перечень медиавыражений (например, ширину экрана) и указывает предпочтительную ширину изображения, когда определённое медиавыражение истинно — это то, о чём мы говорили выше. В нашем случае, перед каждой запятой мы пишем:</p>\n<ol>\n  <li><strong>Медиа-условие</strong> (<code>(max-width:480px)</code>) — вы можете больше узнать об этом в <a>CSS topic</a>, но сейчас давайте скажем, что медиа-условие описывает возможное состояние экрана. В этом случае, мы говорим "когда viewport width меньше или равен 480 пикселям".</li>\n  <li>Пробел.</li>\n  <li><strong>Ширину слота</strong> (в оригинале "width of the slot"), занимаемую изображением, когда медиа-условие истинно. (<code>440px</code>)</li>\n</ol>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Для ширины слота, вы можете указать абсолютные значения (<code>px</code>, <code>em</code>) или значение относительно окна просмотра (<code>vw</code>), но НЕ проценты. Вы могли заметить, что у последнего слота нет медиа-условия — это значение по умолчанию, которое станет актуальным, если ни одно из предыдущих медиа-условий не будет истинно. Браузер игнорирует все последующие проверки после первого совпадения, так что будьте внимательнее к порядку их объявления.</p>\n</div>\n<p>Итак, с такими атрибутами, браузер сделает следующее:</p>\n<ol>\n  <li>Посмотрит на ширину экрана устройства.</li>\n  <li>Попытается определить подходящее медиа-условие из списка в атрибуте <code>sizes</code>.</li>\n  <li>Посмотрит на размер слота к этому медиавыражению.</li>\n  <li>Загрузит изображение из списка из <code>srcset</code>, которое имеет тот же размер, что и выбранный слот, или, если такого нет, то первое изображение, которое больше размера выбранного слота.</li>\n</ol>\n<p>И это всё! На текущий момент, если поддерживающий браузер с viewport width 480px загрузит страницу, медиа-условие <code>(max-width: 480px)</code> будет истинно, следовательно, будет выбран слот <code>440px</code>, тогда будет загружено изображение <code>elva-fairy-480w.jpg</code>, так как свойство ширины (<code>480w</code>) наиболее близко значение <code>440px</code>. Условно, изображение 800px занимает на диске 128KB, в то время как версия в 480px только 63KB — экономия в 65KB. Теперь представьте, что у вас страница, на которой много изображений. Используя это технику, вы обеспечите мобильным пользователям большую пропускную способность.</p>\n<p>Старые браузеры, не поддерживающие эти возможности, просто проигнорируют их и возьмут изображение по адресу из атрибута <a><code>src</code></a>.</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> В описании элемента <a><code>&lt;head&gt;</code></a> вы найдёте строку <code>&lt;meta name="viewport" content="width=device-width"&gt;</code>: это заставляет мобильные браузеры адаптировать их реальный viewport width для загрузки web-страниц (некоторые мобильные браузеры нечестны насчёт своего viewport width, вместо этого они загружают страницу в большем viewport width, а затем ужимают её, что не очень хорошо сказывается на наших отзывчивых изображениях или дизайне. Мы расскажем вам об этом больше в будущем модуле.)</p>\n</div></div></section><section aria-labelledby="полезные_инструменты_разработчика"><h3 id="полезные_инструменты_разработчика"><a>Полезные инструменты разработчика</a></h3><div class="section-content"><p>Есть несколько полезных браузерных <a>инструментов разработчика</a>, чтобы помочь с определением необходимой ширины слотов и т. д., которые вам нужно использовать. Когда я работал над ними, я сначала загружал фиксированную версию моего примера (<code>not-responsive.html</code>), затем открывал <a class="external" target="_blank">Responsive Design View</a> (<em>Tools &gt; Web Developer &gt; Responsive Design View</em>), который позволяет взглянуть на layout вашей веб-страницы как если бы они были просмотрены через устройства с различными размерами экрана.</p>\n<p>Я устанавливал viewport width на 320px, затем на 480px; для каждой я обращался к <a class="external" target="_blank">DOM Inspector,</a> кликал по элементу <a><code>&lt;img&gt;</code></a> в котором мы заинтересованы, далее смотрел размер во вкладке Box Model с правой стороны дисплея. Это должно дать вам необходимую ширину изображения</p>\n<p>\n  \n</p>\n<p>А дальше вы можете проверить работает ли <code>srcset</code> если установить значение viewport width таким каким вы хотите (например, установить узкую ширину), открыв Network Inspector (<em>Tools &gt; Web Developer &gt; Network</em>) и затем перезагрузить страницу. Это должно дать вам перечень ресурсов которые были загружены чтобы составить (собрать) web-страницу, и тут вы можете проверить какой файл изображения был выбран для загрузки.</p>\n<p>\n  \n</p></div></section><section aria-labelledby="переключения_разрешений_одинаковый_размер_разные_разрешения"><h3 id="переключения_разрешений_одинаковый_размер_разные_разрешения"><a>Переключения разрешений: Одинаковый размер, разные разрешения</a></h3><div class="section-content"><p>Если вы поддерживаете несколько разрешений экрана, но все видят ваше изображение в одном и том же размере на экране, вы можете позволить браузеру выбирать изображение с подходящим разрешением используя <code>srcset</code> с x-дескриптором и без <code>sizes</code> — более простой синтаксис! Найти пример как это выглядит можно здесь <a class="external" target="_blank">srcset-resolutions.html</a> (смотрите также <a class="external" target="_blank">the source code</a>):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img srcset="elva-fairy-320w.jpg, elva-fairy-480w.jpg 1.5x, elva-fairy-640w.jpg 2x" src="elva-fairy-640w.jpg" alt="Elva dressed as a fairy">\n</pre></div>\n<p>\n  В данном примере, к изображению применяется CSS таким образом, что оно имеет ширину в 320 пикселей на экране (также называемое CSS-пикселями):\n</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">img {\n  width: 320px;\n}\n</pre></div>\n<p>В этом случае, нет необходимости в <code>sizes</code> — браузер просто определяет в каком разрешении отображает дисплей и выводит наиболее подходящее изображение в соответствии с <code>srcset</code>. Таким образом, если устройство, подключаемое к странице, имеет дисплей стандартного/низкого разрешения, когда один пиксель устройства представляет (соответствует) каждый CSS-пиксель, то будет загружено изображение <code>elva-fairy-320w.jpg</code> (применён x1, то есть вам не надо включать его). Если устройство имеет высокое разрешение, в два пикселя устройства на каждый CSS-пиксель или более, то будет загружено изображение <code>elva-fairy-640w.jpg</code>. 640px изображение имеет размер 93KB, тогда так 320px изображение - всего 39KB.</p></div></section><section aria-labelledby="художественное_оформление"><h3 id="художественное_оформление"><a>Художественное оформление</a></h3><div class="section-content"><p>Подводя итоги, <strong>проблема художественного оформления</strong> заключается в желании изменить отображаемое изображение чтобы оно соответствовало разным размерам отображения изображения. Например, если на веб-сайте отображается большой пейзажный снимок с человеком посередине при просмотре в браузере на настольном компьютере, то при просмотре веб-сайта в мобильном браузере он уменьшается; он будет выглядеть плохо так как человек будет очень маленьким, и его будет тяжело разглядеть. Вероятно будет лучше показать меньшую портретную картинку в мобильной версии на которой человек отображается в увеличении (в приближении). Элемент <a><code>&lt;picture&gt;</code></a> позволяет нам применять именно такое решение.</p>\n<p>Возвращаясь к нашему оригинальному примеру <a class="external" target="_blank">not-responsive.html</a>, мы имеем изображение которое очень нуждается в художественном оформлении:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><img src="elva-800w.jpg" alt="Chris standing up holding his daughter Elva">\n</pre></div>\n<p>Давайте исправим это при помощи элемента <a><code>&lt;picture&gt;</code></a>! Так же как <a><code>&lt;video&gt;</code> и <code>&lt;audio&gt;</code></a>, элемент <code>&lt;picture&gt;</code> это обёртка содержащая некоторое количество элементов <a><code>&lt;source&gt;</code></a> которые предоставляют браузеру выбор нескольких разных источников, в сопровождении крайне важного элемента <a><code>&lt;img&gt;</code></a>. Код <a class="external" target="_blank">responsive.html</a> выглядит так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><picture>\n  <source media="(max-width: 799px)" srcset="elva-480w-close-portrait.jpg">\n  <source media="(min-width: 800px)" srcset="elva-800w.jpg">\n  <img src="elva-800w.jpg" alt="Chris standing up holding his daughter Elva">\n</picture>\n</pre></div>\n<ul>\n  <li>Элемент <code>&lt;source&gt;</code> принимает атрибут <code>media</code>, который содержит медиа-условие; при помощи этих условий определяется, какое изображение будет выведено. В данном случае, если ширина viewport\'a составит 799px или меньше, будет выведено изображение первого элемента <code>&lt;source&gt;</code>. Если ширина составит 800px и более — второго.</li>\n  <li>Атрибут <code>srcset</code> содержит путь изображения, которое будет выведено. Обратите внимание, что, как и в примере с <code>&lt;img&gt;</code> выше, <code>&lt;source&gt;</code> может принимать атрибуты <code>srcset</code> и <code>sizes</code> с несколько предопределёнными изображениями. Так вы можете не только поместить группу изображений внутри элемента <code>&lt;picture&gt;</code>, но и задать группу предписаний для каждого из них. В реальности вы вряд ли захотите заниматься этим очень часто.</li>\n  <li>Вы всегда должны использовать элемент <code>&lt;img&gt;</code>, с <code>src</code> и <code>alt</code>, прямо перед <code>&lt;/picture&gt;</code>, иначе изображения не появятся. Это нужно на тот случай, когда ни одно из медиа-условий не удовлетворено (например, если бы вы убрали второй элемент <code>&lt;source&gt;)</code> или браузер не поддерживает элемент <code>&lt;picture&gt;</code>.</li>\n</ul>\n<p>Этот код позволяет нам выводить отзывчивое изображение и на широких, и на узких экранах, как показано ниже:</p>\n<p>\n  \n  \n</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> вам следует использовать атрибут <code>media</code> только при художественном оформлении; когда вы используете <code>media</code>, не применяйте медиа-условия с атрибутом <code>sizes</code>.</p>\n</div></div></section><section aria-labelledby="почему_это_нельзя_сделать_посредством_css_и_javascript"><h3 id="почему_это_нельзя_сделать_посредством_css_и_javascript"><a>Почему это нельзя сделать посредством CSS и JavaScript?</a></h3><div class="section-content"><p>Когда браузер начинает загружать страницу, он начинает загрузку изображений до того, как главный парсер начал загружать и интерпретировать CSS и JavaScript. В среднем, эта техника уменьшает время загрузки страницы на 20%. Но она не так полезна в случае с адаптивными изображениями, поэтому и необходимы такие решения, как <code>srcset</code>. Например, вы не могли бы загрузить элемент <code>&lt;img&gt;</code>, потом определить ширину вьюпорта при помощи JavaScript и динамически изменить источник изображения. Изначальное изображение было бы уже загружено к тому времени, как вы загрузили его меньшую версию, что плохо.</p></div></section><section aria-labelledby="смело_используйте_современные_форматы_изображений"><h3 id="смело_используйте_современные_форматы_изображений"><a>Смело используйте современные форматы изображений</a></h3><div class="section-content"><p>Есть несколько новых форматов изображения (таких, как WebP и JPEG-2000), которым удаётся сохранять высокое качество при малом размере файла. Тем не менее, браузеры поддерживают их не полностью.</p>\n<p><code>&lt;picture&gt;</code> позволяет нам использовать их в старых браузерах. Вы можете прописать MIME-тип внутри атрибута <code>type</code>, браузер сразу определит файлы такого типа как неподдерживаемые:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><picture>\n  <source type="image/svg+xml" srcset="pyramid.svg">\n  <source type="image/webp" srcset="pyramid.webp">\n  <img src="pyramid.png" alt="regular pyramid built from four equilateral triangles">\n</picture>\n</pre></div>\n<ul>\n  <li>Не используйте атрибут <code>media</code>, если вам не нужно художественное оформление.</li>\n  <li>В элементе <code>&lt;source&gt;</code> можно указывать путь к изображениям только того типа, который указан в <code>type</code>.</li>\n  <li>Как и в предыдущих примерах, при необходимости вы можете использовать <code>srcset</code> и <code>sizes</code>.</li>\n</ul></div></section><section aria-labelledby="активное_обучение_реализация_собственных_адаптивных_изображений"><h2 id="активное_обучение_реализация_собственных_адаптивных_изображений"><a>Активное обучение: реализация собственных адаптивных изображений</a></h2><div class="section-content"><p>Самостоятельно создайте отзывчивое, художественно оформленное изображение для широких и узких экранов, используя <code>&lt;picture&gt;</code> и <code>srcset</code>.</p>\n<ol>\n  <li>Напишите простую HTML-разметку.</li>\n  <li>Найдите широкоформатное пейзажное фото с какой-нибудь яркой деталью. Создайте веб-версию изображения посредством графического редактора, потом обрежьте его, чтобы крупнее выделить деталь, и создайте второе изображение (примерно 480px достаточно).</li>\n  <li>Используйте элемент <code>&lt;picture&gt;</code> для работы с художественно оформленной картинкой.</li>\n  <li>Обозначьте несколько разных размеров для этой картинки.</li>\n  <li>Используйте <code>srcset</code>/<code>size</code> для описания переключения при смене размеров вьюпорта</li>\n</ol>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> Используйте инструменты разработчика, чтобы отследить смену размера, как было описано выше.</p>\n</div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Это все для отзывчивых изображений - мы надеемся, вам понравилось играть с этими новыми технологиями. Напомним, что мы здесь обсуждали две различные проблемы:</p>\n<ul>\n  <li><strong>Художественное оформление</strong>: Проблема, при которой вы хотите использовать обрезанные изображения для различных макетов - например, ландшафтное изображение для полных экранов на макете компьютера и портретное изображение, показывающее увеличенный основной объект, для мобильного макета. Всё это может быть решено с помощью <a><code>&lt;picture&gt;</code></a> элемента.</li>\n  <li><strong>Переключение разрешений</strong>: Проблема, при которой вы хотите использовать файлы изображений меньшего размера на устройствах с узким экраном, поскольку им не нужны огромные изображения, как на настольных дисплеях, а также дополнительно, что вы хотите использовать изображения разного разрешения для экранов с высокой/низкой плотностью. Эту проблему можно решить с помощью <a>векторной графики</a> (SVG изображений), и <a><code>srcset</code></a> и <a><code>sizes</code></a> атрибуты.</li>\n</ul>\n<p>Это так же подводит нас к окончанию целого модуля <a>"Мультимедиа и встраивание"</a>! Единственное, что вам осталось сейчас сделать перед тем, как двигаться дальше - это попробовать наше мультимедийное задание и посмотреть, как вы усвоили материал. Веселитесь!</p></div></section><section aria-labelledby="посмотрите_так_же"><h2 id="посмотрите_так_же"><a>Посмотрите так же</a></h2><div class="section-content"><ul>\n  <li><a class="external" target="_blank">Отличное введение в отзывчивые изображения от Джейсона Григсби</a></li>\n  <li><a class="external" target="_blank">Отзывчивые изображения: Если вы только меняете разрешения используйте srcset</a> — включает больше объяснений того,как браузер выбирает,какое изображение использовать</li>\n  <li><a><code>&lt;img&gt;</code></a></li>\n  <li><a><code>&lt;picture&gt;</code></a></li>\n  <li><a><code>&lt;source&gt;</code></a></li>\n</ul></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Страница о Mozilla',

		content:
			'<header><h1>Страница о Mozilla</h1></header><div class="section-content">\n<p>В этом задании мы проверим ваши знания приёмов, рассмотренных в статьях этого модуля, через добавление изображений и видео на забавную страницу о Mozilla!</p>\n</div><section aria-labelledby="отправная_точка"><h2 id="отправная_точка"><a>Отправная точка</a></h2><div class="section-content"><p>Для начала этого задания скачайте все HTML файлы и изображения, доступные на github(<a class="external" target="_blank">mdn-splash-page-start</a>). Сохраните содержимое <a class="external" target="_blank">index.html</a> в файле с именем <code>index.html</code> на вашем диске в новой папке. Затем сохраните <a class="external" target="_blank">pattern.png</a> в той же папке (правый клик на изображении для выбора опции сохранения).</p>\n<p>Сохраните изображения из папки <a class="external" target="_blank">originals</a> тем же способом; возможно вы захотите сохранить их в другой папке пока не обработаете (некоторые из них) с помощью графического редактора.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Приведённый для примера HTML файл содержит довольно много CSS для стилизации страницы. Вам не нужно изменять CSS, только HTML внутри <a><code>&lt;body&gt;</code></a> элемента — пока вы используете корректную разметку, CSS будет придавать правильный внешний вид.</p>\n</div></div></section><section aria-labelledby="описание_проекта"><h2 id="описание_проекта"><a>Описание проекта</a></h2><div class="section-content"><p>В этом задании мы представляем вам почти законченный сайт-визитку Mozilla, цель которого - рассказать что-нибудь интересное о принципах Mozilla и предоставить несколько ссылок для углублённого ознакомления. К сожалению, изображения или видео не добавлены - это ваша работа! Вам нужно добавить несколько медиа-файлов для того, чтобы страница смотрелась лучше и имела больше смысла. В следующих подразделах подробно объяснено, что вам требуется сделать:</p></div></section><section aria-labelledby="подготовка_изображений"><h3 id="подготовка_изображений"><a>Подготовка изображений</a></h3><div class="section-content"><p>Используя ваш любимый редактор изображений, создайте версии шириной 400px и 120px, следующих изображений:</p>\n<ul>\n  <li><code>firefox_logo-only_RGB.png</code></li>\n  <li><code>firefox-addons.jpg</code></li>\n  <li><code>mozilla-dinosaur-head.png</code></li>\n</ul>\n<p>Назовите их как-нибудь разумно, например <code>firefoxlogo400.png</code> и <code>firefoxlogo120.png</code>.</p>\n<p>Вместе с <code>mdn.svg</code>, эти изображения будут иконками для ссылок на другие ресурсы внутри секции <code>further-info</code>. Вы также дадите ссылку на логотип Firefox в шапке сайта. Сохраните все копии внутри той же папки, что и <code>index.html</code>.</p>\n<p>Затем создайте фоновую версию <code>red-panda.jpg</code> шириной 1200px и портретную версию шириной 600px, которая показывает панду более крупным планом. Снова назовите их разумно, чтобы легко распознавать их. Сохраните обе копии внутри той же папки, что и <code>index.html</code>.</p>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Следует обрабатывать JPG и PNG изображения, чтобы делать их как можно меньше по весу, при сохранении хорошего вида. <a class="external" target="_blank">tinypng.com</a> - отличный сервис для этого.</p>\n</div></div></section><section aria-labelledby="добавление_логотипа_в_шапку"><h3 id="добавление_логотипа_в_шапку"><a>Добавление логотипа в шапку</a></h3><div class="section-content"><p>Добавьте внутрь элемента <a><code>&lt;header&gt;</code></a> элемент <a><code>&lt;img&gt;</code></a>, который вставит уменьшенную версию логотипа Firefox в шапку.</p></div></section><section aria-labelledby="добавление_видео_к_основному_содержанию_статьи"><h3 id="добавление_видео_к_основному_содержанию_статьи"><a>Добавление видео к основному содержанию статьи</a></h3><div class="section-content"><p>Внутри элемента <a><code>&lt;article&gt;</code></a> (сразу после открывающего тэга), вставьте ролик с YouTube по ссылке <a class="external" target="_blank">https://www.youtube.com/watch?v=ojcNcvb1olg</a>, используя подходящие инструменты YouTube для генерации кода. Видео должно быть 400px в ширину.</p></div></section><section aria-labelledby="добавление_отзывчивых_изображений_к_ссылкам_с_доп._информацией"><h3 id="добавление_отзывчивых_изображений_к_ссылкам_с_доп._информацией"><a>Добавление отзывчивых изображений к ссылкам с доп. информацией</a></h3><div class="section-content"><p>Внутри <a><code>&lt;div&gt;</code></a> с классом <code>further-info</code> вы найдёте четыре элемента <a><code>&lt;a&gt;</code></a> — каждый из которых ссылается на интересную страницу, связанную с Mozilla. Для завершения этой секции вам необходимо поместить элемент <a><code>&lt;img&gt;</code></a> внутрь каждого элемента <a><code>&lt;a&gt;</code></a> дополнив подходящими атрибутами <a><code>src</code></a>, <a><code>alt</code></a>, <a><code>srcset</code></a> и <a><code>sizes</code></a>.</p>\n<p>В каждом случае (кроме одного - какой из них по сути отзывчивый?) мы хотим, чтобы браузер использовал изображение шириной 120px , когда экран меньше или равен 480px, либо шириной 400px в других случаях.</p>\n<p>Убедитесь, что вы использовали изображения, соответствующие ссылкам.</p>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Для проверки правильности работы <code>srcset</code>/<code>sizes</code> , вам нужно загрузить ваш сайт на сервер (используйте <a>Github pages</a> - простое и бесплатное решение). Затем вы сможете проверить правильность их работы используя инструменты разработчика в браузере, как описано в <a>Responsive images: useful developer tools</a>.</p>\n</div></div></section><section aria-labelledby="искусственно_изменённая_красная_панда"><h3 id="искусственно_изменённая_красная_панда"><a>Искусственно изменённая красная панда</a></h3><div class="section-content"><p>Внутри элемента <a><code>&lt;div&gt;</code></a> с классом <code>red-panda</code>, мы хотим поместить элемент <a><code>&lt;picture&gt;</code></a> , который использует маленькое портретное изображение панды, если экран меньше или равен 600px, либо большое фоновое изображение.</p></div></section><section aria-labelledby="пример"><h2 id="пример"><a>Пример</a></h2><div class="section-content"><p>Следующие скриншоты демонстрируют, как сайт-визитка выглядит, при правильной разметке, на широких и узких экранах.</p>\n<p>\n  \n</p>\n<p>\n  \n</p></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Если вы выполняете это задание как часть организованного курса вам следует передать вашу работу учителю/наставнику для оценки. Если вы обучаетесь самостоятельно, то вы легко можете получить отметку <a class="external" target="_blank">в ветке форума этого упражнения</a>, либо в IRC канале <a>#mdn</a> на <a class="external" target="_blank">Mozilla IRC</a>. Сначала попробуйте выполнить упражнение - жульничеством ничего не добиться!</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'HTML таблицы',

		content:
			'<header><h1>HTML таблицы</h1></header><div class="section-content"><p>Структурирование табличных данных является в HTML самой обычной задачей, для этой цели есть множество элементов и атрибутов. С добавлением таблиц стилей (<a>CSS</a>) HTML с лёгкостью позволяет выводить в веб различные таблицы, например, расписание школьных уроков, график посещения бассейна, или статистические данные о ваших любимых динозаврах или футбольных командах. В данном разделе вы узнаете все, что вам потребуется для структурирования табличных данных с помощью HTML.</p></div><section aria-labelledby="необходимые_условия"><h2 id="необходимые_условия"><a>Необходимые условия</a></h2><div class="section-content"><p>Прежде чем приступить к данному разделу, вы должны ознакомиться с основами HTML — смотрите <a>Введение в HTML (Introduction to HTML</a>).</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Если компьютер/планшет/другое устройство, на котором вы работаете, не позволяет вам самостоятельно создавать файлы, то приводимые здесь примеры кода можно посмотреть в онлайновых программах для кодирования, например <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Thimble</a>.</p>\n</div></div></section><section aria-labelledby="руководства"><h2 id="руководства"><a>Руководства</a></h2><div class="section-content"><p>Данный раздел содержит следующие статьи:</p>\n<dl>\n  <dt id="основы_работы_с_таблицами_html"><a>Основы работы с таблицами HTML</a></dt>\n  <dd>\n    <p>Эта статья поможет вам начать работу с таблицами HTML, познакомив с самыми базовыми понятиями - строками и ячейками, заголовками, слиянием строк или столбцов, а также с тем, как объединять все ячейки столбца для оформительских целей.</p>\n  </dd>\n  <dt id="продвинутые_возможности_таблиц_html_и_доступность"><a>Продвинутые возможности таблиц HTML и доступность</a></dt>\n  <dd>\n    <p>Во второй статье данного раздела мы рассмотрим более продвинутые возможности таблиц HTML — заголовки/подписи, а также разбиение строк таблицы на три части: "голову" (head), "тело" (body) и нижний колонтитул (footer) — а также исследуем, как можно представлять таблицы для людей, имеющих проблемы со зрением.</p>\n  </dd>\n</dl></div></section><section aria-labelledby="проверка_знаний"><h2 id="проверка_знаний"><a>Проверка знаний</a></h2><div class="section-content"><dl>\n  <dt id="структурирование_данных_о_планетах"><a>Структурирование данных о планетах</a></dt>\n  <dd>\n    <p>Для проверки усвоенных знаний мы дадим вам ряд данных, касающихся планет солнечной системы, чтобы представить их в виде таблицы HTML.</p>\n  </dd>\n</dl></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'HTML таблицы основы',

		content:
			'<header><h1>HTML таблицы основы</h1></header><div class="section-content">\n<p>Этот раздел познакомит вас с таблицами HTML, представив самые базовые понятия - строки и ячейки, заголовки, слияние строк и столбцов, а также объединение всех ячеек в столбце в целях стилизации.</p>\n</div><section aria-labelledby="что_такое_таблица"><h2 id="что_такое_таблица"><a>Что такое таблица ?</a></h2><div class="section-content"><p>Таблица - это структурированный набор данных, состоящий из строк и столбцов (<strong>табличных данных</strong>). Таблицы позволяют быстро и легко посмотреть значения, показывающие некоторую взаимосвязь между различными типами данных, например - человек и его возраст, или расписание в плавательном бассейне.</p>\n<p>\n  \n</p>\n<p>\n  \n</p>\n<p>Люди постоянно используют таблицы, причём уже давно, как показывает документ по переписи в США, относящийся к 1800 году:</p>\n<p>\n  \n</p>\n<p>Так что не удивительно, что создатели HTML включили в него средства для структурирования и представления табличных данных в сети.</p></div></section><section aria-labelledby="как_работает_таблица"><h3 id="как_работает_таблица"><a>Как работает таблица?</a></h3><div class="section-content"><p>Смысл таблицы в том, что она жёсткая. Информацию легко интерпретировать, визуально сопоставляя заголовки строк и столбцов. Например, посмотрите на приведённую ниже таблицу и найдите единственное личное местоимение, используемое в третьем лице , с полом ♀, выступающее в качестве объекта в предложении. Ответ можно найти, сопоставив соответствующие заголовки столбцов и строк.</p>\n\n<p>Если правильно представить таблицу HTML, интерпретировать её данные смогут даже люди, имеющие проблемы со зрением.</p></div></section><section aria-labelledby="оформление_таблиц"><h3 id="оформление_таблиц"><a>Оформление таблиц</a></h3><div class="section-content"><p><a class="external" target="_blank">Исходный код HTML (HTML source code)</a> вышеприведённой таблице есть в GitHub; посмотрите его и <a class="external" target="_blank">живой пример (look at the live example)</a>! Вы заметите, что таблица там выглядит иначе — это потому, что на сайте MDN к этим данным была применена таблица стилей, а приведённый в GitHub пример информации о стиле не имеет.</p>\n<p>Не питайте ложных иллюзий - чтобы эффективно представлять таблицы в веб, необходимо придать им хорошую структуру в HTML и применить к ним таблицы стилей (<a>CSS</a>). В данном разделе мы сфокусируемся на HTML, чтобы узнать о том, что касается CSS, вам надо обратиться к статье <a>Стилизация таблиц</a>.</p>\n<p>В этом разделе мы не фокусируемся на CSS, но всё же дали простейшую таблицу стилей CSS, чтобы сделать таблицы более читабельными. Эту таблицу стилей можно найти <a class="external" target="_blank">здесь</a>, можно также использовать <a class="external" target="_blank">шаблон HTML</a>, применяющий эту стаблицу стилей — вместе они дадут вам хорошую основу для экспериментов с таблицами HTML.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Посмотрите также <a class="external" target="_blank">таблицу personal_pronouns с применённым к ней стилем</a>, чтобы получить представление о том, как она выглядит.</p>\n</div></div></section><section aria-labelledby="когда_не_надо_использовать_таблицы_html"><h3 id="когда_не_надо_использовать_таблицы_html"><a>Когда не надо использовать таблицы HTML?</a></h3><div class="section-content"><p>HTML-таблицы следует использовать для табличных данных — это то, для чего они предназначены. К сожалению, многие используют таблицы HTML для оформления веб-страниц, например, одна строка для заголовка, одна для содержимого, одна для сносок, и тому подобное. Подробнее об этом можно узнать в разделе <a>Вёрстка</a> на <a>Начальном обучающем модуле доступности</a>. Это происходило из-за плохой поддержки CSS в разных браузерах; в наше время такое встречается гораздо реже, но иногда всё же попадается.</p>\n<p>Короче говоря, использование таблиц в целях оформления вместо <a>методов CSS</a> является плохой идеей по следующим причинам :</p>\n<ol>\n  <li><strong>Таблицы, используемые для оформления, уменьшают доступность страниц для людей, имеющих проблемы со зрением</strong>: <a class="only-in-en-us" title="Currently only available in English (US)">Скринридеры (Screenreaders <small>(en-US)<small></small></small></a>), используемые ими, интерпретируют HTML-теги и читают содержимое пользователю. Поскольку таблицы не являются средством для представления структуры таблицы, и разметка получается сложнее, чем при использовании методов CSS, скринридеры вводят пользователей в заблуждение.</li>\n  <li><strong>Таблицы создают путаницу тегов</strong>: Как уже упоминалось, оформление страниц с помощью таблиц даёт более сложную структуру разметки, чем специально предназначенные для этого методы. Соответственно, такой код труднее писать, поддерживать и отлаживать.</li>\n  <li><strong>Таблицы не реагируют автоматически на тип устройства</strong>: У надлежащих контейнеров (например, <a><code>&lt;header&gt;</code></a>, <a><code>&lt;section&gt;</code></a>, <a><code>&lt;article&gt;</code></a>, или <a><code>&lt;div&gt;</code></a>) ширина по умолчанию равна 100% от их родительского элемента. У таблиц же размер по умолчанию подстраивается под их содержимое, так что чтобы они одинаково хорошо работали на разных типах устройств необходимо принимать дополнительные меры.</li>\n</ol></div></section><section aria-labelledby="упражнение_ваша_первая_таблица"><h2 id="упражнение_ваша_первая_таблица"><a>Упражнение: ваша первая таблица</a></h2><div class="section-content"><p>Итак, мы уже достаточно говорили о теории, теперь возьмём конкретный пример и построим таблицу.</p>\n<ol>\n  <li>Прежде всего, создайте локальную копию <a class="external" target="_blank">blank-template.html</a> и <a class="external" target="_blank">minimal-table.css</a> в новой папке на вашем компьютере.</li>\n  <li>Содержимое любой таблицы заключается между двумя тегами : <strong><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;table&gt;&lt;/table&gt;</code> <small>(en-US)<small></small></small></a></strong>. Добавьте их в тело HTML.</li>\n  <li>Самым маленьким контейнером в таблице является ячейка, она создаётся элементом <strong><a><code>&lt;td&gt;</code></a></strong> (\'td\' - сокращение от \'table data\'). Введите внутри тегов table следующее:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">Hi, I\'m your first cell.\n</pre></div>\n  </li>\n  <li>Чтобы получить строку из четырёх ячеек, необходимо скопировать эти теги три раза. Обновите содержимое таблицы так, чтобы она выглядела следующим образом:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">Hi, I\'m your first cell.\nI\'m your second cell.\nI\'m your third cell.\nI\'m your fourth cell.\n</pre></div>\n  </li>\n</ol>\n<p>Как видите, ячейки не располагаются одна под другой, на самом деле они автоматически выравниваются по отношению к другим ячейкам той же строки. Каждый элемент <code>&lt;td&gt;</code> создаёт отдельную ячейку, а все вместе они создают первую строку. Каждая добавленная ячейка удлиняет эту строку.</p>\n<p>Чтобы эта строка перестала расти, а новые ячейки перешли на вторую строку, необходимо использовать элемент <strong><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;tr&gt;</code> <small>(en-US)<small></small></small></a></strong> (\'tr\' - сокращение от \'table row\'). Попробуем, как это получится.</p>\n<ol>\n  <li>Поместите четыре уже созданных ячейки между тегами <code>&lt;tr&gt;</code> как здесь показано:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  Hi, I\'m your first cell.\n  I\'m your second cell.\n  I\'m your third cell.\n  I\'m your fourth cell.\n\n</pre></div>\n  </li>\n  <li>Теперь, когда одна строка уже есть, добавим ещё — каждую строку надо вложить в дополнительный элемент <code>&lt;tr&gt;</code>, а каждая ячейка должна быть внутри <code>элемента &lt;td&gt;</code>.</li>\n</ol>\n<p>В результате получится таблица, которая будет выглядеть примерно так:</p>\n\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Этот пример можно также найти на GitHub под названием <a class="external" target="_blank">simple-table.html</a> (<a class="external" target="_blank">see it live also</a>).</p>\n</div></div></section><section aria-labelledby="добавление_заголовков_с_помощью_элементов_th"><h2 id="добавление_заголовков_с_помощью_элементов_th"><a>Добавление заголовков с помощью элементов &lt;th&gt;</a></h2><div class="section-content"><p>Теперь обратимся к табличным заголовкам — особым ячейкам, которые идут вначале строки или столбца и определяют тип данных, которые содержит данная строка или столбец (как "Person" и "Age" в первом примере данной статьи). Чтобы показать, для чего они нужны, возьмём следующий пример. Сначала исходный код:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <tbody><tr>\n    <td>&nbsp;</td>\n    <td>Knocky</td>\n    <td>Flor</td>\n    <td>Ella</td>\n    <td>Juan</td>\n  </tr>\n  <tr>\n    <td>Breed</td>\n    <td>Jack Russell</td>\n    <td>Poodle</td>\n    <td>Streetdog</td>\n    <td>Cocker Spaniel</td>\n  </tr>\n  <tr>\n    <td>Age</td>\n    <td>16</td>\n    <td>9</td>\n    <td>10</td>\n    <td>5</td>\n  </tr>\n  <tr>\n    <td>Owner</td>\n    <td>Mother-in-law</td>\n    <td>Me</td>\n    <td>Me</td>\n    <td>Sister-in-law</td>\n  </tr>\n  <tr>\n    <td>Eating Habits</td>\n    <td>Eats everyone\'s leftovers</td>\n    <td>Nibbles at food</td>\n    <td>Hearty eater</td>\n    <td>Will eat till he explodes</td>\n  </tr>\n</tbody></table>\n</pre></div>\n<p>Теперь как выглядит таблица:</p>\n\n<p>Проблема в том, что, хотя вы и можете представить, о чем идёт речь, ссылаться на эти данные не так легко, как хотелось бы. Лучше, чтобы строка и столбец с заголовками как-то выделялись.</p></div></section><section aria-labelledby="упражнение_заголовки"><h3 id="упражнение_заголовки"><a>Упражнение: заголовки</a></h3><div class="section-content"><p>Попробуем улучшить эту таблицу.</p>\n<ol>\n  <li>Сначала создайте локальную копию <a class="external" target="_blank">dogs-table.html</a> и <a class="external" target="_blank">minimal-table.css</a> в новой папке на вашем компьютере. HTML содержит пример Dogs, который вы уже видели выше.</li>\n  <li>Чтобы опознавать заголовки таблицы в качестве заголовков, визуально и семантически, можно использовать элемент <strong><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;th&gt;</code> <small>(en-US)<small></small></small></a></strong> (\'th\' сокращение от \'table header\'). Он работает в точности как <code>&lt;td&gt;</code>, за исключением того, что обозначает заголовок, а не обычную ячейку. Замените в своём HTML все элементы <code>&lt;td&gt;</code>, содержащие заголовки, на элементы <code>&lt;th&gt;</code>.</li>\n  <li>Сохраните HTML и загрузите его в браузер, и вы увидите, что заголовки теперь выглядят как заголовки.</li>\n</ol>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> Законченный пример можно найти на <a class="external" target="_blank">dogs-table-fixed.html</a> в GitHub (<a class="external" target="_blank">посмотрите живой пример</a>).</p>\n</div></div></section><section aria-labelledby="для_чего_нужны_заголовки"><h3 id="для_чего_нужны_заголовки"><a>Для чего нужны заголовки?</a></h3><div class="section-content"><p>Мы уже частично ответили на этот вопрос — когда заголовки выделяются, легче искать данные и таблица выглядит лучше.</p>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> По умолчанию к заголовкам таблицы применяется определённый стиль — они выделены жирным шрифтом и выровнены по центру, даже если вы не задавали для них стиль специально.</p>\n</div>\n<p>Заголовки дают дополнительное преимущество — вместе с атрибутом <code>scope</code> (который мы будем изучать в следующей статье) они помогают улучшить связь каждого заголовка со всеми данными строки или столбца одновременно, что довольно полезно</p></div></section><section aria-labelledby="слияние_нескольких_строк_или_столбцов"><h2 id="слияние_нескольких_строк_или_столбцов"><a>Слияние нескольких строк или столбцов</a></h2><div class="section-content"><p>Иногда нам нужно, чтобы ячейки распространялись на несколько строк или столбцов. Возьмём простой пример, в котором приведены имена животных. Иногда бывает нужно вывести имена людей рядом с именами животных. А иногда это не требуется, и тогда мы хотим, чтобы имя животного занимало всю ширину.</p>\n<p>Исходная разметка выглядит так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <tbody><tr>\n    <th>Animals</th>\n  </tr>\n  <tr>\n    <th>Hippopotamus</th>\n  </tr>\n  <tr>\n    <th>Horse</th>\n    <td>Mare</td>\n  </tr>\n  <tr>\n    <td>Stallion</td>\n  </tr>\n  <tr>\n    <th>Crocodile</th>\n  </tr>\n  <tr>\n    <th>Chicken</th>\n    <td>Cock</td>\n  </tr>\n  <tr>\n    <td>Rooster</td>\n  </tr>\n</tbody></table>\n</pre></div>\n<p>Но результат не такой, как хотелось бы:</p>\n\n<p>Нужно, чтобы "Animals", "Hippopotamus" и "Crocodile" распространялись на два столбца, а "Horse" и "Chicken" - на две строки. К счастью, табличные заголовки и ячейки имеют атрибуты <code>colspan</code> <code>и rowspan</code>, которые позволяют это сделать. Оба принимают безразмерное числовое значение, которое равно количеству строк или столбцов, на которые должны распространяться ячейки. Например, <code>colspan="2"</code> распространяет ячейку на два столбца.</p>\n<p>Воспользуемся <code>colspan</code> и <code>rowspan</code> чтобы улучшить таблицу.</p>\n<ol>\n  <li>Сначала создайте локальную копию <a class="external" target="_blank">animals-table.html</a> и <a class="external" target="_blank">minimal-table.css</a> в новой папке на вашем компьютере. Код HTML содержит пример с животными, который вы уже видели выше.</li>\n  <li>Затем используйте атрибут <code>colspan</code> чтобы распространить "Animals", "Hippopotamus" и "Crocodile" на два столбца.</li>\n  <li>Наконец, используйте атрибут <code>rowspan</code> чтобы распространить "Horse" и "Chicken" на две строки.</li>\n  <li>Сохраните код и откройте его в браузере, чтобы увидеть улучшения.</li>\n</ol>\n<div class="notecard note" id="sect5">\n  <p><strong>Примечание:</strong> Законченный пример можно посмотреть в <a class="external" target="_blank">animals-table-fixed.html</a> на GitHub (<a class="external" target="_blank">живой пример</a>).</p>\n</div></div></section><section aria-labelledby="стилизация_столбцов"><h2 id="стилизация_столбцов"><a>Стилизация столбцов</a></h2><div class="section-content"><p>И последняя возможность, о которой рассказывается в данной статье. HTML позволяет указать, какой стиль нужно применять к целому столбцу данных сразу — для этого применяют элементы <strong><a><code>&lt;col&gt;</code></a></strong> и <strong><a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;colgroup&gt;</code> <small>(en-US)<small></small></small></a></strong>. Их ввели, поскольку задавать стиль для каждой ячейки в отдельности или использовать сложный селектор вроде <a class="only-in-en-us" title="Currently only available in English (US)"><code>:nth-child()</code> <small>(en-US)</small></a> было бы слишком утомительно.</p>\n<p>Возьмём простой пример:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <tbody><tr>\n    <th>Data 1</th>\n    <th style="background-color: yellow">Data 2</th>\n  </tr>\n  <tr>\n    <td>Calcutta</td>\n    <td style="background-color: yellow">Orange</td>\n  </tr>\n  <tr>\n    <td>Robots</td>\n    <td style="background-color: yellow">Jazz</td>\n  </tr>\n</tbody></table>\n</pre></div>\n<p>Что даёт нам:</p>\n\n<p>Он не идеален, поскольку нам пришлось повторить информацию о стиле для всех трёх ячеек в столбце (в реальном проекте, возможно, придётся вводить <code>class</code> на всех трёх и вводит правило в таблице стилей). Вместо этого, мы можем задать информацию один раз, в элементе <code>&lt;col&gt;</code>. <code>Элемент &lt;col&gt;</code> задаётся в контейнере <code>&lt;colgroup&gt;</code> сразу же за открывающим тегом <code>&lt;table&gt;</code>. Эффект, который мы видели выше, можно задать так:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <colgroup>\n    <col>\n    <col style="background-color: yellow">\n  </colgroup>\n  <tbody><tr>\n    <th>Data 1</th>\n    <th>Data 2</th>\n  </tr>\n  <tr>\n    <td>Calcutta</td>\n    <td>Orange</td>\n  </tr>\n  <tr>\n    <td>Robots</td>\n    <td>Jazz</td>\n  </tr>\n</tbody></table>\n</pre></div>\n<p>Мы определяем два "стилизующих столбца". Мы не применяем стиль к первому столбцу, но пустой элемент <code>&lt;col&gt;</code> ввести необходимо — иначе стиль будет применён только к первому столбцу.</p>\n<p>Если бы мы хотели применить информацию о стиле к обоим столбцам, мы могли бы просто ввести один элемент <code>&lt;col&gt;</code> с атрибутом span, таким образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  \n\n</pre></div>\n<p>Подобно <code>colspan</code> и <code>rowspan</code>, <code>span</code> принимает безразмерное числовое значение, указывающее, к какому количеству столбцов нужно применить данный стиль.</p></div></section><section aria-labelledby="упражнение_colgroup_и_col"><h3 id="упражнение_colgroup_и_col"><a>Упражнение: colgroup и col</a></h3><div class="section-content"><p>Теперь попробуйте сами.</p>\n<p>Ниже приведена таблица уроков по языкам. В пятницу (Friday) новый класс целый день изучает голландский (Dutch), кроме того, во вторник (Tuesday) и четверг (Thursdays) есть занятия по немецкому (German). Учительница хочет выделить столбцы, соответствующие дням, когда она преподаёт.</p>\n\n<p>Заново создайте таблицу, проделав указанные ниже действия.</p>\n<ol>\n  <li>Сначала создайте локальную копию файла <a class="external" target="_blank">timetable.html</a> в новой папке на вашем компьютере. Код HTML содержит таблицу, которую вы уже видели выше, но без информации о стиле.</li>\n  <li>Добавьте элемент <code>&lt;colgroup&gt;</code> вверху таблицы, сразу же под тегом <code>&lt;table&gt;</code>, куда вы сможете вставлять элементы <code>&lt;col&gt;</code>.</li>\n  <li>Первые два столбца надо оставить без стиля..</li>\n  <li>Добавьте цвет фона для третьего столбца. Значением атрибута <code>style</code> будет <code>background-color:#97DB9A;</code></li>\n  <li>Задайте ширину для четвёртого столбца. <code>Значением атрибута style</code> будет <code>width: 42px;</code></li>\n  <li>Добавьте цвет фона для пятого столбца. Значением атрибута <code>style</code> будет <code>background-color: #97DB9A;</code></li>\n  <li>Добавьте другой цвет фона и границу для шестого столбца, чтобы показать, что это особый день и она ведёт новый класс. Значениями атрибута <code>style</code> будут: <code>background-color:#DCC48E; border:4px solid #C1437A;</code></li>\n  <li>Последние два дня выходные; значением атрибута style <code>будет width: 42px;</code></li>\n</ol>\n<p>Посмотрите, что у вас получилось. Если застрянете, или захотите себя проверить, можете посмотреть нашу версию в <a class="external" target="_blank">timetable-fixed.html</a> (<a class="external" target="_blank">посмотрите живой пример</a>).</p></div></section><section aria-labelledby="итог"><h2 id="итог"><a>Итог</a></h2><div class="section-content"><p>Здесь приведены практически все базовые сведения о таблицах HTML. В следующей статье вы получите более продвинутые сведения на эту тему.</p></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'HTML таблицы продвинутые возможности и доступность',

		content:
			'<header><h1>HTML таблицы продвинутые возможности и доступность</h1></header><div class="section-content">\n<p>Во второй статье этого модуля мы рассматриваем ещё несколько продвинутых возможностей в HTML таблицах — такие как заголовок/описание и группировка строк внутри head, body и footer секциях таблицы, а также доступность таблиц для пользователей с ограниченными возможностями.</p>\n</div><section aria-labelledby="добавление_заголовка_к_таблице_с_помощью_caption"><h2 id="добавление_заголовка_к_таблице_с_помощью_caption"><a>Добавление заголовка к таблице с помощью &lt;caption&gt;</a></h2><div class="section-content"><p>Вы можете добавить заголовок для таблицы установив его в элементе <a><code>&lt;caption&gt;</code></a> и этот элемент необходимо поместить внутрь элемента <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;table&gt;</code> <small>(en-US)</small></a>. Причём вам нужно поместить его сразу после открытия тега <code>&lt;table&gt;</code>.</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table>\n  <caption>\n    Dinosaurs in the Jurassic period\n  </caption></table>\n\n  ...\n\n</pre></div>\n<p>Как можно понять из короткого примера выше, заголовок отражает в себе описание контента таблицы. Это полезно для всех читателей просматривающих страницу и желающих получить краткое представление от том полезна ли для них таблица, что особенно важно для слепых пользователей. Вместо того чтобы читать содержимое множества ячеек чтобы понять о чем таблица, он или она могут полагаться на заголовок и принимать решение читать ли таблицу более подробно.</p>\n<p>Заголовок помещают сразу после тега <code>&lt;table&gt;</code>.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> Атрибут <a class="only-in-en-us" title="Currently only available in English (US)"><code>summary</code> <small>(en-US)<small></small></small></a> также может быть использован в <code>&lt;table&gt;</code> элементе предоставляя описание — это также читается скринридерами. Однако мы рекомендуем вместо этого использовать <code>&lt;caption&gt;</code> элемент, так как <code>summary</code> <a class="page-not-created" title="Документация об этом ещё не написана. Пожалуйста, поспособствуйте её написанию!">deprecated</a> в HTML5 спецификации и не может быть прочитан зрячими пользователями (он не отображается на странице).</p>\n</div></div></section><section aria-labelledby="упражнение_добавление_заголовка"><h3 id="упражнение_добавление_заголовка"><a>Упражнение: Добавление заголовка</a></h3><div class="section-content"><p>Давайте попробуем это, вернёмся к примеру который мы ранее встретили в прошлой статье.</p>\n<ol>\n  <li>Откройте расписание занятий школьного учителя по языку в конце статьи <a>HTML таблицы основы</a>, или сделайте копию нашего <a class="external" target="_blank">timetable-fixed.html</a> файла.</li>\n  <li>Добавьте подходящий заголовок к таблице.</li>\n  <li>Сохраните свой код и откройте его в браузере, чтобы посмотреть как это выглядит.</li>\n</ol>\n<div class="notecard note" id="sect2">\n  <p><strong>Примечание:</strong> Этот пример можно найти на GitHub по ссылке <a class="external" target="_blank">timetable-caption.html</a> (<a class="external" target="_blank">живой пример</a>).</p>\n</div></div></section><section aria-labelledby="добавление_структуры_с_помощью_thead_tfoot_и_tbody"><h2 id="добавление_структуры_с_помощью_thead_tfoot_и_tbody"><a>Добавление структуры с помощью &lt;thead&gt;, &lt;tfoot&gt; и &lt;tbody&gt;</a></h2><div class="section-content"><p>Когда таблицы становятся более сложными по структуре полезно дать им более структурированное определение. Отличный способ сделать это используя <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;thead&gt;</code> <small>(en-US)</small></a>, <a><code>&lt;tfoot&gt;</code></a> и <a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;tbody&gt;</code> <small>(en-US)</small></a>, которые позволяют вам разметить header, footer и body секции таблицы.</p>\n<p>Эти элементы не создают дополнительной доступности для пользователей со скринридерами и не приводят к какому-то визуальному улучшению при их использовании. Зато они очень полезны при стилизации и разметке, как точки для добавления CSS к вашей таблице. Вот несколько интересных примеров, в случае длинной таблицы вы можете сделать header и footer таблицы повторяемый на каждой печатной странице, или вы можете сделать body таблицы отображаемое на одной странице и иметь доступ ко всему содержимому контенту прокручивая вверх и вниз.</p>\n<p>Использование:</p>\n<ul>\n  <li>Элементом <code>&lt;thead&gt;</code> нужно обернуть часть таблицы которая относится к заголовку — обычно это первая строка содержащая заголовки колонок, но это не обязательно всегда такой случай. Если вы используете <a><code>&lt;col&gt;</code></a>/<a class="only-in-en-us" title="Currently only available in English (US)"><code>&lt;colgroup&gt;</code> <small>(en-US)</small></a> элемент, тогда заголовок должен находиться ниже его.</li>\n  <li>Элементом <code>&lt;tfoot&gt;</code> нужно обернуть ту часть, которая относится к footer таблицы — например, это может быть последняя строка в которой отражаются суммы по столбцам таблицы. Вы можете включить сюда footer таблицы, как и следовало ожидать, или чуть ниже заголовка таблицы (браузер всё равно отобразит его внизу таблицы).</li>\n  <li>Элементом <code>&lt;tbody&gt;</code> необходимо обернуть остальную часть содержимого таблицы которая не находится в header или footer таблицы. Этот блок располагают ниже заголовка таблицы или иногда footer таблицы, зависит от того какую структуру вы решите использовать (читать выше по тексту).</li>\n</ul>\n<div class="notecard note" id="sect3">\n  <p><strong>Примечание:</strong> <code>&lt;tbody&gt;</code> всегда включён в каждой таблице, неявно если не укажете его в коде. Проверьте это, открыв один из предыдущих примеров в котором не используется <code>&lt;tbody&gt;</code> и посмотрите HTML код в <a>browser developer tools</a> — вы увидите, что браузер добавил этот тег самостоятельно. Вы могли бы задаться вопросом почему мы должны волноваться о его включении, но вы должны, потому что это даёт больше контроля над структурой таблицы и стилем.</p>\n</div></div></section><section aria-labelledby="упражнение_добавление_структуры_таблицы"><h3 id="упражнение_добавление_структуры_таблицы"><a>Упражнение: Добавление структуры таблицы</a></h3><div class="section-content"><p>Давайте используем эти новые элементы.</p>\n<ol>\n  <li>В первую очередь, сделайте копию <a class="external" target="_blank">spending-record.html</a> и <a class="external" target="_blank">minimal-table.css</a> в новой папке.</li>\n  <li>Попробуйте открыть это в браузере — вы увидите, что все выглядит классно, но могло бы быть лучше. Строка "SUM" которая содержит потраченные суммы кажется находится не в том месте и некоторые детали отсутствуют в коде.</li>\n  <li>Поместите очевидную строку заголовка внутрь <code>&lt;thead&gt;</code> элемента, строку "SUM" внутрь <code>&lt;tfoot&gt;</code> элемента и оставшийся контент внутрь <code>&lt;tbody&gt;</code> элемента.</li>\n  <li>Сохраните, перезагрузите и вы увидите, что добавление элемента <code>&lt;tfoot&gt;</code> привело к тому, что строка "SUM" опустилась к нижней части таблицы.</li>\n  <li>Далее, добавьте атрибут <a><code>colspan</code></a>, чтобы ячейка "SUM" занимала первые четыре столбца, таким образом числовое значение "Cost" появится в последнем столбце.</li>\n  <li>Давайте добавим несколько простых дополнительных стилей к таблице, чтобы дать вам представление насколько эти элементы полезны при использовании CSS. Внутри в <code>&lt;head&gt;</code> вашего HTML документа вы увидите пустой элемент <a><code>&lt;style&gt;</code></a>. Внутри этого элемента добавьте следующие строки CSS кода:\n    <div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="css">tbody {\n  font-size: 90%;\n  font-style: italic;\n}\n\ntfoot {\n  font-weight: bold;\n}\n</pre></div>\n  </li>\n  <li>Сохраните, обновите и вы увидите результат. Если <code>&lt;tbody&gt;</code> и <code>&lt;tfoot&gt;</code> элементы не были установлены, то вам придётся писать много сложных селекторов/правил для применения одного и того же стиля.</li>\n</ol>\n<div class="notecard note" id="sect4">\n  <p><strong>Примечание:</strong> Мы не ожидаем что сейчас вы полностью поймёте CSS. Вы узнаете больше когда пройдёте наши CSS курсы (например, <a>Вступление в CSS</a> это хорошее место для начала; у нас также есть статья конкретно о <a>стилизации таблиц</a>).</p>\n</div>\n<p>Ваша готовая таблица должна выглядеть примерно так:</p>\n<div class="code-example"><pre compile="false" disable="true" language="markup">\n\n  \n    <meta charset="utf-8">\n    <title>My spending record</title>\n    <style>\n      html {\n        font-family: sans-serif;\n      }\n\n      table {\n        border-collapse: collapse;\n        border: 2px solid rgb(200, 200, 200);\n        letter-spacing: 1px;\n        font-size: 0.8rem;\n      }\n\n      td,\n      th {\n        border: 1px solid rgb(190, 190, 190);\n        padding: 10px 20px;\n      }\n\n      th {\n        background-color: rgb(235, 235, 235);\n      }\n\n      td {\n        text-align: center;\n      }\n\n      tr:nth-child(even) td {\n        background-color: rgb(250, 250, 250);\n      }\n\n      tr:nth-child(odd) td {\n        background-color: rgb(245, 245, 245);\n      }\n\n      caption {\n        padding: 10px;\n      }\n\n      tbody {\n        font-size: 90%;\n        font-style: italic;\n      }\n\n      tfoot {\n        font-weight: bold;\n      }\n    </style>\n  \n  \n    <table>\n      <caption>\n        How I chose to spend my money\n      </caption>\n      <thead>\n        <tr>\n          <th>Purchase</th>\n          <th>Location</th>\n          <th>Date</th>\n          <th>Evaluation</th>\n          <th>Cost (€)</th>\n        </tr>\n      </thead>\n      <tfoot>\n        <tr>\n          <td colspan="4">SUM</td>\n          <td>118</td>\n        </tr>\n      </tfoot>\n      <tbody>\n        <tr>\n          <td>Haircut</td>\n          <td>Hairdresser</td>\n          <td>12/09</td>\n          <td>Great idea</td>\n          <td>30</td>\n        </tr>\n        <tr>\n          <td>Lasagna</td>\n          <td>Restaurant</td>\n          <td>12/09</td>\n          <td>Regrets</td>\n          <td>18</td>\n        </tr>\n        <tr>\n          <td>Shoes</td>\n          <td>Shoeshop</td>\n          <td>13/09</td>\n          <td>Big regrets</td>\n          <td>65</td>\n        </tr>\n        <tr>\n          <td>Toothpaste</td>\n          <td>Supermarket</td>\n          <td>13/09</td>\n          <td>Good</td>\n          <td>5</td>\n        </tr>\n      </tbody>\n    </table>\n  \n\n</pre></div><div class="code-example" id="sect5"><div class="example-header" id="sect6"></div></div>\n<div class="notecard note" id="sect7">\n  <p><strong>Примечание:</strong> Этот пример можно также найти на GitHub по ссылке <a class="external" target="_blank">spending-record-finished.html</a> (<a class="external" target="_blank">живой пример</a>).</p>\n</div></div></section><section aria-labelledby="вложенные_таблицы"><h2 id="вложенные_таблицы"><a>Вложенные таблицы</a></h2><div class="section-content"><p>В одну таблицу вкладывать другую таблицу возможно, если вы используете полную структуру включая элемент <code>&lt;table&gt;</code>. Это как правило не рекомендуется, так как делает разметку более запутанной и менее доступной для пользователей скринридеров, так в большинстве случаев вы можете просто вставить дополнительные ячейки/строки/столбцы в существующую таблицу. Однако, иногда это необходимо, например, если вы хотите легко импортировать контент из других источников.</p>\n<p>Разметка простой вложенной таблицы:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup"><table id="table1">\n  <tbody><tr>\n    <th>title1</th>\n    <th>title2</th>\n    <th>title3</th>\n  </tr>\n  <tr>\n    <td id="nested">\n      <table id="table2">\n        <tbody><tr>\n          <td>cell1</td>\n          <td>cell2</td>\n          <td>cell3</td>\n        </tr>\n      </tbody></table>\n    </td>\n    <td>cell2</td>\n    <td>cell3</td>\n  </tr>\n  <tr>\n    <td>cell4</td>\n    <td>cell5</td>\n    <td>cell6</td>\n  </tr>\n</tbody></table>\n</pre></div></div></section><section aria-labelledby="таблицы_для_пользователей_с_ограниченными_возможностями"><h2 id="таблицы_для_пользователей_с_ограниченными_возможностями"><a>Таблицы для пользователей с ограниченными возможностями</a></h2><div class="section-content"><p>Давайте кратко опишем как мы используем данные таблицы. Таблицы могут быть удобным инструментом, который даёт нам быстрый доступ к данным и позволяет искать разные значения. Например, быстрого взгляда на таблицу ниже достаточно, чтобы найти сколько колец было продано в Амстердаме в августе 2016. Чтобы понять эту информацию, мы проводим визуальные ассоциации между данными в этой таблице и её заголовками колонок и/или строк.</p>\n\n<p>Но что если вы не можете провести эти визуальные ассоциации? Как тогда вы сможете прочитать таблицу выше? Люди с ослабленным зрением часто используют скринридер, который читает им информацию с веб-страницы. Это не проблема когда вы читаете простой текст, но интерпретация таблицы может быть сложной проблемой для слепых людей. Тем не менее, вместе с правильной разметкой мы можем заменить визуальные ассоциации программными.</p>\n<p>В этой части статьи приводятся дополнительные способы которые делают таблицы более доступными.</p></div></section><section aria-labelledby="использование_заголовков_столбцов_и_строк"><h3 id="использование_заголовков_столбцов_и_строк"><a>Использование заголовков столбцов и строк</a></h3><div class="section-content"><p>Скринридеры будут определять все заголовки и использовать их создавая программные ассоциации между этими заголовками и ячейками к которым они относятся. Сочетание заголовков столбцов и строк будет определять и интерпретировать данные в каждой ячейке так, что пользователи скринридеров могут интерпретировать таблицу также как это делают зрячие пользователи.</p>\n<p>Мы уже разобрали заголовки в предыдущей статье, смотри по ссылке <a>Добавление заголовков с помощью элемента &lt;th&gt;</a>.</p></div></section><section aria-labelledby="атрибут_scope"><h3 id="атрибут_scope"><a>Атрибут scope</a></h3><div class="section-content"><p>Новая тема в этой статье это атрибут <a class="only-in-en-us" title="Currently only available in English (US)"><code>scope</code> <small>(en-US)<small></small></small></a>, который может быть добавлен к элементу <code>&lt;th&gt;</code> он сообщает скринридеру какие ячейки точно являются заголовками — например, заголовок строки в которой он находится или столбца. Возвращаясь назад к нашему примеру с записями расходов, вы могли однозначно определить заголовки столбцов как здесь:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  \n    Purchase\n    Location\n    Date\n    Evaluation\n    Cost (€)\n  \n\n</pre></div>\n<p>И у каждой строки может быть определён заголовок, как здесь (если мы добавили заголовки строк и заголовки столбцов):</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  Haircut\n  Hairdresser\n  12/09\n  Great idea\n  30\n\n</pre></div>\n<p>Скринридер распознает разметку структурированную таким образом, что позволяют пользователям прочитать весь столбец или строку целиком.</p>\n<p>Атрибут <code>scope</code> имеет ещё два возможных значения — <code>colgroup</code> и <code>rowgroup</code>. Они используются для заголовков, которые располагаются вверху ваших столбцов или строк. Если вы посмотрите на таблицу "Items sold..." в начале этого раздела статьи, вы увидите что ячейка с "Clothes" находится над ячейками "Trousers", "Skirts" и "Dresses". Все эти ячейки должны быть помечены как заголовки (<code>&lt;th&gt;</code>), но "Clothes" заголовок который находится сверху и определяет остальные три подзаголовка. Поэтому "Clothes" должна получить атрибут <code>scope="colgroup"</code>, тогда как другие получат атрибут <code>scope="col"</code>.</p></div></section><section aria-labelledby="атрибуты_id_и_headers"><h3 id="атрибуты_id_и_headers"><a>Атрибуты id и headers</a></h3><div class="section-content"><p>Альтернатива атрибута <code>scope</code> это использование атрибутов <a><code>id</code></a> и <a><code>headers</code></a> задавая ассоциации между заголовками и ячейками. Этот способ выглядит следующим образом:</p>\n<ol>\n  <li>Вы устанавливаете уникальный <code>id</code> для каждого <code>&lt;th&gt;</code> элемента.</li>\n  <li>Вы устанавливаете атрибут <code>headers</code> для каждого <code>&lt;td&gt;</code> элемента. Каждый <code>headers</code> атрибут должен содержать список всех <code>id</code>, разделённый пробелами, ко всем <code>&lt;th&gt;</code> элементам которые действуют как заголовок для этой ячейки.</li>\n</ol>\n<p>Это обеспечивает явное определение позиции для каждой ячейки вашей HTML таблицы, определяет заголовки столбцов и строк таблицы. Для того чтобы это работало реально хорошо таблице нужно определить и заголовки столбцов, и заголовки строк.</p>\n<p>Вернёмся к нашему примеру с расчётом затрат, его можно переписать следующим образом:</p>\n<div class="code-example"><div class="example-header"></div><pre compile="false" disable="true" language="markup">\n  \n    Purchase\n    Location\n    Date\n    Evaluation\n    Cost (€)\n  \n\n\n  \n    Haircut\n    Hairdresser\n    12/09\n    Great idea\n    30\n  \n\n  ...\n\n</pre></div>\n<div class="notecard note" id="sect8">\n  <p><strong>Примечание:</strong> Этот метод создания очень точного определения ассоциаций между заголовками и данными в ячейках, но использует <strong>гораздо</strong> больше разметки и оставляет обширное пространство для ошибок. Атрибута <code>scope</code> обычно достаточно для большинства таблиц.</p>\n</div></div></section><section aria-labelledby="упражнение_играем_со_scope_и_headers"><h3 id="упражнение_играем_со_scope_и_headers"><a>Упражнение: играем со scope и headers</a></h3><div class="section-content"><ol>\n  <li>Для заключительного упражнения мы, вначале создадим копию <a class="external" target="_blank">items-sold.html</a> и <a class="external" target="_blank">minimal-table.css</a> в новой папке.</li>\n  <li>Теперь попробуем добавить соответствующий атрибут <code>scope</code>, который наиболее соответствует этой таблице.</li>\n  <li>И наконец попробуем сделать другую копию изначальных файлов, на этот раз делая таблицу более доступной используя атрибуты <code>id</code> и <code>headers</code>.</li>\n</ol>\n<div class="notecard note" id="sect9">\n  <p><strong>Примечание:</strong> вы можете проверить как работает последние примеры здесь <a class="external" target="_blank">items-sold-scope.html</a> (<a class="external" target="_blank">also see this live</a>) и <a class="external" target="_blank">items-sold-headers.html</a> (<a class="external" target="_blank">see this live too</a>).</p>\n</div></div></section><section aria-labelledby="заключение"><h2 id="заключение"><a>Заключение</a></h2><div class="section-content"><p>Есть ещё некоторые вещи которые можно узнать о HTML таблицах, но мы действительно дали всё что нужно на настоящий момент. Дальше вы возможно захотите больше узнать о стилизации HTML таблиц, посмотрите статью <a>"Стилизация таблиц"</a>.</p></div></section><section aria-labelledby="в_этом_блоке"><h2 id="в_этом_блоке"><a>В этом блоке</a></h2><div class="section-content"><ul>\n  <li><a>HTML таблицы основы</a></li>\n  <li><a aria-current="page">HTML таблицы продвинутые возможности и доступность</a></li>\n  <li><a>Структурирование данных о планетах</a></li>\n</ul></div></section>',
		works: [],
	},
	{
		book: 'HTML',
		title: 'Аттестация- Структурирование данных о планетах',

		content:
			'<header><h1>Аттестация: Структурирование данных о планетах</h1></header><div class="section-content">\n<p>В нашей аттестации, мы предоставим вам некоторые данные о планетах солнечной системы, и убедим вас структурировать их в HTML таблицу.</p>\n</div><section aria-labelledby="отправная_точка"><h2 id="отправная_точка"><a>Отправная точка</a></h2><div class="section-content"><p>Для того, чтобы начать аттестацию, скопируйте <a class="external" target="_blank">blank-template.html</a>, <a class="external" target="_blank">minimal-table.css</a>, и <a class="external" target="_blank">planets-data.txt</a> в новую директорию на вашем компьютере.</p>\n<div class="notecard note" id="sect1">\n  <p><strong>Примечание:</strong> В качестве альтернативы, вы можете использовать такие сайты, как <a class="external" target="_blank">JSBin</a> или <a class="external" target="_blank">Glitch</a>, чтобы пройти аттестацию. Вы можете вставлять HTML, CSS и JavaScript в один из этих онлайн редакторов. Если используемый вами онлайн редактор не имеет отдельных JavaScript/CSS панелей, не стесняйтесь вставлять <code>&lt;script&gt;</code>/<code>&lt;style&gt;</code> элементы в HTML страницу.</p>\n</div></div></section><section aria-labelledby="краткое_описание_проекта"><h2 id="краткое_описание_проекта"><a>Краткое описание проекта</a></h2><div class="section-content"><p>Вы работаете в школе. В настоящее время ваши ученики изучают планеты солнечной системы, и вы хотите обеспечить их наглядным пособием для поиска фактов и данных о планетах. Таблица HTML была бы идеальным вариантом — вам необходимо взять необработанные данные, которые у вас есть, и превратить их в таблицу, следуя нижеприведённым инструкциям.</p>\n<p>Готовая таблица должна выглядеть так:</p>\n<p>\n  \n</p>\n<p>Вы можете также <a class="external" target="_blank">посмотреть на готовый вариант здесь</a> (не смотрите на исходный код — не жульничайте!).</p></div></section><section aria-labelledby="шаги_для_завершения"><h2 id="шаги_для_завершения"><a>Шаги для завершения</a></h2><div class="section-content"><p>Следующие шаги описывают что вам нужно сделать, чтобы завершить пример таблицы. Все данные, что вам нужны находятся в файле <code>planets-data.txt</code>. Если у вас возникли проблемы с визуализацией данных, посмотрите приведённый выше пример или попробуйте нарисовать диаграмму.</p>\n<ol>\n  <li>Откройте вашу копию <code>blank-template.html</code> , и запустите таблицу, предоставив ей внешний контейнер, заголовок и тело таблицы. Вам не нужен нижний колонтитул (footer) для этого примера.</li>\n  <li>Добавьте предоставленную подпись к вашей таблице ("Caption" в конце <code>planets-data.txt</code>).</li>\n  <li>Добавьте строку в заголовок таблицы, содержащую все заголовки столбцов.</li>\n  <li>Создайте все строки содержимого внутри тела таблицы, помня, что все заголовки строк должны быть <em>семантически</em>.</li>\n  <li>Убедитесь, что весь контент помещён в нужные ячейки - в исходных данных каждая строка данных о планете отображается рядом со связанной с ней планетой.</li>\n  <li>Добавьте атрибуты, чтобы заголовки строк и столбцов были однозначно связаны со строками, столбцами или группами строк, для которых они выступают в качестве заголовков.</li>\n  <li>Добавьте чёрную рамку вокруг столбца, который содержит все заголовки строк с именами планет.</li>\n</ol></div></section><section aria-labelledby="подсказки_и_советы"><h2 id="подсказки_и_советы"><a>Подсказки и советы</a></h2><div class="section-content"><ul>\n  <li>Первая ячейка строки заголовка должна быть пустой, и занимать два столбца.</li>\n  <li>Заголовки групповых строк (например, <em>Jovian planets</em>), которые расположены слева от заголовков строк с именами планет (например, <em>Saturn</em>), немного сложно разобрать - необходимо убедиться, что каждый из них охватывает правильное количество строк и столбцов.</li>\n  <li>Один из способов связать заголовки с их строками / столбцами намного проще, чем другой.</li>\n</ul></div></section><section aria-labelledby="аттестация_или_дальнейшая_помощь"><h2 id="аттестация_или_дальнейшая_помощь"><a>Аттестация или дальнейшая помощь</a></h2><div class="section-content"><p>Если вы хотите, чтобы ваша работа была оценена, или вы застряли и хотите обратиться за помощью:</p>\n<ol>\n  <li>Разместите свою работу в онлайн-редакторе, таком как <a class="external" target="_blank">CodePen</a>, <a class="external" target="_blank">jsFiddle</a> или <a class="external" target="_blank">Glitch</a>.</li>\n  <li>Напишите сообщение с просьбой об оценке и/или помощи в <a class="external" target="_blank">разделе обучения на форуме MDN Discourse</a>. Ваш пост должен включать:\n    <ul>\n      <li>Описательный заголовок, такой как «Требуется оценка для структурирования данных планеты».</li>\n      <li>Детали того, что вы уже пробовали, и что вы хотели бы, чтобы мы сделали, например, если вы застряли и нуждаетесь в помощи, или хотите оценить свою работу.</li>\n      <li>Ссылка на пример, который вы хотите оценить или в котором вам нужна помощь, в онлайн-редакторе (как упомянуто в шаге 1 выше). Это хорошая практика в решении проблем - очень сложно помочь кому-то с проблемой кода, если вы не видите его код.</li>\n      <li>Ссылка на актуальную задачу или страницу оценки, чтобы мы могли найти вопрос, с которым вам нужно помочь.</li>\n    </ul>\n  </li>\n</ol></div></section>',
		works: [],
	},
];
